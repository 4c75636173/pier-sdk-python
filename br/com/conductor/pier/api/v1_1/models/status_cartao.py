# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class StatusCartao(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        StatusCartao - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'flag_altera_status': 'int',
            'flag_cadastro_nova_senha': 'int',
            'flag_cancela_conta': 'int',
            'flag_cancela_no_desbloqueio': 'int',
            'flag_cobra_tarifa': 'int',
            'flag_destino_transferencia': 'int',
            'flag_emite_provisorio': 'int',
            'flag_excecao_bandeira': 'int',
            'flag_origem_transferencia': 'int',
            'flag_reemite_cartao': 'int',
            'id': 'int',
            'id_status_destino_conta': 'int',
            'id_status_destino_desbloqueio': 'int',
            'nome': 'str'
        }

        self.attribute_map = {
            'flag_altera_status': 'flagAlteraStatus',
            'flag_cadastro_nova_senha': 'flagCadastroNovaSenha',
            'flag_cancela_conta': 'flagCancelaConta',
            'flag_cancela_no_desbloqueio': 'flagCancelaNoDesbloqueio',
            'flag_cobra_tarifa': 'flagCobraTarifa',
            'flag_destino_transferencia': 'flagDestinoTransferencia',
            'flag_emite_provisorio': 'flagEmiteProvisorio',
            'flag_excecao_bandeira': 'flagExcecaoBandeira',
            'flag_origem_transferencia': 'flagOrigemTransferencia',
            'flag_reemite_cartao': 'flagReemiteCartao',
            'id': 'id',
            'id_status_destino_conta': 'idStatusDestinoConta',
            'id_status_destino_desbloqueio': 'idStatusDestinoDesbloqueio',
            'nome': 'nome'
        }

        self._flag_altera_status = None
        self._flag_cadastro_nova_senha = None
        self._flag_cancela_conta = None
        self._flag_cancela_no_desbloqueio = None
        self._flag_cobra_tarifa = None
        self._flag_destino_transferencia = None
        self._flag_emite_provisorio = None
        self._flag_excecao_bandeira = None
        self._flag_origem_transferencia = None
        self._flag_reemite_cartao = None
        self._id = None
        self._id_status_destino_conta = None
        self._id_status_destino_desbloqueio = None
        self._nome = None

    @property
    def flag_altera_status(self):
        """
        Gets the flag_altera_status of this StatusCartao.
        Quando ativa, indica que ao ser atribu\u00C3\u00ADdo um idStatusCartao com essa caracter\u00C3\u00ADstica, o cart\u00C3\u00A3o ter\u00C3\u00A1 o seu idStatusCartao alterado para o que fora escolhido. Caso contr\u00C3\u00A1rio, o idStatusCartao s\u00C3\u00B3 ser\u00C3\u00A1 alterado ap\u00C3\u00B3s o desbloqueio de um novo cart\u00C3\u00A3o do mesmo Portador e Conta.

        :return: The flag_altera_status of this StatusCartao.
        :rtype: int
        """
        return self._flag_altera_status

    @flag_altera_status.setter
    def flag_altera_status(self, flag_altera_status):
        """
        Sets the flag_altera_status of this StatusCartao.
        Quando ativa, indica que ao ser atribu\u00C3\u00ADdo um idStatusCartao com essa caracter\u00C3\u00ADstica, o cart\u00C3\u00A3o ter\u00C3\u00A1 o seu idStatusCartao alterado para o que fora escolhido. Caso contr\u00C3\u00A1rio, o idStatusCartao s\u00C3\u00B3 ser\u00C3\u00A1 alterado ap\u00C3\u00B3s o desbloqueio de um novo cart\u00C3\u00A3o do mesmo Portador e Conta.

        :param flag_altera_status: The flag_altera_status of this StatusCartao.
        :type: int
        """
        self._flag_altera_status = flag_altera_status

    @property
    def flag_cadastro_nova_senha(self):
        """
        Gets the flag_cadastro_nova_senha of this StatusCartao.
        Quando ativa, indica que a senha cadastrada ser\u00C3\u00A1 exclu\u00C3\u00ADda no momento do Bloqueio do cart\u00C3\u00A3o com um idStatusCartao que possua essa caracter\u00C3\u00ADstica, sendo ent\u00C3\u00A3o necess\u00C3\u00A1rio o cadastro de uma nova senha.

        :return: The flag_cadastro_nova_senha of this StatusCartao.
        :rtype: int
        """
        return self._flag_cadastro_nova_senha

    @flag_cadastro_nova_senha.setter
    def flag_cadastro_nova_senha(self, flag_cadastro_nova_senha):
        """
        Sets the flag_cadastro_nova_senha of this StatusCartao.
        Quando ativa, indica que a senha cadastrada ser\u00C3\u00A1 exclu\u00C3\u00ADda no momento do Bloqueio do cart\u00C3\u00A3o com um idStatusCartao que possua essa caracter\u00C3\u00ADstica, sendo ent\u00C3\u00A3o necess\u00C3\u00A1rio o cadastro de uma nova senha.

        :param flag_cadastro_nova_senha: The flag_cadastro_nova_senha of this StatusCartao.
        :type: int
        """
        self._flag_cadastro_nova_senha = flag_cadastro_nova_senha

    @property
    def flag_cancela_conta(self):
        """
        Gets the flag_cancela_conta of this StatusCartao.
        Quando ativa, indica que cart\u00C3\u00B5es que tiverem um idStatusCartao atribu\u00C3\u00ADdo com essa caracter\u00C3\u00ADstica, e tal cart\u00C3\u00A3o seja de um titular (portador = 1), ter\u00C3\u00A3o a conta a qual o cart\u00C3\u00A3o pertence cancelada.

        :return: The flag_cancela_conta of this StatusCartao.
        :rtype: int
        """
        return self._flag_cancela_conta

    @flag_cancela_conta.setter
    def flag_cancela_conta(self, flag_cancela_conta):
        """
        Sets the flag_cancela_conta of this StatusCartao.
        Quando ativa, indica que cart\u00C3\u00B5es que tiverem um idStatusCartao atribu\u00C3\u00ADdo com essa caracter\u00C3\u00ADstica, e tal cart\u00C3\u00A3o seja de um titular (portador = 1), ter\u00C3\u00A3o a conta a qual o cart\u00C3\u00A3o pertence cancelada.

        :param flag_cancela_conta: The flag_cancela_conta of this StatusCartao.
        :type: int
        """
        self._flag_cancela_conta = flag_cancela_conta

    @property
    def flag_cancela_no_desbloqueio(self):
        """
        Gets the flag_cancela_no_desbloqueio of this StatusCartao.
        Quando ativa, indica que o cart\u00C3\u00A3o ativo que o portador possuir na mesma conta do cart\u00C3\u00A3o a ser desbloqueado, e que o status dele possua essa caracter\u00C3\u00ADstica, dever\u00C3\u00A1 ser cancelado quando um novo cart\u00C3\u00A3o for desbloqueado.

        :return: The flag_cancela_no_desbloqueio of this StatusCartao.
        :rtype: int
        """
        return self._flag_cancela_no_desbloqueio

    @flag_cancela_no_desbloqueio.setter
    def flag_cancela_no_desbloqueio(self, flag_cancela_no_desbloqueio):
        """
        Sets the flag_cancela_no_desbloqueio of this StatusCartao.
        Quando ativa, indica que o cart\u00C3\u00A3o ativo que o portador possuir na mesma conta do cart\u00C3\u00A3o a ser desbloqueado, e que o status dele possua essa caracter\u00C3\u00ADstica, dever\u00C3\u00A1 ser cancelado quando um novo cart\u00C3\u00A3o for desbloqueado.

        :param flag_cancela_no_desbloqueio: The flag_cancela_no_desbloqueio of this StatusCartao.
        :type: int
        """
        self._flag_cancela_no_desbloqueio = flag_cancela_no_desbloqueio

    @property
    def flag_cobra_tarifa(self):
        """
        Gets the flag_cobra_tarifa of this StatusCartao.
        Quando ativa, indica que cart\u00C3\u00B5es que tiverem um idStatusCartao atribu\u00C3\u00ADdo com essa caracter\u00C3\u00ADstica, incluir\u00C3\u00A3o a cobran\u00C3\u00A7a de uma tarifa para a conta de acordo com os valores definidos nos par\u00C3\u00A2metros do emissor.

        :return: The flag_cobra_tarifa of this StatusCartao.
        :rtype: int
        """
        return self._flag_cobra_tarifa

    @flag_cobra_tarifa.setter
    def flag_cobra_tarifa(self, flag_cobra_tarifa):
        """
        Sets the flag_cobra_tarifa of this StatusCartao.
        Quando ativa, indica que cart\u00C3\u00B5es que tiverem um idStatusCartao atribu\u00C3\u00ADdo com essa caracter\u00C3\u00ADstica, incluir\u00C3\u00A3o a cobran\u00C3\u00A7a de uma tarifa para a conta de acordo com os valores definidos nos par\u00C3\u00A2metros do emissor.

        :param flag_cobra_tarifa: The flag_cobra_tarifa of this StatusCartao.
        :type: int
        """
        self._flag_cobra_tarifa = flag_cobra_tarifa

    @property
    def flag_destino_transferencia(self):
        """
        Gets the flag_destino_transferencia of this StatusCartao.
        Quando ativa, indica que Cart\u00C3\u00B5es com este idStatusCartao podem receber transfer\u00C3\u00AAncias de cr\u00C3\u00A9ditos/d\u00C3\u00A9bitos oriundos de outros cart\u00C3\u00B5es.

        :return: The flag_destino_transferencia of this StatusCartao.
        :rtype: int
        """
        return self._flag_destino_transferencia

    @flag_destino_transferencia.setter
    def flag_destino_transferencia(self, flag_destino_transferencia):
        """
        Sets the flag_destino_transferencia of this StatusCartao.
        Quando ativa, indica que Cart\u00C3\u00B5es com este idStatusCartao podem receber transfer\u00C3\u00AAncias de cr\u00C3\u00A9ditos/d\u00C3\u00A9bitos oriundos de outros cart\u00C3\u00B5es.

        :param flag_destino_transferencia: The flag_destino_transferencia of this StatusCartao.
        :type: int
        """
        self._flag_destino_transferencia = flag_destino_transferencia

    @property
    def flag_emite_provisorio(self):
        """
        Gets the flag_emite_provisorio of this StatusCartao.
        Quando ativa, indica que poder\u00C3\u00A1 ser criado um novo cart\u00C3\u00A3o provis\u00C3\u00B3rio para o portador.

        :return: The flag_emite_provisorio of this StatusCartao.
        :rtype: int
        """
        return self._flag_emite_provisorio

    @flag_emite_provisorio.setter
    def flag_emite_provisorio(self, flag_emite_provisorio):
        """
        Sets the flag_emite_provisorio of this StatusCartao.
        Quando ativa, indica que poder\u00C3\u00A1 ser criado um novo cart\u00C3\u00A3o provis\u00C3\u00B3rio para o portador.

        :param flag_emite_provisorio: The flag_emite_provisorio of this StatusCartao.
        :type: int
        """
        self._flag_emite_provisorio = flag_emite_provisorio

    @property
    def flag_excecao_bandeira(self):
        """
        Gets the flag_excecao_bandeira of this StatusCartao.
        Quando ativa, indica que os Cart\u00C3\u00B5es que tiverem este idStatusCartao atribu\u00C3\u00ADdo dever\u00C3\u00A3o ter a respectiva informa\u00C3\u00A7\u00C3\u00A3o de mudan\u00C3\u00A7a de status inclu\u00C3\u00ADda no arquivo de exce\u00C3\u00A7\u00C3\u00A3o da Bandeira, a fim de manter atualizado o cadastro do cart\u00C3\u00A3o nela para nortear o que fazer com as transa\u00C3\u00A7\u00C3\u00B5es quando o autorizador estiver indispon\u00C3\u00ADvel.

        :return: The flag_excecao_bandeira of this StatusCartao.
        :rtype: int
        """
        return self._flag_excecao_bandeira

    @flag_excecao_bandeira.setter
    def flag_excecao_bandeira(self, flag_excecao_bandeira):
        """
        Sets the flag_excecao_bandeira of this StatusCartao.
        Quando ativa, indica que os Cart\u00C3\u00B5es que tiverem este idStatusCartao atribu\u00C3\u00ADdo dever\u00C3\u00A3o ter a respectiva informa\u00C3\u00A7\u00C3\u00A3o de mudan\u00C3\u00A7a de status inclu\u00C3\u00ADda no arquivo de exce\u00C3\u00A7\u00C3\u00A3o da Bandeira, a fim de manter atualizado o cadastro do cart\u00C3\u00A3o nela para nortear o que fazer com as transa\u00C3\u00A7\u00C3\u00B5es quando o autorizador estiver indispon\u00C3\u00ADvel.

        :param flag_excecao_bandeira: The flag_excecao_bandeira of this StatusCartao.
        :type: int
        """
        self._flag_excecao_bandeira = flag_excecao_bandeira

    @property
    def flag_origem_transferencia(self):
        """
        Gets the flag_origem_transferencia of this StatusCartao.
        Quando ativa, indica que Cart\u00C3\u00B5es com este idStatusCartao podem realizar a transfer\u00C3\u00AAncia de cr\u00C3\u00A9ditos/d\u00C3\u00A9bitos para outros cart\u00C3\u00B5es.

        :return: The flag_origem_transferencia of this StatusCartao.
        :rtype: int
        """
        return self._flag_origem_transferencia

    @flag_origem_transferencia.setter
    def flag_origem_transferencia(self, flag_origem_transferencia):
        """
        Sets the flag_origem_transferencia of this StatusCartao.
        Quando ativa, indica que Cart\u00C3\u00B5es com este idStatusCartao podem realizar a transfer\u00C3\u00AAncia de cr\u00C3\u00A9ditos/d\u00C3\u00A9bitos para outros cart\u00C3\u00B5es.

        :param flag_origem_transferencia: The flag_origem_transferencia of this StatusCartao.
        :type: int
        """
        self._flag_origem_transferencia = flag_origem_transferencia

    @property
    def flag_reemite_cartao(self):
        """
        Gets the flag_reemite_cartao of this StatusCartao.
        Quando ativa, indica que cart\u00C3\u00B5es que tiverem este status atribu\u00C3\u00ADdo ter\u00C3\u00A3o um novo cart\u00C3\u00A3o gerado para o portador, para a mesma conta, automaticamente.

        :return: The flag_reemite_cartao of this StatusCartao.
        :rtype: int
        """
        return self._flag_reemite_cartao

    @flag_reemite_cartao.setter
    def flag_reemite_cartao(self, flag_reemite_cartao):
        """
        Sets the flag_reemite_cartao of this StatusCartao.
        Quando ativa, indica que cart\u00C3\u00B5es que tiverem este status atribu\u00C3\u00ADdo ter\u00C3\u00A3o um novo cart\u00C3\u00A3o gerado para o portador, para a mesma conta, automaticamente.

        :param flag_reemite_cartao: The flag_reemite_cartao of this StatusCartao.
        :type: int
        """
        self._flag_reemite_cartao = flag_reemite_cartao

    @property
    def id(self):
        """
        Gets the id of this StatusCartao.
        C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Status do Cart\u00C3\u00A3o (id) 

        :return: The id of this StatusCartao.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this StatusCartao.
        C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Status do Cart\u00C3\u00A3o (id) 

        :param id: The id of this StatusCartao.
        :type: int
        """
        self._id = id

    @property
    def id_status_destino_conta(self):
        """
        Gets the id_status_destino_conta of this StatusCartao.
        Indica qual o idStatusCartao que ser\u00C3\u00A1 atribu\u00C3\u00ADdo a conta, caso ela seja cancelada devido ao bloqueio de um cart\u00C3\u00A3o quando for utilizado um idStatusCartao no processo de Bloqueio que possua essa caracter\u00C3\u00ADstica.

        :return: The id_status_destino_conta of this StatusCartao.
        :rtype: int
        """
        return self._id_status_destino_conta

    @id_status_destino_conta.setter
    def id_status_destino_conta(self, id_status_destino_conta):
        """
        Sets the id_status_destino_conta of this StatusCartao.
        Indica qual o idStatusCartao que ser\u00C3\u00A1 atribu\u00C3\u00ADdo a conta, caso ela seja cancelada devido ao bloqueio de um cart\u00C3\u00A3o quando for utilizado um idStatusCartao no processo de Bloqueio que possua essa caracter\u00C3\u00ADstica.

        :param id_status_destino_conta: The id_status_destino_conta of this StatusCartao.
        :type: int
        """
        self._id_status_destino_conta = id_status_destino_conta

    @property
    def id_status_destino_desbloqueio(self):
        """
        Gets the id_status_destino_desbloqueio of this StatusCartao.
        Indica qual o idStatusCartao que que ser\u00C3\u00A1 atribu\u00C3\u00ADdo aos cart\u00C3\u00B5es que forem cancelados devido ao desbloqueio de um novo cart\u00C3\u00A3o.

        :return: The id_status_destino_desbloqueio of this StatusCartao.
        :rtype: int
        """
        return self._id_status_destino_desbloqueio

    @id_status_destino_desbloqueio.setter
    def id_status_destino_desbloqueio(self, id_status_destino_desbloqueio):
        """
        Sets the id_status_destino_desbloqueio of this StatusCartao.
        Indica qual o idStatusCartao que que ser\u00C3\u00A1 atribu\u00C3\u00ADdo aos cart\u00C3\u00B5es que forem cancelados devido ao desbloqueio de um novo cart\u00C3\u00A3o.

        :param id_status_destino_desbloqueio: The id_status_destino_desbloqueio of this StatusCartao.
        :type: int
        """
        self._id_status_destino_desbloqueio = id_status_destino_desbloqueio

    @property
    def nome(self):
        """
        Gets the nome of this StatusCartao.
        Nome atribu\u00C3\u00ADdo ao Status de Entrega do Cart\u00C3\u00A3o.

        :return: The nome of this StatusCartao.
        :rtype: str
        """
        return self._nome

    @nome.setter
    def nome(self, nome):
        """
        Sets the nome of this StatusCartao.
        Nome atribu\u00C3\u00ADdo ao Status de Entrega do Cart\u00C3\u00A3o.

        :param nome: The nome of this StatusCartao.
        :type: str
        """
        self._nome = nome

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

