# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class EstgioCarto(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        EstgioCarto - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'cancela_conta': 'str',
            'id': 'int',
            'id_status_destino_desbloqueio': 'int',
            'nome': 'str',
            'permite_desbloqueio': 'str'
        }

        self.attribute_map = {
            'cancela_conta': 'cancelaConta',
            'id': 'id',
            'id_status_destino_desbloqueio': 'idStatusDestinoDesbloqueio',
            'nome': 'nome',
            'permite_desbloqueio': 'permiteDesbloqueio'
        }

        self._cancela_conta = None
        self._id = None
        self._id_status_destino_desbloqueio = None
        self._nome = None
        self._permite_desbloqueio = None

    @property
    def cancela_conta(self):
        """
        Gets the cancela_conta of this EstgioCarto.
        Indica que Cart\u00C3\u00B5es com este idStatusCartao devem ter a sua conta Cancelada, sendo: (0 = N\u00C3\u00A3o Cancelar) e  (1 = Cancelar Conta).

        :return: The cancela_conta of this EstgioCarto.
        :rtype: str
        """
        return self._cancela_conta

    @cancela_conta.setter
    def cancela_conta(self, cancela_conta):
        """
        Sets the cancela_conta of this EstgioCarto.
        Indica que Cart\u00C3\u00B5es com este idStatusCartao devem ter a sua conta Cancelada, sendo: (0 = N\u00C3\u00A3o Cancelar) e  (1 = Cancelar Conta).

        :param cancela_conta: The cancela_conta of this EstgioCarto.
        :type: str
        """
        self._cancela_conta = cancela_conta

    @property
    def id(self):
        """
        Gets the id of this EstgioCarto.
        C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Status do Cart\u00C3\u00A3o (id).

        :return: The id of this EstgioCarto.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this EstgioCarto.
        C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Status do Cart\u00C3\u00A3o (id).

        :param id: The id of this EstgioCarto.
        :type: int
        """
        self._id = id

    @property
    def id_status_destino_desbloqueio(self):
        """
        Gets the id_status_destino_desbloqueio of this EstgioCarto.
        Indica qual o idStatusCartao que deve ser atribu\u00C3\u00ADdo a um idCartao quando ele for desbloqueado.

        :return: The id_status_destino_desbloqueio of this EstgioCarto.
        :rtype: int
        """
        return self._id_status_destino_desbloqueio

    @id_status_destino_desbloqueio.setter
    def id_status_destino_desbloqueio(self, id_status_destino_desbloqueio):
        """
        Sets the id_status_destino_desbloqueio of this EstgioCarto.
        Indica qual o idStatusCartao que deve ser atribu\u00C3\u00ADdo a um idCartao quando ele for desbloqueado.

        :param id_status_destino_desbloqueio: The id_status_destino_desbloqueio of this EstgioCarto.
        :type: int
        """
        self._id_status_destino_desbloqueio = id_status_destino_desbloqueio

    @property
    def nome(self):
        """
        Gets the nome of this EstgioCarto.
        Nome atribu\u00C3\u00ADdo ao Status de Entrega do Cart\u00C3\u00A3o.

        :return: The nome of this EstgioCarto.
        :rtype: str
        """
        return self._nome

    @nome.setter
    def nome(self, nome):
        """
        Sets the nome of this EstgioCarto.
        Nome atribu\u00C3\u00ADdo ao Status de Entrega do Cart\u00C3\u00A3o.

        :param nome: The nome of this EstgioCarto.
        :type: str
        """
        self._nome = nome

    @property
    def permite_desbloqueio(self):
        """
        Gets the permite_desbloqueio of this EstgioCarto.
        Indica que Cart\u00C3\u00B5es com este idStatusCartao podem ser Desbloqueados, sendo: (0 = N\u00C3\u00A3o Permitido) e  (1 = Permitido).

        :return: The permite_desbloqueio of this EstgioCarto.
        :rtype: str
        """
        return self._permite_desbloqueio

    @permite_desbloqueio.setter
    def permite_desbloqueio(self, permite_desbloqueio):
        """
        Sets the permite_desbloqueio of this EstgioCarto.
        Indica que Cart\u00C3\u00B5es com este idStatusCartao podem ser Desbloqueados, sendo: (0 = N\u00C3\u00A3o Permitido) e  (1 = Permitido).

        :param permite_desbloqueio: The permite_desbloqueio of this EstgioCarto.
        :type: str
        """
        self._permite_desbloqueio = permite_desbloqueio

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

