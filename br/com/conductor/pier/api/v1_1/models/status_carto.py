# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class StatusCarto(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        StatusCarto - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'flag_altera_status': 'str',
            'flag_cadastro_nova_senha': 'str',
            'flag_cadastro_senha': 'str',
            'flag_cancela_cartao': 'str',
            'flag_cancela_conta': 'str',
            'flag_cobra_tarifa': 'str',
            'flag_desbloqueio': 'str',
            'flag_destino_transferencia': 'str',
            'flag_emite_provisorio': 'str',
            'flag_excecao_bandeira': 'str',
            'flag_origem_transferencia': 'str',
            'flag_reemite_cartao': 'str',
            'flag_reversao_cancelamento': 'str',
            'flag_reversao_desbloqueio': 'str',
            'id': 'int',
            'id_status_destino_conta': 'int',
            'id_status_destino_desbloqueio': 'int',
            'nome': 'str'
        }

        self.attribute_map = {
            'flag_altera_status': 'flagAlteraStatus',
            'flag_cadastro_nova_senha': 'flagCadastroNovaSenha',
            'flag_cadastro_senha': 'flagCadastroSenha',
            'flag_cancela_cartao': 'flagCancelaCartao',
            'flag_cancela_conta': 'flagCancelaConta',
            'flag_cobra_tarifa': 'flagCobraTarifa',
            'flag_desbloqueio': 'flagDesbloqueio',
            'flag_destino_transferencia': 'flagDestinoTransferencia',
            'flag_emite_provisorio': 'flagEmiteProvisorio',
            'flag_excecao_bandeira': 'flagExcecaoBandeira',
            'flag_origem_transferencia': 'flagOrigemTransferencia',
            'flag_reemite_cartao': 'flagReemiteCartao',
            'flag_reversao_cancelamento': 'flagReversaoCancelamento',
            'flag_reversao_desbloqueio': 'flagReversaoDesbloqueio',
            'id': 'id',
            'id_status_destino_conta': 'idStatusDestinoConta',
            'id_status_destino_desbloqueio': 'idStatusDestinoDesbloqueio',
            'nome': 'nome'
        }

        self._flag_altera_status = None
        self._flag_cadastro_nova_senha = None
        self._flag_cadastro_senha = None
        self._flag_cancela_cartao = None
        self._flag_cancela_conta = None
        self._flag_cobra_tarifa = None
        self._flag_desbloqueio = None
        self._flag_destino_transferencia = None
        self._flag_emite_provisorio = None
        self._flag_excecao_bandeira = None
        self._flag_origem_transferencia = None
        self._flag_reemite_cartao = None
        self._flag_reversao_cancelamento = None
        self._flag_reversao_desbloqueio = None
        self._id = None
        self._id_status_destino_conta = None
        self._id_status_destino_desbloqueio = None
        self._nome = None

    @property
    def flag_altera_status(self):
        """
        Gets the flag_altera_status of this StatusCarto.
        Quanto ativa, indica que Cart\u00C3\u00B5es que tiverem este idStatusCartao atribu\u00C3\u00ADdo n\u00C3\u00A3o ter\u00C3\u00A3o seu idStatusCartao Alterado, fazendo com que o Cart\u00C3\u00A3o atual possa continuar sendo utilizado at\u00C3\u00A9 o desbloqueio de um novo cart\u00C3\u00A3o.

        :return: The flag_altera_status of this StatusCarto.
        :rtype: str
        """
        return self._flag_altera_status

    @flag_altera_status.setter
    def flag_altera_status(self, flag_altera_status):
        """
        Sets the flag_altera_status of this StatusCarto.
        Quanto ativa, indica que Cart\u00C3\u00B5es que tiverem este idStatusCartao atribu\u00C3\u00ADdo n\u00C3\u00A3o ter\u00C3\u00A3o seu idStatusCartao Alterado, fazendo com que o Cart\u00C3\u00A3o atual possa continuar sendo utilizado at\u00C3\u00A9 o desbloqueio de um novo cart\u00C3\u00A3o.

        :param flag_altera_status: The flag_altera_status of this StatusCarto.
        :type: str
        """
        self._flag_altera_status = flag_altera_status

    @property
    def flag_cadastro_nova_senha(self):
        """
        Gets the flag_cadastro_nova_senha of this StatusCarto.
        Quando ativa, indica que os Cart\u00C3\u00B5es que tiverem este idStatusCartao atribu\u00C3\u00ADdo ter\u00C3\u00A3o a senha atual exclu\u00C3\u00ADda.

        :return: The flag_cadastro_nova_senha of this StatusCarto.
        :rtype: str
        """
        return self._flag_cadastro_nova_senha

    @flag_cadastro_nova_senha.setter
    def flag_cadastro_nova_senha(self, flag_cadastro_nova_senha):
        """
        Sets the flag_cadastro_nova_senha of this StatusCarto.
        Quando ativa, indica que os Cart\u00C3\u00B5es que tiverem este idStatusCartao atribu\u00C3\u00ADdo ter\u00C3\u00A3o a senha atual exclu\u00C3\u00ADda.

        :param flag_cadastro_nova_senha: The flag_cadastro_nova_senha of this StatusCarto.
        :type: str
        """
        self._flag_cadastro_nova_senha = flag_cadastro_nova_senha

    @property
    def flag_cadastro_senha(self):
        """
        Gets the flag_cadastro_senha of this StatusCarto.
        Quando ativa, indica se poder\u00C3\u00A1 ser realizado o cadastro de uma senha para o Cart\u00C3\u00A3o.

        :return: The flag_cadastro_senha of this StatusCarto.
        :rtype: str
        """
        return self._flag_cadastro_senha

    @flag_cadastro_senha.setter
    def flag_cadastro_senha(self, flag_cadastro_senha):
        """
        Sets the flag_cadastro_senha of this StatusCarto.
        Quando ativa, indica se poder\u00C3\u00A1 ser realizado o cadastro de uma senha para o Cart\u00C3\u00A3o.

        :param flag_cadastro_senha: The flag_cadastro_senha of this StatusCarto.
        :type: str
        """
        self._flag_cadastro_senha = flag_cadastro_senha

    @property
    def flag_cancela_cartao(self):
        """
        Gets the flag_cancela_cartao of this StatusCarto.
        Quando ativa, indica que Cart\u00C3\u00B5es que tiverem este idStatusCartao atribu\u00C3\u00ADdo ter\u00C3\u00A3o o cart\u00C3\u00A3o Cancelado.

        :return: The flag_cancela_cartao of this StatusCarto.
        :rtype: str
        """
        return self._flag_cancela_cartao

    @flag_cancela_cartao.setter
    def flag_cancela_cartao(self, flag_cancela_cartao):
        """
        Sets the flag_cancela_cartao of this StatusCarto.
        Quando ativa, indica que Cart\u00C3\u00B5es que tiverem este idStatusCartao atribu\u00C3\u00ADdo ter\u00C3\u00A3o o cart\u00C3\u00A3o Cancelado.

        :param flag_cancela_cartao: The flag_cancela_cartao of this StatusCarto.
        :type: str
        """
        self._flag_cancela_cartao = flag_cancela_cartao

    @property
    def flag_cancela_conta(self):
        """
        Gets the flag_cancela_conta of this StatusCarto.
        Quando ativa, indica que Cart\u00C3\u00B5es que tiverem este idStatusCartao atribu\u00C3\u00ADdo ter\u00C3\u00A3o a conta Cancelada.

        :return: The flag_cancela_conta of this StatusCarto.
        :rtype: str
        """
        return self._flag_cancela_conta

    @flag_cancela_conta.setter
    def flag_cancela_conta(self, flag_cancela_conta):
        """
        Sets the flag_cancela_conta of this StatusCarto.
        Quando ativa, indica que Cart\u00C3\u00B5es que tiverem este idStatusCartao atribu\u00C3\u00ADdo ter\u00C3\u00A3o a conta Cancelada.

        :param flag_cancela_conta: The flag_cancela_conta of this StatusCarto.
        :type: str
        """
        self._flag_cancela_conta = flag_cancela_conta

    @property
    def flag_cobra_tarifa(self):
        """
        Gets the flag_cobra_tarifa of this StatusCarto.
        Quando ativa, indica que Cart\u00C3\u00B5es que tiverem este idStatusCartao atribu\u00C3\u00ADdo ter\u00C3\u00A3o a cobran\u00C3\u00A7a de tarifa lan\u00C3\u00A7ada junto a gera\u00C3\u00A7\u00C3\u00A3o do novo cart\u00C3\u00A3o, desde que o Produto ao qual o cart\u00C3\u00A3o pertence possua o respectivo par\u00C3\u00A2metro configurado.

        :return: The flag_cobra_tarifa of this StatusCarto.
        :rtype: str
        """
        return self._flag_cobra_tarifa

    @flag_cobra_tarifa.setter
    def flag_cobra_tarifa(self, flag_cobra_tarifa):
        """
        Sets the flag_cobra_tarifa of this StatusCarto.
        Quando ativa, indica que Cart\u00C3\u00B5es que tiverem este idStatusCartao atribu\u00C3\u00ADdo ter\u00C3\u00A3o a cobran\u00C3\u00A7a de tarifa lan\u00C3\u00A7ada junto a gera\u00C3\u00A7\u00C3\u00A3o do novo cart\u00C3\u00A3o, desde que o Produto ao qual o cart\u00C3\u00A3o pertence possua o respectivo par\u00C3\u00A2metro configurado.

        :param flag_cobra_tarifa: The flag_cobra_tarifa of this StatusCarto.
        :type: str
        """
        self._flag_cobra_tarifa = flag_cobra_tarifa

    @property
    def flag_desbloqueio(self):
        """
        Gets the flag_desbloqueio of this StatusCarto.
        Quando ativa, indica que Cart\u00C3\u00B5es com este idStatusCartao poder\u00C3\u00A3o ser Desbloqueados.

        :return: The flag_desbloqueio of this StatusCarto.
        :rtype: str
        """
        return self._flag_desbloqueio

    @flag_desbloqueio.setter
    def flag_desbloqueio(self, flag_desbloqueio):
        """
        Sets the flag_desbloqueio of this StatusCarto.
        Quando ativa, indica que Cart\u00C3\u00B5es com este idStatusCartao poder\u00C3\u00A3o ser Desbloqueados.

        :param flag_desbloqueio: The flag_desbloqueio of this StatusCarto.
        :type: str
        """
        self._flag_desbloqueio = flag_desbloqueio

    @property
    def flag_destino_transferencia(self):
        """
        Gets the flag_destino_transferencia of this StatusCarto.
        Quando ativa, indica que Cart\u00C3\u00B5es com este idStatusCartao podem receber transfer\u00C3\u00AAncias de cr\u00C3\u00A9ditos/d\u00C3\u00A9bitos oriundos de outros cart\u00C3\u00B5es.

        :return: The flag_destino_transferencia of this StatusCarto.
        :rtype: str
        """
        return self._flag_destino_transferencia

    @flag_destino_transferencia.setter
    def flag_destino_transferencia(self, flag_destino_transferencia):
        """
        Sets the flag_destino_transferencia of this StatusCarto.
        Quando ativa, indica que Cart\u00C3\u00B5es com este idStatusCartao podem receber transfer\u00C3\u00AAncias de cr\u00C3\u00A9ditos/d\u00C3\u00A9bitos oriundos de outros cart\u00C3\u00B5es.

        :param flag_destino_transferencia: The flag_destino_transferencia of this StatusCarto.
        :type: str
        """
        self._flag_destino_transferencia = flag_destino_transferencia

    @property
    def flag_emite_provisorio(self):
        """
        Gets the flag_emite_provisorio of this StatusCarto.
        Quando ativa, indica que os portadores que tiverem seus cart\u00C3\u00B5es associados a idStatusCartao com esta flag poder\u00C3\u00A3o solicitar a emiss\u00C3\u00A3o de um cart\u00C3\u00A3o provis\u00C3\u00B3rio at\u00C3\u00A9 que um novo cart\u00C3\u00A3o definitivo seja recebido. 

        :return: The flag_emite_provisorio of this StatusCarto.
        :rtype: str
        """
        return self._flag_emite_provisorio

    @flag_emite_provisorio.setter
    def flag_emite_provisorio(self, flag_emite_provisorio):
        """
        Sets the flag_emite_provisorio of this StatusCarto.
        Quando ativa, indica que os portadores que tiverem seus cart\u00C3\u00B5es associados a idStatusCartao com esta flag poder\u00C3\u00A3o solicitar a emiss\u00C3\u00A3o de um cart\u00C3\u00A3o provis\u00C3\u00B3rio at\u00C3\u00A9 que um novo cart\u00C3\u00A3o definitivo seja recebido. 

        :param flag_emite_provisorio: The flag_emite_provisorio of this StatusCarto.
        :type: str
        """
        self._flag_emite_provisorio = flag_emite_provisorio

    @property
    def flag_excecao_bandeira(self):
        """
        Gets the flag_excecao_bandeira of this StatusCarto.
        Quando ativa, indica que os Cart\u00C3\u00B5es que tiverem este idStatusCartao atribu\u00C3\u00ADdo dever\u00C3\u00A3o ter a respectiva informa\u00C3\u00A7\u00C3\u00A3o de mudan\u00C3\u00A7a de status inclu\u00C3\u00ADda no arquivo de exce\u00C3\u00A7\u00C3\u00A3o da Bandeira, a fim de manter atualizado o cadastro do cart\u00C3\u00A3o nela para nortear o que fazer com as transa\u00C3\u00A7\u00C3\u00B5es quando o autorizador estiver indispon\u00C3\u00ADvel.

        :return: The flag_excecao_bandeira of this StatusCarto.
        :rtype: str
        """
        return self._flag_excecao_bandeira

    @flag_excecao_bandeira.setter
    def flag_excecao_bandeira(self, flag_excecao_bandeira):
        """
        Sets the flag_excecao_bandeira of this StatusCarto.
        Quando ativa, indica que os Cart\u00C3\u00B5es que tiverem este idStatusCartao atribu\u00C3\u00ADdo dever\u00C3\u00A3o ter a respectiva informa\u00C3\u00A7\u00C3\u00A3o de mudan\u00C3\u00A7a de status inclu\u00C3\u00ADda no arquivo de exce\u00C3\u00A7\u00C3\u00A3o da Bandeira, a fim de manter atualizado o cadastro do cart\u00C3\u00A3o nela para nortear o que fazer com as transa\u00C3\u00A7\u00C3\u00B5es quando o autorizador estiver indispon\u00C3\u00ADvel.

        :param flag_excecao_bandeira: The flag_excecao_bandeira of this StatusCarto.
        :type: str
        """
        self._flag_excecao_bandeira = flag_excecao_bandeira

    @property
    def flag_origem_transferencia(self):
        """
        Gets the flag_origem_transferencia of this StatusCarto.
        Quando ativa, indica que Cart\u00C3\u00B5es com este idStatusCartao podem realizar a transfer\u00C3\u00AAncia de cr\u00C3\u00A9ditos/d\u00C3\u00A9bitos para outros cart\u00C3\u00B5es.

        :return: The flag_origem_transferencia of this StatusCarto.
        :rtype: str
        """
        return self._flag_origem_transferencia

    @flag_origem_transferencia.setter
    def flag_origem_transferencia(self, flag_origem_transferencia):
        """
        Sets the flag_origem_transferencia of this StatusCarto.
        Quando ativa, indica que Cart\u00C3\u00B5es com este idStatusCartao podem realizar a transfer\u00C3\u00AAncia de cr\u00C3\u00A9ditos/d\u00C3\u00A9bitos para outros cart\u00C3\u00B5es.

        :param flag_origem_transferencia: The flag_origem_transferencia of this StatusCarto.
        :type: str
        """
        self._flag_origem_transferencia = flag_origem_transferencia

    @property
    def flag_reemite_cartao(self):
        """
        Gets the flag_reemite_cartao of this StatusCarto.
        Quando ativa, indica que Cart\u00C3\u00B5es que tiverem este idStatusCartao atribu\u00C3\u00ADdo ter\u00C3\u00A3o um novo cart\u00C3\u00A3o automaticamente gerado.

        :return: The flag_reemite_cartao of this StatusCarto.
        :rtype: str
        """
        return self._flag_reemite_cartao

    @flag_reemite_cartao.setter
    def flag_reemite_cartao(self, flag_reemite_cartao):
        """
        Sets the flag_reemite_cartao of this StatusCarto.
        Quando ativa, indica que Cart\u00C3\u00B5es que tiverem este idStatusCartao atribu\u00C3\u00ADdo ter\u00C3\u00A3o um novo cart\u00C3\u00A3o automaticamente gerado.

        :param flag_reemite_cartao: The flag_reemite_cartao of this StatusCarto.
        :type: str
        """
        self._flag_reemite_cartao = flag_reemite_cartao

    @property
    def flag_reversao_cancelamento(self):
        """
        Gets the flag_reversao_cancelamento of this StatusCarto.
        Quando ativa, indica que o cart\u00C3\u00A3o, mesmo tendo sido cancelado, poder\u00C3\u00A1 ter o processo desfeito.

        :return: The flag_reversao_cancelamento of this StatusCarto.
        :rtype: str
        """
        return self._flag_reversao_cancelamento

    @flag_reversao_cancelamento.setter
    def flag_reversao_cancelamento(self, flag_reversao_cancelamento):
        """
        Sets the flag_reversao_cancelamento of this StatusCarto.
        Quando ativa, indica que o cart\u00C3\u00A3o, mesmo tendo sido cancelado, poder\u00C3\u00A1 ter o processo desfeito.

        :param flag_reversao_cancelamento: The flag_reversao_cancelamento of this StatusCarto.
        :type: str
        """
        self._flag_reversao_cancelamento = flag_reversao_cancelamento

    @property
    def flag_reversao_desbloqueio(self):
        """
        Gets the flag_reversao_desbloqueio of this StatusCarto.
        Quando ativa, indica que o cart\u00C3\u00A3o, mesmo tendo sido bloqueado, poder\u00C3\u00A1 ter o processo desfeito.

        :return: The flag_reversao_desbloqueio of this StatusCarto.
        :rtype: str
        """
        return self._flag_reversao_desbloqueio

    @flag_reversao_desbloqueio.setter
    def flag_reversao_desbloqueio(self, flag_reversao_desbloqueio):
        """
        Sets the flag_reversao_desbloqueio of this StatusCarto.
        Quando ativa, indica que o cart\u00C3\u00A3o, mesmo tendo sido bloqueado, poder\u00C3\u00A1 ter o processo desfeito.

        :param flag_reversao_desbloqueio: The flag_reversao_desbloqueio of this StatusCarto.
        :type: str
        """
        self._flag_reversao_desbloqueio = flag_reversao_desbloqueio

    @property
    def id(self):
        """
        Gets the id of this StatusCarto.
        C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Status do Cart\u00C3\u00A3o (id) 

        :return: The id of this StatusCarto.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this StatusCarto.
        C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Status do Cart\u00C3\u00A3o (id) 

        :param id: The id of this StatusCarto.
        :type: int
        """
        self._id = id

    @property
    def id_status_destino_conta(self):
        """
        Gets the id_status_destino_conta of this StatusCarto.
        Indica qual o idStatusConta que ser\u00C3\u00A1 atribu\u00C3\u00ADdo ao idConta que tiver o Cartao do titular da mesma cancelado por um idStatusCartao que recomenda o cancelamento da conta.

        :return: The id_status_destino_conta of this StatusCarto.
        :rtype: int
        """
        return self._id_status_destino_conta

    @id_status_destino_conta.setter
    def id_status_destino_conta(self, id_status_destino_conta):
        """
        Sets the id_status_destino_conta of this StatusCarto.
        Indica qual o idStatusConta que ser\u00C3\u00A1 atribu\u00C3\u00ADdo ao idConta que tiver o Cartao do titular da mesma cancelado por um idStatusCartao que recomenda o cancelamento da conta.

        :param id_status_destino_conta: The id_status_destino_conta of this StatusCarto.
        :type: int
        """
        self._id_status_destino_conta = id_status_destino_conta

    @property
    def id_status_destino_desbloqueio(self):
        """
        Gets the id_status_destino_desbloqueio of this StatusCarto.
        Indica qual o idStatusCartao que deve ser atribu\u00C3\u00ADdo a um idCartao quando ele for desbloqueado.

        :return: The id_status_destino_desbloqueio of this StatusCarto.
        :rtype: int
        """
        return self._id_status_destino_desbloqueio

    @id_status_destino_desbloqueio.setter
    def id_status_destino_desbloqueio(self, id_status_destino_desbloqueio):
        """
        Sets the id_status_destino_desbloqueio of this StatusCarto.
        Indica qual o idStatusCartao que deve ser atribu\u00C3\u00ADdo a um idCartao quando ele for desbloqueado.

        :param id_status_destino_desbloqueio: The id_status_destino_desbloqueio of this StatusCarto.
        :type: int
        """
        self._id_status_destino_desbloqueio = id_status_destino_desbloqueio

    @property
    def nome(self):
        """
        Gets the nome of this StatusCarto.
        Nome atribu\u00C3\u00ADdo ao Status de Entrega do Cart\u00C3\u00A3o.

        :return: The nome of this StatusCarto.
        :rtype: str
        """
        return self._nome

    @nome.setter
    def nome(self, nome):
        """
        Sets the nome of this StatusCarto.
        Nome atribu\u00C3\u00ADdo ao Status de Entrega do Cart\u00C3\u00A3o.

        :param nome: The nome of this StatusCarto.
        :type: str
        """
        self._nome = nome

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

