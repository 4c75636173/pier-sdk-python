# coding: utf-8

"""
OrigemComercialApi.py
Copyright 2016 SmartBear Software

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
"""

from __future__ import absolute_import

import sys
import os

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class OrigemComercialApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def consultar_origem_comercial_using_get(self, id_origem_comercial, **kwargs):
        """
        Opera\u00C3\u00A7\u00C3\u00A3o utilizada para consultar uma determinada Origem Comercial 
        Este m\u00C3\u00A9todo permite que sejam listados os registros de uma determinada Origem Comercial existente na base do emissor. Para isso, \u00C3\u00A9 preciso informar o seu respectivo c\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o (id). 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.consultar_origem_comercial_using_get(id_origem_comercial, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id_origem_comercial: ID da Origem Comercial (required)
        :return: OrigemComercial
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id_origem_comercial']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method consultar_origem_comercial_using_get" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'id_origem_comercial' is set
        if ('id_origem_comercial' not in params) or (params['id_origem_comercial'] is None):
            raise ValueError("Missing the required parameter `id_origem_comercial` when calling `consultar_origem_comercial_using_get`")

        resource_path = '/api/origens-comerciais/{id_origem_comercial}'.replace('{format}', 'json')
        path_params = {}
        if 'id_origem_comercial' in params:
            path_params['id_origem_comercial'] = params['id_origem_comercial']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['access_token']

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='OrigemComercial',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def listar_origens_comerciais_using_get(self, **kwargs):
        """
        Opera\u00C3\u00A7\u00C3\u00A3o utilizada para listar Origens Comerciais 
        Este m\u00C3\u00A9todo permite que sejam listadas as Origens Comerciais existentes na base do emissor.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.listar_origens_comerciais_using_get(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id_origem_comercial: ID da Origem Comercial
        :param str nome: Nome da Origem Comercial
        :param str status: Status da Origem Comercial
        :param int page: P\u00C3\u00A1gina solicitada (Default = 0)
        :param int limit: Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 100, Max = 100)
        :return: ListaOrigensComerciais
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id_origem_comercial', 'nome', 'status', 'page', 'limit']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method listar_origens_comerciais_using_get" % key
                )
            params[key] = val
        del params['kwargs']


        resource_path = '/api/origens-comerciais'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'id_origem_comercial' in params:
            query_params['id_origem_comercial'] = params['id_origem_comercial']
        if 'nome' in params:
            query_params['nome'] = params['nome']
        if 'status' in params:
            query_params['status'] = params['status']
        if 'page' in params:
            query_params['page'] = params['page']
        if 'limit' in params:
            query_params['limit'] = params['limit']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['access_token']

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='ListaOrigensComerciais',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response
