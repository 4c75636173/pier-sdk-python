# coding: utf-8

"""
GlobaltagusuarioApi.py
Copyright 2016 SmartBear Software

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
"""

from __future__ import absolute_import

import sys
import os

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class GlobaltagusuarioApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def alterar_senha_login_using_post(self, login, senha_nova, **kwargs):
        """
        {{{usuario_resource_alterar_senha_login}}}
        {{{usuario_resource_alterar_senha_login_notes}}}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.alterar_senha_login_using_post(login, senha_nova, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str login: {{{usuario_resource_alterar_senha_login_param_login}}} (required)
        :param str senha_nova: {{{usuario_resource_alterar_senha_login_param_senha_nova}}} (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['login', 'senha_nova']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method alterar_senha_login_using_post" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'login' is set
        if ('login' not in params) or (params['login'] is None):
            raise ValueError("Missing the required parameter `login` when calling `alterar_senha_login_using_post`")
        # verify the required parameter 'senha_nova' is set
        if ('senha_nova' not in params) or (params['senha_nova'] is None):
            raise ValueError("Missing the required parameter `senha_nova` when calling `alterar_senha_login_using_post`")

        resource_path = '/api/usuarios/{login}/alterar-senha'.replace('{format}', 'json')
        path_params = {}
        if 'login' in params:
            path_params['login'] = params['login']

        query_params = {}

        header_params = {}
        if 'senha_nova' in params:
            header_params['senhaNova'] = params['senha_nova']

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='str',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def alterar_senha_using_put(self, id, senha_atual, senha_nova, **kwargs):
        """
        {{{usuario_resource_alterar_senha}}}
        {{{usuario_resource_alterar_senha_notes}}}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.alterar_senha_using_put(id, senha_atual, senha_nova, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: {{{usuario_resource_alterar_senha_param_id}}} (required)
        :param str senha_atual: {{{usuario_resource_alterar_senha_param_senha_atual}}} (required)
        :param str senha_nova: {{{usuario_resource_alterar_senha_param_senha_nova}}} (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'senha_atual', 'senha_nova']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method alterar_senha_using_put" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `alterar_senha_using_put`")
        # verify the required parameter 'senha_atual' is set
        if ('senha_atual' not in params) or (params['senha_atual'] is None):
            raise ValueError("Missing the required parameter `senha_atual` when calling `alterar_senha_using_put`")
        # verify the required parameter 'senha_nova' is set
        if ('senha_nova' not in params) or (params['senha_nova'] is None):
            raise ValueError("Missing the required parameter `senha_nova` when calling `alterar_senha_using_put`")

        resource_path = '/api/usuarios/{id}/alterar-senha'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}
        if 'senha_atual' in params:
            header_params['senha_atual'] = params['senha_atual']
        if 'senha_nova' in params:
            header_params['senha_nova'] = params['senha_nova']

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='str',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def alterar_using_put23(self, id, update, **kwargs):
        """
        {{{usuario_resource_alterar}}}
        {{{usuario_resource_alterar_notes}}}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.alterar_using_put23(id, update, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: {{{usuario_resource_alterar_param_id}}} (required)
        :param UsuarioUpdateValue update: update (required)
        :return: UsuarioResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'update']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method alterar_using_put23" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `alterar_using_put23`")
        # verify the required parameter 'update' is set
        if ('update' not in params) or (params['update'] is None):
            raise ValueError("Missing the required parameter `update` when calling `alterar_using_put23`")

        resource_path = '/api/usuarios/{id}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'update' in params:
            body_params = params['update']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='UsuarioResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def ativar_usuario_using_post1(self, id, **kwargs):
        """
        {{{usuario_resource_ativar_usuario}}}
        {{{usuario_resource_ativar_usuario_notes}}}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.ativar_usuario_using_post1(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: {{{usuario_resource_ativar_usuario_param_id}}} (required)
        :return: UsuarioResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ativar_usuario_using_post1" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `ativar_usuario_using_post1`")

        resource_path = '/api/usuarios/{id}/ativar-usuario'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='UsuarioResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def atualizar_using_put2(self, update, **kwargs):
        """
        {{{controle_seguranca_dispositivo_atualizar}}}
        {{{controle_seguranca_dispositivo_atualizar_notas}}}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.atualizar_using_put2(update, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param ControleSegurancaDispositivoUpdateValor update: update (required)
        :return: ControleSegurancaDispositivoResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['update']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method atualizar_using_put2" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'update' is set
        if ('update' not in params) or (params['update'] is None):
            raise ValueError("Missing the required parameter `update` when calling `atualizar_using_put2`")

        resource_path = '/api/controles-seguranca-dispositivos'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'update' in params:
            body_params = params['update']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='ControleSegurancaDispositivoResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def consultar_contas_vinculadas_using_get(self, id, **kwargs):
        """
        {{{usuario_recurso_listar_por_id_usuario}}}
        {{{usuario_recurso_listar_por_id_usuario_notas}}}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.consultar_contas_vinculadas_using_get(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: {{{usuario_recurso_listar_por_id_param_id_usuario}}} (required)
        :param list[str] sort: {{{global_menssagem_sort_sort}}}
        :param int page: {{{global_menssagem_sort_page_value}}}
        :param int limit: {{{global_menssagem_sort_limit}}}
        :return: PageUsuarioContasResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'sort', 'page', 'limit']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method consultar_contas_vinculadas_using_get" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `consultar_contas_vinculadas_using_get`")

        resource_path = '/api/usuarios/{id}/vincular-contas'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}
        if 'sort' in params:
            query_params['sort'] = params['sort']
        if 'page' in params:
            query_params['page'] = params['page']
        if 'limit' in params:
            query_params['limit'] = params['limit']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='PageUsuarioContasResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def consultar_using_get14(self, id_usuario, **kwargs):
        """
        {{{controle_seguranca_dispositivo_consultar}}}
        {{{controle_seguranca_dispositivo_consultar_notas}}}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.consultar_using_get14(id_usuario, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id_usuario: {{{usuario_resource_consultar_param_idUsuario}}} (required)
        :param list[str] sort: {{{global_menssagem_sort_sort}}}
        :param int page: {{{global_menssagem_sort_page_value}}}
        :param int limit: {{{global_menssagem_sort_limit}}}
        :return: PageControleSegurancaDispositivoResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id_usuario', 'sort', 'page', 'limit']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method consultar_using_get14" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'id_usuario' is set
        if ('id_usuario' not in params) or (params['id_usuario'] is None):
            raise ValueError("Missing the required parameter `id_usuario` when calling `consultar_using_get14`")

        resource_path = '/api/controles-seguranca-dispositivos'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'id_usuario' in params:
            query_params['idUsuario'] = params['id_usuario']
        if 'sort' in params:
            query_params['sort'] = params['sort']
        if 'page' in params:
            query_params['page'] = params['page']
        if 'limit' in params:
            query_params['limit'] = params['limit']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='PageControleSegurancaDispositivoResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def consultar_using_get50(self, id, **kwargs):
        """
        {{{usuario_resource_consultar}}}
        {{{usuario_resource_consultar_notes}}}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.consultar_using_get50(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: {{{usuario_resource_consultar_param_id}}} (required)
        :return: UsuarioResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method consultar_using_get50" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `consultar_using_get50`")

        resource_path = '/api/usuarios/{id}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='UsuarioResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def desativar_usuario_using_post1(self, id, **kwargs):
        """
        {{{usuario_resource_desativar_usuario}}}
        {{{usuario_resource_desativar_usuario_notes}}}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.desativar_usuario_using_post1(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: {{{usuario_resource_desativar_usuario_param_id}}} (required)
        :return: UsuarioResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method desativar_usuario_using_post1" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `desativar_usuario_using_post1`")

        resource_path = '/api/usuarios/{id}/desativar-usuario'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='UsuarioResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def listar_using_get62(self, **kwargs):
        """
        {{{usuario_resource_listar}}}
        {{{usuario_resource_listar_notes}}}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.listar_using_get62(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param list[str] sort: {{{global_menssagem_sort_sort}}}
        :param int page: {{{global_menssagem_sort_page_value}}}
        :param int limit: {{{global_menssagem_sort_limit}}}
        :param str nome: {{{usuario_request_nome_value}}}
        :param str cpf: {{{usuario_request_cpf_value}}}
        :param str email: {{{usuario_request_email_value}}}
        :param str status: {{{usuario_request_status_value}}}
        :return: PageUsuarioResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sort', 'page', 'limit', 'nome', 'cpf', 'email', 'status']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method listar_using_get62" % key
                )
            params[key] = val
        del params['kwargs']


        resource_path = '/api/usuarios'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'sort' in params:
            query_params['sort'] = params['sort']
        if 'page' in params:
            query_params['page'] = params['page']
        if 'limit' in params:
            query_params['limit'] = params['limit']
        if 'nome' in params:
            query_params['nome'] = params['nome']
        if 'cpf' in params:
            query_params['cpf'] = params['cpf']
        if 'email' in params:
            query_params['email'] = params['email']
        if 'status' in params:
            query_params['status'] = params['status']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='PageUsuarioResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def recuperar_senha_using_post(self, id, **kwargs):
        """
        {{{usuario_resource_recuperar_senha}}}
        {{{usuario_resource_recuperar_senha_notes}}}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.recuperar_senha_using_post(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: {{{usuario_resource_recuperar_senha_param_id}}} (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method recuperar_senha_using_post" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `recuperar_senha_using_post`")

        resource_path = '/api/usuarios/{id}/recuperar-senha'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='str',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def salvar_using_post33(self, persist, **kwargs):
        """
        {{{usuario_resource_salvar}}}
        {{{usuario_resource_salvar_notes}}}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.salvar_using_post33(persist, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param UsuarioPersistencia persist: persist (required)
        :return: UsuarioResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['persist']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method salvar_using_post33" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'persist' is set
        if ('persist' not in params) or (params['persist'] is None):
            raise ValueError("Missing the required parameter `persist` when calling `salvar_using_post33`")

        resource_path = '/api/usuarios'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'persist' in params:
            body_params = params['persist']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='UsuarioResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def salvar_using_post9(self, persist, **kwargs):
        """
        {{{controle_seguranca_dispositivo_salvar}}}
        {{{controle_seguranca_dispositivo_salvar_notas}}}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.salvar_using_post9(persist, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param ControleSegurancaDispositivoPersistencia persist: persist (required)
        :return: ControleSegurancaDispositivoResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['persist']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method salvar_using_post9" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'persist' is set
        if ('persist' not in params) or (params['persist'] is None):
            raise ValueError("Missing the required parameter `persist` when calling `salvar_using_post9`")

        resource_path = '/api/controles-seguranca-dispositivos'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'persist' in params:
            body_params = params['persist']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='ControleSegurancaDispositivoResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def validar_senha_forte_using_post(self, senha, usuario_senha_forte_persist, **kwargs):
        """
        {{{usuario_resource_validar_senha_forte}}}
        {{{usuario_resource_validar_senha_forte_notes}}}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.validar_senha_forte_using_post(senha, usuario_senha_forte_persist, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str senha: {{{usuario_resource_validar_senha_forte_param_senha}}} (required)
        :param UsuarioSenhaFortePersistencia usuario_senha_forte_persist: {{{usuario_resource_validar_senha_forte_param_id_plataforma}}} (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['senha', 'usuario_senha_forte_persist']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method validar_senha_forte_using_post" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'senha' is set
        if ('senha' not in params) or (params['senha'] is None):
            raise ValueError("Missing the required parameter `senha` when calling `validar_senha_forte_using_post`")
        # verify the required parameter 'usuario_senha_forte_persist' is set
        if ('usuario_senha_forte_persist' not in params) or (params['usuario_senha_forte_persist'] is None):
            raise ValueError("Missing the required parameter `usuario_senha_forte_persist` when calling `validar_senha_forte_using_post`")

        resource_path = '/api/usuarios/validar-senha-forte'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}
        if 'senha' in params:
            header_params['senha'] = params['senha']

        form_params = []
        local_var_files = {}

        body_params = None
        if 'usuario_senha_forte_persist' in params:
            body_params = params['usuario_senha_forte_persist']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='str',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def validar_senha_login_using_post(self, login, senha, **kwargs):
        """
        {{{usuario_resource_validar_senha_login}}}
        {{{usuario_resource_validar_senha_login_notes}}}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.validar_senha_login_using_post(login, senha, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str login: {{{usuario_resource_validar_senha_login_param_login}}} (required)
        :param str senha: {{{usuario_resource_validar_senha_login_param_senha}}} (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['login', 'senha']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method validar_senha_login_using_post" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'login' is set
        if ('login' not in params) or (params['login'] is None):
            raise ValueError("Missing the required parameter `login` when calling `validar_senha_login_using_post`")
        # verify the required parameter 'senha' is set
        if ('senha' not in params) or (params['senha'] is None):
            raise ValueError("Missing the required parameter `senha` when calling `validar_senha_login_using_post`")

        resource_path = '/api/usuarios/{login}/validar-senha'.replace('{format}', 'json')
        path_params = {}
        if 'login' in params:
            path_params['login'] = params['login']

        query_params = {}

        header_params = {}
        if 'senha' in params:
            header_params['senha'] = params['senha']

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='object',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def validar_senha_using_get1(self, senha, id, **kwargs):
        """
        {{{usuario_resource_validar_senha}}}
        {{{usuario_resource_validar_senha_notes}}}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.validar_senha_using_get1(senha, id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str senha: {{{usuario_resource_validar_senha_param_senha}}} (required)
        :param int id: {{{usuario_resource_validar_senha_param_id}}} (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['senha', 'id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method validar_senha_using_get1" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'senha' is set
        if ('senha' not in params) or (params['senha'] is None):
            raise ValueError("Missing the required parameter `senha` when calling `validar_senha_using_get1`")
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `validar_senha_using_get1`")

        resource_path = '/api/usuarios/{id}/validar-senha'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}
        if 'senha' in params:
            header_params['senha'] = params['senha']

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='str',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def vincular_contas_using_post(self, id, **kwargs):
        """
        {{{usuario_recurso_vincular_usuarios}}}
        {{{usuario_recurso_vincular_usuarios_notas}}}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.vincular_contas_using_post(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: {{{usuario_recurso_vincular_usuarios_param_id}}} (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method vincular_contas_using_post" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `vincular_contas_using_post`")

        resource_path = '/api/usuarios/{id}/vincular-usuarios'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='str',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response
