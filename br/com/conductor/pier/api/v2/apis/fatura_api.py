# coding: utf-8

"""
FaturaApi.py
Copyright 2016 SmartBear Software

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
"""

from __future__ import absolute_import

import sys
import os

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class FaturaApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def consultar_fatura_using_get1(self, data_vencimento, id_conta, **kwargs):
        """
        Consulta fatura de um cliente
        Consulta fatura de um cliente pela data de vencimento.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.consultar_fatura_using_get1(data_vencimento, id_conta, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str data_vencimento: Data Vencimento (required)
        :param int id_conta: C\u00F3digo de identifica\u00E7\u00E3o da conta (id). (required)
        :return: FaturaDetalheResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['data_vencimento', 'id_conta']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method consultar_fatura_using_get1" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'data_vencimento' is set
        if ('data_vencimento' not in params) or (params['data_vencimento'] is None):
            raise ValueError("Missing the required parameter `data_vencimento` when calling `consultar_fatura_using_get1`")
        # verify the required parameter 'id_conta' is set
        if ('id_conta' not in params) or (params['id_conta'] is None):
            raise ValueError("Missing the required parameter `id_conta` when calling `consultar_fatura_using_get1`")

        resource_path = '/api/faturas/{dataVencimento}'.replace('{format}', 'json')
        path_params = {}
        if 'data_vencimento' in params:
            path_params['dataVencimento'] = params['data_vencimento']

        query_params = {}
        if 'id_conta' in params:
            query_params['idConta'] = params['id_conta']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='FaturaDetalheResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def consultar_lancamentos_futuros_fatura_using_get1(self, id, data_vencimento_padrao, **kwargs):
        """
        Listar planos de parcelamento
        Lista os planos de parcelamento da fatura de uma conta.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.consultar_lancamentos_futuros_fatura_using_get1(id, data_vencimento_padrao, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: C\u00F3digo de identifica\u00E7\u00E3o da conta (id). (required)
        :param str data_vencimento_padrao: Indica a data de vencimento padr\u00E3o das faturas (required)
        :param list[str] sort: Tipo de ordena\u00E7\u00E3o dos registros.
        :param int page: P\u00E1gina solicitada (Default = 0)
        :param int limit: Limite de elementos por solicita\u00E7\u00E3o (Default = 50, Max = 50)
        :return: PagePlanoParcelamentoResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'data_vencimento_padrao', 'sort', 'page', 'limit']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method consultar_lancamentos_futuros_fatura_using_get1" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `consultar_lancamentos_futuros_fatura_using_get1`")
        # verify the required parameter 'data_vencimento_padrao' is set
        if ('data_vencimento_padrao' not in params) or (params['data_vencimento_padrao'] is None):
            raise ValueError("Missing the required parameter `data_vencimento_padrao` when calling `consultar_lancamentos_futuros_fatura_using_get1`")

        resource_path = '/api/contas/{id}/faturas/planos-parcelamento'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}
        if 'sort' in params:
            query_params['sort'] = params['sort']
        if 'page' in params:
            query_params['page'] = params['page']
        if 'limit' in params:
            query_params['limit'] = params['limit']
        if 'data_vencimento_padrao' in params:
            query_params['dataVencimentoPadrao'] = params['data_vencimento_padrao']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='PagePlanoParcelamentoResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def enviar_fatura_email_using_post(self, id, data_vencimento, **kwargs):
        """
        Envia 2\u00AA via de fatura por E-mail
        Envia a segunda via da fatura para o e-mail informado/cadastrado.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.enviar_fatura_email_using_post(id, data_vencimento, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: C\u00F3digo de identifica\u00E7\u00E3o da conta (id). (required)
        :param str data_vencimento: Data de Vencimento da fatura (yyyy-MM-dd). (required)
        :param str email: E-mail para envio da 2\u00AA via da fatura, caso n\u00E3o seja informado ser\u00E1 usado o e-mail cadastrado.
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'data_vencimento', 'email']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method enviar_fatura_email_using_post" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `enviar_fatura_email_using_post`")
        # verify the required parameter 'data_vencimento' is set
        if ('data_vencimento' not in params) or (params['data_vencimento'] is None):
            raise ValueError("Missing the required parameter `data_vencimento` when calling `enviar_fatura_email_using_post`")

        resource_path = '/api/contas/{id}/faturas/{dataVencimento}/enviar-email'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'data_vencimento' in params:
            path_params['dataVencimento'] = params['data_vencimento']

        query_params = {}
        if 'email' in params:
            query_params['email'] = params['email']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='object',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def listar_faturas_using_get1(self, id_conta, **kwargs):
        """
        Listar faturas de um cliente.
        Lista faturas de um cliente.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.listar_faturas_using_get1(id_conta, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id_conta: C\u00F3digo de identifica\u00E7\u00E3o da conta (id). (required)
        :param str situacao_processamento: Status do processamento das faturas. Valores possiveis [ABERTA, FECHADA, TODAS].
        :param list[str] sort: Tipo de ordena\u00E7\u00E3o dos registros.
        :param int page: P\u00E1gina solicitada (Default = 0)
        :param int limit: Limite de elementos por solicita\u00E7\u00E3o (Default = 50, Max = 50)
        :return: PageFaturaResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id_conta', 'situacao_processamento', 'sort', 'page', 'limit']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method listar_faturas_using_get1" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'id_conta' is set
        if ('id_conta' not in params) or (params['id_conta'] is None):
            raise ValueError("Missing the required parameter `id_conta` when calling `listar_faturas_using_get1`")

        resource_path = '/api/faturas'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'id_conta' in params:
            query_params['idConta'] = params['id_conta']
        if 'situacao_processamento' in params:
            query_params['situacaoProcessamento'] = params['situacao_processamento']
        if 'sort' in params:
            query_params['sort'] = params['sort']
        if 'page' in params:
            query_params['page'] = params['page']
        if 'limit' in params:
            query_params['limit'] = params['limit']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='PageFaturaResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def visualizar_documento_using_get(self, id, data_vencimento, **kwargs):
        """
        Permite visualizar o extrato da fatura em formato PDF
        Esta opera\u00E7\u00E3o permite visualizar o extrato da fatura de uma determinada conta, em formato PDF. Quando ela for a fatura ativa, ou seja, a do m\u00EAs corrente, o pdf ser\u00E1 composto pelo extrato de lan\u00E7amentos e pela ficha de compensa\u00E7\u00E3o banc\u00E1ria. Quando for de uma fatura do hist\u00F3rico do cliente, o PDF ser\u00E1 composto apenas pelo extrato de transa\u00E7\u00F5es.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.visualizar_documento_using_get(id, data_vencimento, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: C\u00F3digo de identifica\u00E7\u00E3o da conta (id). (required)
        :param str data_vencimento: Data de Vencimento da fatura. (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'data_vencimento']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method visualizar_documento_using_get" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `visualizar_documento_using_get`")
        # verify the required parameter 'data_vencimento' is set
        if ('data_vencimento' not in params) or (params['data_vencimento'] is None):
            raise ValueError("Missing the required parameter `data_vencimento` when calling `visualizar_documento_using_get`")

        resource_path = '/api/contas/{id}/faturas/{dataVencimento}/arquivo.pdf'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'data_vencimento' in params:
            path_params['dataVencimento'] = params['data_vencimento']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/pdf'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='object',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response
