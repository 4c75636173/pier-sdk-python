# coding: utf-8

"""
GlobaltagfaturamentoApi.py
Copyright 2016 SmartBear Software

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
"""

from __future__ import absolute_import

import sys
import os

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class GlobaltagfaturamentoApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def alterar_tipo_faturamento_using_put(self, id, tipo_faturamento_persist, **kwargs):
        """
        {{{faturamento_resource_alterar_tipo_faturamento}}}
        {{{faturamento_resource_alterar_tipo_faturamento_notes}}}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.alterar_tipo_faturamento_using_put(id, tipo_faturamento_persist, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: {{{faturamento_resource_alterar_tipo_faturamento_param_id_tipo_faturamento}}} (required)
        :param TipoFaturamentoPersistValue tipo_faturamento_persist: tipoFaturamentoPersist (required)
        :return: TipoFaturamentoResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'tipo_faturamento_persist']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method alterar_tipo_faturamento_using_put" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `alterar_tipo_faturamento_using_put`")
        # verify the required parameter 'tipo_faturamento_persist' is set
        if ('tipo_faturamento_persist' not in params) or (params['tipo_faturamento_persist'] is None):
            raise ValueError("Missing the required parameter `tipo_faturamento_persist` when calling `alterar_tipo_faturamento_using_put`")

        resource_path = '/api/tipos-faturamento/{id}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'tipo_faturamento_persist' in params:
            body_params = params['tipo_faturamento_persist']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='TipoFaturamentoResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def cadastrar_faturamento_por_conta_using_post(self, tipo_faturamento_por_conta_persist, **kwargs):
        """
        {{{faturamento_resource_cadastrar_faturamento_por_conta}}}
        {{{faturamento_resource_cadastrar_faturamento_por_conta_notes}}}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.cadastrar_faturamento_por_conta_using_post(tipo_faturamento_por_conta_persist, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param TipoFaturamentoPorContaPersistValue tipo_faturamento_por_conta_persist: tipoFaturamentoPorContaPersist (required)
        :return: TipoFaturamentoPorContaResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['tipo_faturamento_por_conta_persist']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cadastrar_faturamento_por_conta_using_post" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'tipo_faturamento_por_conta_persist' is set
        if ('tipo_faturamento_por_conta_persist' not in params) or (params['tipo_faturamento_por_conta_persist'] is None):
            raise ValueError("Missing the required parameter `tipo_faturamento_por_conta_persist` when calling `cadastrar_faturamento_por_conta_using_post`")

        resource_path = '/api/tipos-faturamento-conta'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'tipo_faturamento_por_conta_persist' in params:
            body_params = params['tipo_faturamento_por_conta_persist']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='TipoFaturamentoPorContaResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def cadastrar_tipo_faturamento_using_post(self, tipo_faturamento_persist, **kwargs):
        """
        {{{faturamento_resource_cadastrar_tipo_faturamento}}}
        {{{faturamento_resource_cadastrar_tipo_faturamento_notes}}}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.cadastrar_tipo_faturamento_using_post(tipo_faturamento_persist, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param TipoFaturamentoPersistValue tipo_faturamento_persist: tipoFaturamentoPersist (required)
        :return: TipoFaturamentoResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['tipo_faturamento_persist']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cadastrar_tipo_faturamento_using_post" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'tipo_faturamento_persist' is set
        if ('tipo_faturamento_persist' not in params) or (params['tipo_faturamento_persist'] is None):
            raise ValueError("Missing the required parameter `tipo_faturamento_persist` when calling `cadastrar_tipo_faturamento_using_post`")

        resource_path = '/api/tipos-faturamento'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'tipo_faturamento_persist' in params:
            body_params = params['tipo_faturamento_persist']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='TipoFaturamentoResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def consultar_tipo_faturamento_using_get(self, id, **kwargs):
        """
        {{{faturamento_resource_consultar_tipo_faturamento}}}
        {{{faturamento_resource_consultar_tipo_faturamento_notes}}}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.consultar_tipo_faturamento_using_get(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: {{{faturamento_resource_consultar_tipo_faturamento_param_id_tipo_faturamento}}} (required)
        :return: TipoFaturamentoResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method consultar_tipo_faturamento_using_get" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `consultar_tipo_faturamento_using_get`")

        resource_path = '/api/tipos-faturamento/{id}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='TipoFaturamentoResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def desativar_faturamento_por_conta_using_post(self, id, **kwargs):
        """
        {{{faturamento_resource_desativar_faturamento_por_conta}}}
        {{{faturamento_resource_desativar_faturamento_por_conta_notes}}}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.desativar_faturamento_por_conta_using_post(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: {{{faturamento_resource_desativar_faturamento_por_conta_param_id}}} (required)
        :return: TipoFaturamentoPorContaResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method desativar_faturamento_por_conta_using_post" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `desativar_faturamento_por_conta_using_post`")

        resource_path = '/api/tipos-faturamento-conta/{id}/desativar'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='TipoFaturamentoPorContaResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def desativar_tipo_faturamento_using_post(self, id, **kwargs):
        """
        {{{faturamento_resource_desativar_tipo_faturamento}}}
        {{{faturamento_resource_desativar_tipo_faturamento_notes}}}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.desativar_tipo_faturamento_using_post(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: {{{faturamento_resource_desativar_tipo_faturamento_param_id_tipo_faturamento}}} (required)
        :return: TipoFaturamentoResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method desativar_tipo_faturamento_using_post" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `desativar_tipo_faturamento_using_post`")

        resource_path = '/api/tipos-faturamento/{id}/desativar'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='TipoFaturamentoResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def listar_faturamento_por_conta_using_get(self, **kwargs):
        """
        {{{faturamento_resource_listar_faturamento_por_conta}}}
        {{{faturamento_resource_listar_faturamento_por_conta_notes}}}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.listar_faturamento_por_conta_using_get(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param list[str] sort: {{{global_menssagem_sort_sort}}}
        :param int page: {{{global_menssagem_sort_page_value}}}
        :param int limit: {{{global_menssagem_sort_limit}}}
        :param int id_tipo_faturamento_por_conta: {{{tipo_faturamento_por_conta_request_id_tipo_faturamento_por_conta_value}}}
        :param bool ativo: {{{tipo_faturamento_por_conta_request_status_value}}}
        :param int id_conta: {{{tipo_faturamento_por_conta_request_id_conta_value}}}
        :param int id_tipo_faturamento: {{{tipo_faturamento_por_conta_request_id_tipo_faturamento_value}}}
        :param str data_hora_inclusao: {{{tipo_faturamento_por_conta_request_data_hora_inclusao_value}}}
        :param str data_hora_cancelamento: {{{tipo_faturamento_por_conta_request_data_hora_cancelamento_value}}}
        :param str modificado_por: {{{tipo_faturamento_por_conta_request_modificado_por_value}}}
        :return: PageTipoFaturamentoPorContaResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sort', 'page', 'limit', 'id_tipo_faturamento_por_conta', 'ativo', 'id_conta', 'id_tipo_faturamento', 'data_hora_inclusao', 'data_hora_cancelamento', 'modificado_por']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method listar_faturamento_por_conta_using_get" % key
                )
            params[key] = val
        del params['kwargs']


        resource_path = '/api/tipos-faturamento-conta'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'sort' in params:
            query_params['sort'] = params['sort']
        if 'page' in params:
            query_params['page'] = params['page']
        if 'limit' in params:
            query_params['limit'] = params['limit']
        if 'id_tipo_faturamento_por_conta' in params:
            query_params['idTipoFaturamentoPorConta'] = params['id_tipo_faturamento_por_conta']
        if 'ativo' in params:
            query_params['ativo'] = params['ativo']
        if 'id_conta' in params:
            query_params['idConta'] = params['id_conta']
        if 'id_tipo_faturamento' in params:
            query_params['idTipoFaturamento'] = params['id_tipo_faturamento']
        if 'data_hora_inclusao' in params:
            query_params['dataHoraInclusao'] = params['data_hora_inclusao']
        if 'data_hora_cancelamento' in params:
            query_params['dataHoraCancelamento'] = params['data_hora_cancelamento']
        if 'modificado_por' in params:
            query_params['modificadoPor'] = params['modificado_por']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='PageTipoFaturamentoPorContaResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def listar_tipo_faturamento_using_get(self, **kwargs):
        """
        {{{faturamento_resource_listar_tipo_faturamento}}}
        {{{faturamento_resource_listar_tipo_faturamento_notes}}}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.listar_tipo_faturamento_using_get(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param list[str] sort: {{{global_menssagem_sort_sort}}}
        :param int page: {{{global_menssagem_sort_page_value}}}
        :param int limit: {{{global_menssagem_sort_limit}}}
        :param int id_tipo_faturamento: {{{tipo_faturamento_request_id_tipo_faturamento_value}}}
        :param str descricao: {{{tipo_faturamento_request_descricao_value}}}
        :param bool flag_apenas_demonstrativo: {{{tipo_faturamento_request_flag_apenas_demonstrativo_value}}}
        :param int id_convenio: {{{tipo_faturamento_request_id_convenio_value}}}
        :return: PageTipoFaturamentoResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sort', 'page', 'limit', 'id_tipo_faturamento', 'descricao', 'flag_apenas_demonstrativo', 'id_convenio']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method listar_tipo_faturamento_using_get" % key
                )
            params[key] = val
        del params['kwargs']


        resource_path = '/api/tipos-faturamento'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'sort' in params:
            query_params['sort'] = params['sort']
        if 'page' in params:
            query_params['page'] = params['page']
        if 'limit' in params:
            query_params['limit'] = params['limit']
        if 'id_tipo_faturamento' in params:
            query_params['idTipoFaturamento'] = params['id_tipo_faturamento']
        if 'descricao' in params:
            query_params['descricao'] = params['descricao']
        if 'flag_apenas_demonstrativo' in params:
            query_params['flagApenasDemonstrativo'] = params['flag_apenas_demonstrativo']
        if 'id_convenio' in params:
            query_params['idConvenio'] = params['id_convenio']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='PageTipoFaturamentoResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response
