# coding: utf-8

"""
GlobaltagestabelecimentoApi.py
Copyright 2016 SmartBear Software

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
"""

from __future__ import absolute_import

import sys
import os

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class GlobaltagestabelecimentoApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def alterar_origem_comercial_using_put(self, id, origem_comercial_update, **kwargs):
        """
        {{{origem_comercial_resource_alterar_origem_comercial}}}
        {{{origem_comercial_resource_alterar_origem_comercial_notes}}}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.alterar_origem_comercial_using_put(id, origem_comercial_update, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: {{{origem_comercial_resource_alterar_origem_comercial_param_id}}} (required)
        :param OrigemComercialUpdate origem_comercial_update: origemComercialUpdate (required)
        :return: OrigemComercialResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'origem_comercial_update']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method alterar_origem_comercial_using_put" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `alterar_origem_comercial_using_put`")
        # verify the required parameter 'origem_comercial_update' is set
        if ('origem_comercial_update' not in params) or (params['origem_comercial_update'] is None):
            raise ValueError("Missing the required parameter `origem_comercial_update` when calling `alterar_origem_comercial_using_put`")

        resource_path = '/api/origens-comerciais/{id}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'origem_comercial_update' in params:
            body_params = params['origem_comercial_update']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='OrigemComercialResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def alterar_using_put10(self, id, maquineta_update, **kwargs):
        """
        {{{maquineta_resource_alterar}}}
        {{{maquineta_resource_alterar_notes}}}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.alterar_using_put10(id, maquineta_update, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: {{{maquineta_resource_alterar_param_id}}} (required)
        :param MaquinetaUpdate maquineta_update: maquinetaUpdate (required)
        :return: MaquinetaResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'maquineta_update']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method alterar_using_put10" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `alterar_using_put10`")
        # verify the required parameter 'maquineta_update' is set
        if ('maquineta_update' not in params) or (params['maquineta_update'] is None):
            raise ValueError("Missing the required parameter `maquineta_update` when calling `alterar_using_put10`")

        resource_path = '/api/maquinetas/{id}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'maquineta_update' in params:
            body_params = params['maquineta_update']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='MaquinetaResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def alterar_using_put11(self, id, operacao_credor_update, **kwargs):
        """
        {{{operacao_credor_resource_alterar}}}
        {{{operacao_credor_resource_alterar_notes}}}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.alterar_using_put11(id, operacao_credor_update, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: {{{operacao_credor_resource_alterar_param_id}}} (required)
        :param OperacaoCredorUpdate operacao_credor_update: operacaoCredorUpdate (required)
        :return: OperacaoCredorResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'operacao_credor_update']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method alterar_using_put11" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `alterar_using_put11`")
        # verify the required parameter 'operacao_credor_update' is set
        if ('operacao_credor_update' not in params) or (params['operacao_credor_update'] is None):
            raise ValueError("Missing the required parameter `operacao_credor_update` when calling `alterar_using_put11`")

        resource_path = '/api/regras-operacoes-estabelecimentos/{id}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'operacao_credor_update' in params:
            body_params = params['operacao_credor_update']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='OperacaoCredorResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def alterar_using_put17(self, id, telefone_estabelecimento_update, **kwargs):
        """
        {{{telefone_estabelecimento_resource_alterar}}}
        {{{telefone_estabelecimento_resource_alterar_notes}}}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.alterar_using_put17(id, telefone_estabelecimento_update, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: {{{telefone_estabelecimento_resource_alterar_param_id}}} (required)
        :param TelefoneEstabelecimentoUpdate telefone_estabelecimento_update: telefoneEstabelecimentoUpdate (required)
        :return: TelefoneEstabelecimentoResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'telefone_estabelecimento_update']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method alterar_using_put17" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `alterar_using_put17`")
        # verify the required parameter 'telefone_estabelecimento_update' is set
        if ('telefone_estabelecimento_update' not in params) or (params['telefone_estabelecimento_update'] is None):
            raise ValueError("Missing the required parameter `telefone_estabelecimento_update` when calling `alterar_using_put17`")

        resource_path = '/api/telefones-estabelecimentos/{id}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'telefone_estabelecimento_update' in params:
            body_params = params['telefone_estabelecimento_update']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='TelefoneEstabelecimentoResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def alterar_using_put19(self, id, terminal_update, **kwargs):
        """
        {{{terminal_resource_alterar}}}
        {{{terminal_resource_alterar_notes}}}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.alterar_using_put19(id, terminal_update, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: {{{terminal_resource_alterar_param_id}}} (required)
        :param TerminalUpdateValue terminal_update: terminalUpdate (required)
        :return: TerminalResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'terminal_update']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method alterar_using_put19" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `alterar_using_put19`")
        # verify the required parameter 'terminal_update' is set
        if ('terminal_update' not in params) or (params['terminal_update'] is None):
            raise ValueError("Missing the required parameter `terminal_update` when calling `alterar_using_put19`")

        resource_path = '/api/terminais/{id}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'terminal_update' in params:
            body_params = params['terminal_update']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='TerminalResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def alterar_using_put6(self, id, update, **kwargs):
        """
        {{{estabelecimento_resource_alterar}}}
        {{{estabelecimento_resource_alterar_notes}}}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.alterar_using_put6(id, update, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: {{{estabelecimento_resource_alterar_param_id_estabelecimento}}} (required)
        :param EstabelecimentoUpdate update: update (required)
        :return: EstabelecimentoResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'update']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method alterar_using_put6" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `alterar_using_put6`")
        # verify the required parameter 'update' is set
        if ('update' not in params) or (params['update'] is None):
            raise ValueError("Missing the required parameter `update` when calling `alterar_using_put6`")

        resource_path = '/api/estabelecimentos/{id}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'update' in params:
            body_params = params['update']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='EstabelecimentoResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def alterar_using_put8(self, id, grupo_economico_dto, **kwargs):
        """
        {{{grupo_economico_resource_alterar}}}
        {{{grupo_economico_resource_alterar_notes}}}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.alterar_using_put8(id, grupo_economico_dto, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: {{{grupo_economico_resource_alterar_param_id}}} (required)
        :param GrupoEconomicoDTO grupo_economico_dto: grupoEconomicoDTO (required)
        :return: GrupoEconomicoResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'grupo_economico_dto']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method alterar_using_put8" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `alterar_using_put8`")
        # verify the required parameter 'grupo_economico_dto' is set
        if ('grupo_economico_dto' not in params) or (params['grupo_economico_dto'] is None):
            raise ValueError("Missing the required parameter `grupo_economico_dto` when calling `alterar_using_put8`")

        resource_path = '/api/grupos-economicos/{id}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'grupo_economico_dto' in params:
            body_params = params['grupo_economico_dto']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='GrupoEconomicoResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def cadastrar_origem_comercial_using_post(self, origem_comercial_persist, **kwargs):
        """
        {{{origem_comercial_resource_cadastrar_origem_comercial}}}
        {{{origem_comercial_resource_cadastrar_origem_comercial_notes}}}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.cadastrar_origem_comercial_using_post(origem_comercial_persist, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param OrigemComercialPersist origem_comercial_persist: origemComercialPersist (required)
        :return: OrigemComercialResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['origem_comercial_persist']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cadastrar_origem_comercial_using_post" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'origem_comercial_persist' is set
        if ('origem_comercial_persist' not in params) or (params['origem_comercial_persist'] is None):
            raise ValueError("Missing the required parameter `origem_comercial_persist` when calling `cadastrar_origem_comercial_using_post`")

        resource_path = '/api/origens-comerciais'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'origem_comercial_persist' in params:
            body_params = params['origem_comercial_persist']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='OrigemComercialResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def cadastrar_using_post3(self, persist, **kwargs):
        """
        {{{estabelecimento_resource_cadastrar}}}
        {{{estabelecimento_resource_cadastrar_notes}}}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.cadastrar_using_post3(persist, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EstabelecimentoPersist persist: persist (required)
        :return: EstabelecimentoResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['persist']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cadastrar_using_post3" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'persist' is set
        if ('persist' not in params) or (params['persist'] is None):
            raise ValueError("Missing the required parameter `persist` when calling `cadastrar_using_post3`")

        resource_path = '/api/estabelecimentos'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'persist' in params:
            body_params = params['persist']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='EstabelecimentoResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def cadastrar_using_post4(self, grupo_economico_dto, **kwargs):
        """
        {{{grupo_economico_resource_cadastrar}}}
        {{{grupo_economico_resource_cadastrar_notes}}}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.cadastrar_using_post4(grupo_economico_dto, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param GrupoEconomicoDTO grupo_economico_dto: GrupoEconomicoDTO (required)
        :return: GrupoEconomicoResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['grupo_economico_dto']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cadastrar_using_post4" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'grupo_economico_dto' is set
        if ('grupo_economico_dto' not in params) or (params['grupo_economico_dto'] is None):
            raise ValueError("Missing the required parameter `grupo_economico_dto` when calling `cadastrar_using_post4`")

        resource_path = '/api/grupos-economicos'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'grupo_economico_dto' in params:
            body_params = params['grupo_economico_dto']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='GrupoEconomicoResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def consulta_operacao_using_get(self, id, **kwargs):
        """
        {{{operacao_resource_consulta_operacao}}}
        {{{operacao_resource_consulta_operacao_notes}}}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.consulta_operacao_using_get(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: {{{operacao_resource_consulta_operacao_param_id_operacao}}} (required)
        :return: DetalheOperacaoResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method consulta_operacao_using_get" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `consulta_operacao_using_get`")

        resource_path = '/api/tipos-operacoes-estabelecimentos/{id}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='DetalheOperacaoResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def consultar_origem_comercial_using_get(self, id, **kwargs):
        """
        {{{origem_comercial_resource_consultar_origem_comercial}}}
        {{{origem_comercial_resource_consultar_origem_comercial_notes}}}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.consultar_origem_comercial_using_get(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: {{{origem_comercial_resource_consultar_origem_comercial_param_id}}} (required)
        :return: OrigemComercialResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method consultar_origem_comercial_using_get" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `consultar_origem_comercial_using_get`")

        resource_path = '/api/origens-comerciais/{id}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='OrigemComercialResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def consultar_using_get20(self, id, **kwargs):
        """
        {{{estabelecimento_resource_consultar}}}
        {{{estabelecimento_resource_consultar_notes}}}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.consultar_using_get20(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: {{{estabelecimento_resource_consultar_param_id_estabelecimento}}} (required)
        :return: EstabelecimentoResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method consultar_using_get20" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `consultar_using_get20`")

        resource_path = '/api/estabelecimentos/{id}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='EstabelecimentoResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def consultar_using_get22(self, id, **kwargs):
        """
        {{{grupo_economico_resource_consultar}}}
        {{{grupo_economico_resource_consultar_notes}}}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.consultar_using_get22(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: {{{grupo_economico_resource_consultar_param_id}}} (required)
        :return: GrupoEconomicoResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method consultar_using_get22" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `consultar_using_get22`")

        resource_path = '/api/grupos-economicos/{id}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='GrupoEconomicoResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def consultar_using_get24(self, id, **kwargs):
        """
        {{{maquineta_resource_consultar}}}
        {{{maquineta_resource_consultar_notes}}}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.consultar_using_get24(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: {{{maquineta_resource_consultar_param_id}}} (required)
        :return: MaquinetaResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method consultar_using_get24" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `consultar_using_get24`")

        resource_path = '/api/maquinetas/{id}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='MaquinetaResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def consultar_using_get25(self, id, **kwargs):
        """
        {{{operacao_credor_resource_consultar}}}
        {{{operacao_credor_resource_consultar_notes}}}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.consultar_using_get25(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: {{{operacao_credor_resource_consultar_param_id}}} (required)
        :return: OperacaoCredorResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method consultar_using_get25" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `consultar_using_get25`")

        resource_path = '/api/regras-operacoes-estabelecimentos/{id}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='OperacaoCredorResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def consultar_using_get38(self, id, **kwargs):
        """
        {{{telefone_estabelecimento_resource_consultar}}}
        {{{telefone_estabelecimento_resource_consultar_notes}}}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.consultar_using_get38(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: {{{telefone_estabelecimento_resource_consultar_param_id}}} (required)
        :return: TelefoneEstabelecimentoResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method consultar_using_get38" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `consultar_using_get38`")

        resource_path = '/api/telefones-estabelecimentos/{id}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='TelefoneEstabelecimentoResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def consultar_using_get40(self, id, **kwargs):
        """
        {{{terminal_resource_consultar}}}
        {{{terminal_resource_consultar_notes}}}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.consultar_using_get40(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: {{{terminal_resource_consultar_param_id}}} (required)
        :return: TerminalResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method consultar_using_get40" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `consultar_using_get40`")

        resource_path = '/api/terminais/{id}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='TerminalResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def consultar_using_get52(self, id, **kwargs):
        """
        {{{vinculo_estabelecimento_adquirente_resource_consultar}}}
        {{{vinculo_estabelecimento_adquirente_resource_consultar_notes}}}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.consultar_using_get52(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: {{{vinculo_estabelecimento_adquirente_resource_consultar_param_id}}} (required)
        :return: VinculoEstabelecimentoAdquirenteResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method consultar_using_get52" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `consultar_using_get52`")

        resource_path = '/api/adquirentes-estabelecimento/{id}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='VinculoEstabelecimentoAdquirenteResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def desabilitar_vinculo_using_post(self, id, **kwargs):
        """
        {{{vinculo_estabelecimento_adquirente_resource_desabilitar_vinculo}}}
        {{{vinculo_estabelecimento_adquirente_resource_desabilitar_vinculo_notes}}}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.desabilitar_vinculo_using_post(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: {{{vinculo_estabelecimento_adquirente_resource_desabilitar_vinculo_param_id}}} (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method desabilitar_vinculo_using_post" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `desabilitar_vinculo_using_post`")

        resource_path = '/api/adquirentes-estabelecimento/{id}/desabilitar'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='object',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def desabilitar_vinculo_using_post1(self, id, vinculo_operacao_persist, **kwargs):
        """
        {{{vinculo_operacao_resource_desabilitar_vinculo}}}
        {{{vinculo_operacao_resource_desabilitar_vinculo_notes}}}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.desabilitar_vinculo_using_post1(id, vinculo_operacao_persist, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: {{{vinculo_operacao_resource_desabilitar_vinculo_param_id}}} (required)
        :param VinculoOperacaoPersist vinculo_operacao_persist: vinculoOperacaoPersist (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'vinculo_operacao_persist']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method desabilitar_vinculo_using_post1" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `desabilitar_vinculo_using_post1`")
        # verify the required parameter 'vinculo_operacao_persist' is set
        if ('vinculo_operacao_persist' not in params) or (params['vinculo_operacao_persist'] is None):
            raise ValueError("Missing the required parameter `vinculo_operacao_persist` when calling `desabilitar_vinculo_using_post1`")

        resource_path = '/api/estabelecimentos/{id}/desabilitar-operacao'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'vinculo_operacao_persist' in params:
            body_params = params['vinculo_operacao_persist']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='object',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def habilitar_vinculo_using_post(self, id, **kwargs):
        """
        {{{vinculo_estabelecimento_adquirente_resource_habilitar_vinculo}}}
        {{{vinculo_estabelecimento_adquirente_resource_habilitar_vinculo_notes}}}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.habilitar_vinculo_using_post(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: {{{vinculo_estabelecimento_adquirente_resource_habilitar_vinculo_param_id}}} (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method habilitar_vinculo_using_post" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `habilitar_vinculo_using_post`")

        resource_path = '/api/adquirentes-estabelecimento/{id}/habilitar'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='object',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def habilitar_vinculo_using_post1(self, id, vinculo_operacao_persist, **kwargs):
        """
        {{{vinculo_operacao_resource_habilitar_vinculo}}}
        {{{vinculo_operacao_resource_habilitar_vinculo_notes}}}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.habilitar_vinculo_using_post1(id, vinculo_operacao_persist, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: {{{vinculo_operacao_resource_habilitar_vinculo_param_id}}} (required)
        :param VinculoOperacaoPersist vinculo_operacao_persist: vinculoOperacaoPersist (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'vinculo_operacao_persist']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method habilitar_vinculo_using_post1" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `habilitar_vinculo_using_post1`")
        # verify the required parameter 'vinculo_operacao_persist' is set
        if ('vinculo_operacao_persist' not in params) or (params['vinculo_operacao_persist'] is None):
            raise ValueError("Missing the required parameter `vinculo_operacao_persist` when calling `habilitar_vinculo_using_post1`")

        resource_path = '/api/estabelecimentos/{id}/habilitar-operacao'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'vinculo_operacao_persist' in params:
            body_params = params['vinculo_operacao_persist']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='object',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def lista_operacao_using_get(self, **kwargs):
        """
        {{{operacao_resource_lista_operacao}}}
        {{{operacao_resource_lista_operacao_notes}}}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.lista_operacao_using_get(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param list[str] sort: {{{global_menssagem_sort_sort}}}
        :param int page: {{{global_menssagem_sort_page_value}}}
        :param int limit: {{{global_menssagem_sort_limit}}}
        :param int id_operacao: {{{operacao_request_id_operacao_value}}}
        :param str codigo_processamento: {{{operacao_request_codigo_processamento_value}}}
        :return: PageOperacaoResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sort', 'page', 'limit', 'id_operacao', 'codigo_processamento']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method lista_operacao_using_get" % key
                )
            params[key] = val
        del params['kwargs']


        resource_path = '/api/tipos-operacoes-estabelecimentos'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'sort' in params:
            query_params['sort'] = params['sort']
        if 'page' in params:
            query_params['page'] = params['page']
        if 'limit' in params:
            query_params['limit'] = params['limit']
        if 'id_operacao' in params:
            query_params['idOperacao'] = params['id_operacao']
        if 'codigo_processamento' in params:
            query_params['codigoProcessamento'] = params['codigo_processamento']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='PageOperacaoResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def listar_mcc_using_get(self, **kwargs):
        """
        {{{m_c_c_resource_listar_m_c_c}}}
        {{{m_c_c_resource_listar_m_c_c_notes}}}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.listar_mcc_using_get(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param list[str] sort: {{{global_menssagem_sort_sort}}}
        :param int page: {{{global_menssagem_sort_page_value}}}
        :param int limit: {{{global_menssagem_sort_limit}}}
        :return: PageMCCResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sort', 'page', 'limit']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method listar_mcc_using_get" % key
                )
            params[key] = val
        del params['kwargs']


        resource_path = '/api/mcc-estabelecimentos'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'sort' in params:
            query_params['sort'] = params['sort']
        if 'page' in params:
            query_params['page'] = params['page']
        if 'limit' in params:
            query_params['limit'] = params['limit']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='PageMCCResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def listar_origens_comerciais_using_get(self, **kwargs):
        """
        {{{origem_comercial_resource_listar_origens_comerciais}}}
        {{{origem_comercial_resource_listar_origens_comerciais_notes}}}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.listar_origens_comerciais_using_get(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param list[str] sort: {{{global_menssagem_sort_sort}}}
        :param int page: {{{global_menssagem_sort_page_value}}}
        :param int limit: {{{global_menssagem_sort_limit}}}
        :param int id: {{{origem_comercial_request_id_value}}}
        :param str nome: {{{origem_comercial_request_nome_value}}}
        :param int status: {{{origem_comercial_request_status_value}}}
        :param int id_estabelecimento: {{{origem_comercial_request_id_estabelecimento_value}}}
        :param int id_produto: {{{origem_comercial_request_id_produto_value}}}
        :param str descricao: {{{origem_comercial_request_descricao_value}}}
        :param int id_tipo_origem_comercial: {{{origem_comercial_request_id_tipo_origem_comercial_value}}}
        :param int id_grupo_origem_comercial: {{{origem_comercial_request_id_grupo_origem_comercial_value}}}
        :param bool flag_pre_aprovado: {{{origem_comercial_request_flag_pre_aprovado_value}}}
        :param bool flag_aprovacao_imediata: {{{origem_comercial_request_flag_aprovacao_imediata_value}}}
        :param str nome_fantasia_plastico: {{{origem_comercial_request_nome_fantasia_plastico_value}}}
        :param bool flag_cartao_provisorio: {{{origem_comercial_request_flag_cartao_provisorio_value}}}
        :param bool flag_cartao_definitivo: {{{origem_comercial_request_flag_cartao_definitivo_value}}}
        :param str usuario: {{{origem_comercial_request_usuario_value}}}
        :param str senha: {{{origem_comercial_request_senha_value}}}
        :param bool flag_origem_externa: {{{origem_comercial_request_flag_origem_externa_value}}}
        :param bool flag_modificado: {{{origem_comercial_request_flag_modificado_value}}}
        :param bool flag_envia_fatura_usuario: {{{origem_comercial_request_flag_envia_fatura_usuario_value}}}
        :param bool flag_credito_faturamento: {{{origem_comercial_request_flag_credito_faturamento_value}}}
        :param bool flag_concede_limite_provisorio: {{{origem_comercial_request_flag_concede_limite_provisorio_value}}}
        :param bool flag_digitalizar_doc: {{{origem_comercial_request_flag_digitalizar_doc_value}}}
        :param bool flag_embossing_loja: {{{origem_comercial_request_flag_embossing_loja_value}}}
        :param bool flag_consulta_previa: {{{origem_comercial_request_flag_consulta_previa_value}}}
        :param str tipo_pessoa: {{{origem_comercial_request_tipo_pessoa_value}}}
        :return: PageOrigemComercialResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sort', 'page', 'limit', 'id', 'nome', 'status', 'id_estabelecimento', 'id_produto', 'descricao', 'id_tipo_origem_comercial', 'id_grupo_origem_comercial', 'flag_pre_aprovado', 'flag_aprovacao_imediata', 'nome_fantasia_plastico', 'flag_cartao_provisorio', 'flag_cartao_definitivo', 'usuario', 'senha', 'flag_origem_externa', 'flag_modificado', 'flag_envia_fatura_usuario', 'flag_credito_faturamento', 'flag_concede_limite_provisorio', 'flag_digitalizar_doc', 'flag_embossing_loja', 'flag_consulta_previa', 'tipo_pessoa']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method listar_origens_comerciais_using_get" % key
                )
            params[key] = val
        del params['kwargs']


        resource_path = '/api/origens-comerciais'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'sort' in params:
            query_params['sort'] = params['sort']
        if 'page' in params:
            query_params['page'] = params['page']
        if 'limit' in params:
            query_params['limit'] = params['limit']
        if 'id' in params:
            query_params['id'] = params['id']
        if 'nome' in params:
            query_params['nome'] = params['nome']
        if 'status' in params:
            query_params['status'] = params['status']
        if 'id_estabelecimento' in params:
            query_params['idEstabelecimento'] = params['id_estabelecimento']
        if 'id_produto' in params:
            query_params['idProduto'] = params['id_produto']
        if 'descricao' in params:
            query_params['descricao'] = params['descricao']
        if 'id_tipo_origem_comercial' in params:
            query_params['idTipoOrigemComercial'] = params['id_tipo_origem_comercial']
        if 'id_grupo_origem_comercial' in params:
            query_params['idGrupoOrigemComercial'] = params['id_grupo_origem_comercial']
        if 'flag_pre_aprovado' in params:
            query_params['flagPreAprovado'] = params['flag_pre_aprovado']
        if 'flag_aprovacao_imediata' in params:
            query_params['flagAprovacaoImediata'] = params['flag_aprovacao_imediata']
        if 'nome_fantasia_plastico' in params:
            query_params['nomeFantasiaPlastico'] = params['nome_fantasia_plastico']
        if 'flag_cartao_provisorio' in params:
            query_params['flagCartaoProvisorio'] = params['flag_cartao_provisorio']
        if 'flag_cartao_definitivo' in params:
            query_params['flagCartaoDefinitivo'] = params['flag_cartao_definitivo']
        if 'usuario' in params:
            query_params['usuario'] = params['usuario']
        if 'senha' in params:
            query_params['senha'] = params['senha']
        if 'flag_origem_externa' in params:
            query_params['flagOrigemExterna'] = params['flag_origem_externa']
        if 'flag_modificado' in params:
            query_params['flagModificado'] = params['flag_modificado']
        if 'flag_envia_fatura_usuario' in params:
            query_params['flagEnviaFaturaUsuario'] = params['flag_envia_fatura_usuario']
        if 'flag_credito_faturamento' in params:
            query_params['flagCreditoFaturamento'] = params['flag_credito_faturamento']
        if 'flag_concede_limite_provisorio' in params:
            query_params['flagConcedeLimiteProvisorio'] = params['flag_concede_limite_provisorio']
        if 'flag_digitalizar_doc' in params:
            query_params['flagDigitalizarDoc'] = params['flag_digitalizar_doc']
        if 'flag_embossing_loja' in params:
            query_params['flagEmbossingLoja'] = params['flag_embossing_loja']
        if 'flag_consulta_previa' in params:
            query_params['flagConsultaPrevia'] = params['flag_consulta_previa']
        if 'tipo_pessoa' in params:
            query_params['tipoPessoa'] = params['tipo_pessoa']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='PageOrigemComercialResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def listar_tipos_adquirentes_using_get(self, **kwargs):
        """
        {{{vinculo_estabelecimento_adquirente_resource_listar_tipos_adquirentes}}}
        {{{vinculo_estabelecimento_adquirente_resource_listar_tipos_adquirentes_notes}}}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.listar_tipos_adquirentes_using_get(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param list[str] sort: {{{global_menssagem_sort_sort}}}
        :param int page: {{{global_menssagem_sort_page_value}}}
        :param int limit: {{{global_menssagem_sort_limit}}}
        :return: PageEntidadeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sort', 'page', 'limit']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method listar_tipos_adquirentes_using_get" % key
                )
            params[key] = val
        del params['kwargs']


        resource_path = '/api/tipos-adquirentes'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'sort' in params:
            query_params['sort'] = params['sort']
        if 'page' in params:
            query_params['page'] = params['page']
        if 'limit' in params:
            query_params['limit'] = params['limit']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='PageEntidadeResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def listar_tipos_estabelecimentos_using_get(self, **kwargs):
        """
        {{{tipo_estabelecimento_resource_listar_tipos_estabelecimentos}}}
        {{{tipo_estabelecimento_resource_listar_tipos_estabelecimentos_notes}}}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.listar_tipos_estabelecimentos_using_get(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param list[str] sort: {{{global_menssagem_sort_sort}}}
        :param int page: {{{global_menssagem_sort_page_value}}}
        :param int limit: {{{global_menssagem_sort_limit}}}
        :param str descricao: {{{tipo_estabelecimento_request_descricao_value}}}
        :return: PageTipoEstabelecimentoResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sort', 'page', 'limit', 'descricao']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method listar_tipos_estabelecimentos_using_get" % key
                )
            params[key] = val
        del params['kwargs']


        resource_path = '/api/tipos-estabelecimentos'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'sort' in params:
            query_params['sort'] = params['sort']
        if 'page' in params:
            query_params['page'] = params['page']
        if 'limit' in params:
            query_params['limit'] = params['limit']
        if 'descricao' in params:
            query_params['descricao'] = params['descricao']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='PageTipoEstabelecimentoResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def listar_tipos_maquinetas_using_get(self, **kwargs):
        """
        {{{maquineta_resource_listar_tipos_maquinetas}}}
        {{{maquineta_resource_listar_tipos_maquinetas_notes}}}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.listar_tipos_maquinetas_using_get(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param list[str] sort: {{{global_menssagem_sort_sort}}}
        :param int page: {{{global_menssagem_sort_page_value}}}
        :param int limit: {{{global_menssagem_sort_limit}}}
        :return: PageCampoCodificadoDescricaoResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sort', 'page', 'limit']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method listar_tipos_maquinetas_using_get" % key
                )
            params[key] = val
        del params['kwargs']


        resource_path = '/api/tipos-maquinetas'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'sort' in params:
            query_params['sort'] = params['sort']
        if 'page' in params:
            query_params['page'] = params['page']
        if 'limit' in params:
            query_params['limit'] = params['limit']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='PageCampoCodificadoDescricaoResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def listar_tipos_origens_comerciais_using_get(self, **kwargs):
        """
        {{{tipo_origem_comercial_resource_listar_tipos_origens_comerciais}}}
        {{{tipo_origem_comercial_resource_listar_tipos_origens_comerciais_notes}}}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.listar_tipos_origens_comerciais_using_get(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param list[str] sort: {{{global_menssagem_sort_sort}}}
        :param int page: {{{global_menssagem_sort_page_value}}}
        :param int limit: {{{global_menssagem_sort_limit}}}
        :param str nome: {{{tipo_origem_comercial_request_nome_value}}}
        :return: PageTipoOrigemComercialResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sort', 'page', 'limit', 'nome']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method listar_tipos_origens_comerciais_using_get" % key
                )
            params[key] = val
        del params['kwargs']


        resource_path = '/api/tipos-origens-comerciais'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'sort' in params:
            query_params['sort'] = params['sort']
        if 'page' in params:
            query_params['page'] = params['page']
        if 'limit' in params:
            query_params['limit'] = params['limit']
        if 'nome' in params:
            query_params['nome'] = params['nome']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='PageTipoOrigemComercialResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def listar_tipos_terminais_using_get1(self, **kwargs):
        """
        {{{terminal_resource_listar_tipos_terminais}}}
        {{{terminal_resource_listar_tipos_terminais_notes}}}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.listar_tipos_terminais_using_get1(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param list[str] sort: {{{global_menssagem_sort_sort}}}
        :param int page: {{{global_menssagem_sort_page_value}}}
        :param int limit: {{{global_menssagem_sort_limit}}}
        :return: PageTipoTerminalResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sort', 'page', 'limit']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method listar_tipos_terminais_using_get1" % key
                )
            params[key] = val
        del params['kwargs']


        resource_path = '/api/tipos-terminais-estabelecimento'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'sort' in params:
            query_params['sort'] = params['sort']
        if 'page' in params:
            query_params['page'] = params['page']
        if 'limit' in params:
            query_params['limit'] = params['limit']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='PageTipoTerminalResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def listar_using_get25(self, **kwargs):
        """
        {{{estabelecimento_resource_listar}}}
        {{{estabelecimento_resource_listar_notes}}}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.listar_using_get25(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param list[str] sort: {{{global_menssagem_sort_sort}}}
        :param int page: {{{global_menssagem_sort_page_value}}}
        :param int limit: {{{global_menssagem_sort_limit}}}
        :param int id: {{{estabelecimento_request_id_value}}}
        :param int id_grupo_economico: {{{estabelecimento_request_id_grupo_economico_value}}}
        :param str numero_receita_federal: {{{estabelecimento_request_numero_receita_federal_value}}}
        :param str nome: {{{estabelecimento_request_nome_value}}}
        :param str descricao: {{{estabelecimento_request_descricao_value}}}
        :param str nome_fantasia: {{{estabelecimento_request_nome_fantasia_value}}}
        :param str cep: {{{estabelecimento_request_cep_value}}}
        :param str nome_logradouro: {{{estabelecimento_request_nome_logradouro_value}}}
        :param int numero_endereco: {{{estabelecimento_request_numero_endereco_value}}}
        :param str complemento: {{{estabelecimento_request_complemento_value}}}
        :param str bairro: {{{estabelecimento_request_bairro_value}}}
        :param str cidade: {{{estabelecimento_request_cidade_value}}}
        :param str uf: {{{estabelecimento_request_uf_value}}}
        :param str pais: {{{estabelecimento_request_pais_value}}}
        :param str data_cadastramento: {{{estabelecimento_request_data_cadastramento_value}}}
        :param str contato: {{{estabelecimento_request_contato_value}}}
        :param str email: {{{estabelecimento_request_email_value}}}
        :param int flag_arquivo_secr_fazenda: {{{estabelecimento_request_flag_arquivo_secr_fazenda_value}}}
        :param int flag_cartao_digitado: {{{estabelecimento_request_flag_cartao_digitado_value}}}
        :param int inativo: {{{estabelecimento_request_inativo_value}}}
        :param int id_pais: {{{estabelecimento_request_id_pais_value}}}
        :param int mcc: {{{estabelecimento_request_mcc_value}}}
        :param int id_tipo_estabelecimento: {{{estabelecimento_request_id_tipo_estabelecimento_value}}}
        :param int correspondencia: {{{estabelecimento_request_correspondencia_value}}}
        :param int id_moeda: {{{estabelecimento_request_id_moeda_value}}}
        :param str tipo_pagamento: {{{estabelecimento_request_tipo_pagamento_value}}}
        :param str numero_estabelecimento: {{{estabelecimento_request_numero_estabelecimento_value}}}
        :param str cep2: {{{estabelecimento_request_cep2_value}}}
        :param str nome_logradouro2: {{{estabelecimento_request_nome_logradouro2_value}}}
        :param int numero_endereco2: {{{estabelecimento_request_numero_endereco2_value}}}
        :param str complemento2: {{{estabelecimento_request_complemento2_value}}}
        :param str bairro2: {{{estabelecimento_request_bairro2_value}}}
        :param str cidade2: {{{estabelecimento_request_cidade2_value}}}
        :param str uf2: {{{estabelecimento_request_uf2_value}}}
        :param int flag_matriz: {{{estabelecimento_request_flag_matriz_value}}}
        :return: PageEstabelecimentoResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sort', 'page', 'limit', 'id', 'id_grupo_economico', 'numero_receita_federal', 'nome', 'descricao', 'nome_fantasia', 'cep', 'nome_logradouro', 'numero_endereco', 'complemento', 'bairro', 'cidade', 'uf', 'pais', 'data_cadastramento', 'contato', 'email', 'flag_arquivo_secr_fazenda', 'flag_cartao_digitado', 'inativo', 'id_pais', 'mcc', 'id_tipo_estabelecimento', 'correspondencia', 'id_moeda', 'tipo_pagamento', 'numero_estabelecimento', 'cep2', 'nome_logradouro2', 'numero_endereco2', 'complemento2', 'bairro2', 'cidade2', 'uf2', 'flag_matriz']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method listar_using_get25" % key
                )
            params[key] = val
        del params['kwargs']


        resource_path = '/api/estabelecimentos'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'sort' in params:
            query_params['sort'] = params['sort']
        if 'page' in params:
            query_params['page'] = params['page']
        if 'limit' in params:
            query_params['limit'] = params['limit']
        if 'id' in params:
            query_params['id'] = params['id']
        if 'id_grupo_economico' in params:
            query_params['idGrupoEconomico'] = params['id_grupo_economico']
        if 'numero_receita_federal' in params:
            query_params['numeroReceitaFederal'] = params['numero_receita_federal']
        if 'nome' in params:
            query_params['nome'] = params['nome']
        if 'descricao' in params:
            query_params['descricao'] = params['descricao']
        if 'nome_fantasia' in params:
            query_params['nomeFantasia'] = params['nome_fantasia']
        if 'cep' in params:
            query_params['cep'] = params['cep']
        if 'nome_logradouro' in params:
            query_params['nomeLogradouro'] = params['nome_logradouro']
        if 'numero_endereco' in params:
            query_params['numeroEndereco'] = params['numero_endereco']
        if 'complemento' in params:
            query_params['complemento'] = params['complemento']
        if 'bairro' in params:
            query_params['bairro'] = params['bairro']
        if 'cidade' in params:
            query_params['cidade'] = params['cidade']
        if 'uf' in params:
            query_params['uf'] = params['uf']
        if 'pais' in params:
            query_params['pais'] = params['pais']
        if 'data_cadastramento' in params:
            query_params['dataCadastramento'] = params['data_cadastramento']
        if 'contato' in params:
            query_params['contato'] = params['contato']
        if 'email' in params:
            query_params['email'] = params['email']
        if 'flag_arquivo_secr_fazenda' in params:
            query_params['flagArquivoSecrFazenda'] = params['flag_arquivo_secr_fazenda']
        if 'flag_cartao_digitado' in params:
            query_params['flagCartaoDigitado'] = params['flag_cartao_digitado']
        if 'inativo' in params:
            query_params['inativo'] = params['inativo']
        if 'id_pais' in params:
            query_params['idPais'] = params['id_pais']
        if 'mcc' in params:
            query_params['mcc'] = params['mcc']
        if 'id_tipo_estabelecimento' in params:
            query_params['idTipoEstabelecimento'] = params['id_tipo_estabelecimento']
        if 'correspondencia' in params:
            query_params['correspondencia'] = params['correspondencia']
        if 'id_moeda' in params:
            query_params['idMoeda'] = params['id_moeda']
        if 'tipo_pagamento' in params:
            query_params['tipoPagamento'] = params['tipo_pagamento']
        if 'numero_estabelecimento' in params:
            query_params['numeroEstabelecimento'] = params['numero_estabelecimento']
        if 'cep2' in params:
            query_params['cep2'] = params['cep2']
        if 'nome_logradouro2' in params:
            query_params['nomeLogradouro2'] = params['nome_logradouro2']
        if 'numero_endereco2' in params:
            query_params['numeroEndereco2'] = params['numero_endereco2']
        if 'complemento2' in params:
            query_params['complemento2'] = params['complemento2']
        if 'bairro2' in params:
            query_params['bairro2'] = params['bairro2']
        if 'cidade2' in params:
            query_params['cidade2'] = params['cidade2']
        if 'uf2' in params:
            query_params['uf2'] = params['uf2']
        if 'flag_matriz' in params:
            query_params['flagMatriz'] = params['flag_matriz']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='PageEstabelecimentoResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def listar_using_get28(self, **kwargs):
        """
        {{{grupo_economico_resource_listar}}}
        {{{grupo_economico_resource_listar_notes}}}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.listar_using_get28(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param list[str] sort: {{{global_menssagem_sort_sort}}}
        :param int page: {{{global_menssagem_sort_page_value}}}
        :param int limit: {{{global_menssagem_sort_limit}}}
        :param str razao_social: {{{grupo_economico_request_razao_social_value}}}
        :param str nome_credor: {{{grupo_economico_request_nome_credor_value}}}
        :param str numero_receita_federal: {{{grupo_economico_request_numero_receita_federal_value}}}
        :param str inscricao_estadual: {{{grupo_economico_request_inscricao_estadual_value}}}
        :param str contato: {{{grupo_economico_request_contato_value}}}
        :param int banco: {{{grupo_economico_request_banco_value}}}
        :param int agencia: {{{grupo_economico_request_agencia_value}}}
        :param str digito_agencia: {{{grupo_economico_request_digito_agencia_value}}}
        :param str conta_corrente: {{{grupo_economico_request_conta_corrente_value}}}
        :param str digito_conta_corrente: {{{grupo_economico_request_digito_conta_corrente_value}}}
        :param str periodicidade: {{{grupo_economico_request_periodicidade_value}}}
        :param str pagamento_semanal: {{{grupo_economico_request_pagamento_semanal_value}}}
        :param int pagamento_mensal: {{{grupo_economico_request_pagamento_mensal_value}}}
        :param int pagamento_decendial_primeiro: {{{grupo_economico_request_pagamento_decendial_primeiro_value}}}
        :param int pagamento_decendial_segundo: {{{grupo_economico_request_pagamento_decendial_segundo_value}}}
        :param int pagamento_decendial_terceiro: {{{grupo_economico_request_pagamento_decendial_terceiro_value}}}
        :param int pagamento_quinzenal_primeiro: {{{grupo_economico_request_pagamento_quinzenal_primeiro_value}}}
        :param int pagamento_quinzenal_segundo: {{{grupo_economico_request_pagamento_quinzenal_segundo_value}}}
        :param float percentual_rav: {{{grupo_economico_request_percentual_r_a_v_value}}}
        :param str recebe_rav: {{{grupo_economico_request_recebe_r_a_v_value}}}
        :param float percentual_multiplica: {{{grupo_economico_request_percentual_multiplica_value}}}
        :param float taxa_adm: {{{grupo_economico_request_taxa_adm_value}}}
        :param float taxa_banco: {{{grupo_economico_request_taxa_banco_value}}}
        :param float limite_rav: {{{grupo_economico_request_limite_r_a_v_value}}}
        :param int id_credor_rav: {{{grupo_economico_request_id_credor_r_a_v_value}}}
        :return: PageGrupoEconomicoResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sort', 'page', 'limit', 'razao_social', 'nome_credor', 'numero_receita_federal', 'inscricao_estadual', 'contato', 'banco', 'agencia', 'digito_agencia', 'conta_corrente', 'digito_conta_corrente', 'periodicidade', 'pagamento_semanal', 'pagamento_mensal', 'pagamento_decendial_primeiro', 'pagamento_decendial_segundo', 'pagamento_decendial_terceiro', 'pagamento_quinzenal_primeiro', 'pagamento_quinzenal_segundo', 'percentual_rav', 'recebe_rav', 'percentual_multiplica', 'taxa_adm', 'taxa_banco', 'limite_rav', 'id_credor_rav']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method listar_using_get28" % key
                )
            params[key] = val
        del params['kwargs']


        resource_path = '/api/grupos-economicos'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'sort' in params:
            query_params['sort'] = params['sort']
        if 'page' in params:
            query_params['page'] = params['page']
        if 'limit' in params:
            query_params['limit'] = params['limit']
        if 'razao_social' in params:
            query_params['razaoSocial'] = params['razao_social']
        if 'nome_credor' in params:
            query_params['nomeCredor'] = params['nome_credor']
        if 'numero_receita_federal' in params:
            query_params['numeroReceitaFederal'] = params['numero_receita_federal']
        if 'inscricao_estadual' in params:
            query_params['inscricaoEstadual'] = params['inscricao_estadual']
        if 'contato' in params:
            query_params['contato'] = params['contato']
        if 'banco' in params:
            query_params['banco'] = params['banco']
        if 'agencia' in params:
            query_params['agencia'] = params['agencia']
        if 'digito_agencia' in params:
            query_params['digitoAgencia'] = params['digito_agencia']
        if 'conta_corrente' in params:
            query_params['contaCorrente'] = params['conta_corrente']
        if 'digito_conta_corrente' in params:
            query_params['digitoContaCorrente'] = params['digito_conta_corrente']
        if 'periodicidade' in params:
            query_params['periodicidade'] = params['periodicidade']
        if 'pagamento_semanal' in params:
            query_params['pagamentoSemanal'] = params['pagamento_semanal']
        if 'pagamento_mensal' in params:
            query_params['pagamentoMensal'] = params['pagamento_mensal']
        if 'pagamento_decendial_primeiro' in params:
            query_params['pagamentoDecendialPrimeiro'] = params['pagamento_decendial_primeiro']
        if 'pagamento_decendial_segundo' in params:
            query_params['pagamentoDecendialSegundo'] = params['pagamento_decendial_segundo']
        if 'pagamento_decendial_terceiro' in params:
            query_params['pagamentoDecendialTerceiro'] = params['pagamento_decendial_terceiro']
        if 'pagamento_quinzenal_primeiro' in params:
            query_params['pagamentoQuinzenalPrimeiro'] = params['pagamento_quinzenal_primeiro']
        if 'pagamento_quinzenal_segundo' in params:
            query_params['pagamentoQuinzenalSegundo'] = params['pagamento_quinzenal_segundo']
        if 'percentual_rav' in params:
            query_params['percentualRAV'] = params['percentual_rav']
        if 'recebe_rav' in params:
            query_params['recebeRAV'] = params['recebe_rav']
        if 'percentual_multiplica' in params:
            query_params['percentualMultiplica'] = params['percentual_multiplica']
        if 'taxa_adm' in params:
            query_params['taxaAdm'] = params['taxa_adm']
        if 'taxa_banco' in params:
            query_params['taxaBanco'] = params['taxa_banco']
        if 'limite_rav' in params:
            query_params['limiteRAV'] = params['limite_rav']
        if 'id_credor_rav' in params:
            query_params['idCredorRAV'] = params['id_credor_rav']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='PageGrupoEconomicoResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def listar_using_get29(self, **kwargs):
        """
        {{{grupo_origem_comercial_resource_listar}}}
        {{{grupo_origem_comercial_resource_listar_notes}}}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.listar_using_get29(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param list[str] sort: {{{global_menssagem_sort_sort}}}
        :param int page: {{{global_menssagem_sort_page_value}}}
        :param int limit: {{{global_menssagem_sort_limit}}}
        :param str nome: {{{grupo_origem_comercial_request_nome_value}}}
        :return: PageGrupoOrigemComercialResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sort', 'page', 'limit', 'nome']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method listar_using_get29" % key
                )
            params[key] = val
        del params['kwargs']


        resource_path = '/api/grupos-origens-comerciais'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'sort' in params:
            query_params['sort'] = params['sort']
        if 'page' in params:
            query_params['page'] = params['page']
        if 'limit' in params:
            query_params['limit'] = params['limit']
        if 'nome' in params:
            query_params['nome'] = params['nome']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='PageGrupoOrigemComercialResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def listar_using_get32(self, **kwargs):
        """
        {{{maquineta_resource_listar}}}
        {{{maquineta_resource_listar_notes}}}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.listar_using_get32(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param list[str] sort: {{{global_menssagem_sort_sort}}}
        :param int page: {{{global_menssagem_sort_page_value}}}
        :param int limit: {{{global_menssagem_sort_limit}}}
        :param int id_estabelecimento: {{{maquineta_request_id_estabelecimento_value}}}
        :return: PageMaquinetaResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sort', 'page', 'limit', 'id_estabelecimento']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method listar_using_get32" % key
                )
            params[key] = val
        del params['kwargs']


        resource_path = '/api/maquinetas'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'sort' in params:
            query_params['sort'] = params['sort']
        if 'page' in params:
            query_params['page'] = params['page']
        if 'limit' in params:
            query_params['limit'] = params['limit']
        if 'id_estabelecimento' in params:
            query_params['idEstabelecimento'] = params['id_estabelecimento']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='PageMaquinetaResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def listar_using_get33(self, **kwargs):
        """
        {{{moeda_resource_listar}}}
        {{{moeda_resource_listar_notes}}}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.listar_using_get33(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param list[str] sort: {{{global_menssagem_sort_sort}}}
        :param int page: {{{global_menssagem_sort_page_value}}}
        :param int limit: {{{global_menssagem_sort_limit}}}
        :param str codigo_moeda: {{{moeda_request_codigo_moeda_value}}}
        :param str simbolo: {{{moeda_request_simbolo_value}}}
        :param str descricao: {{{moeda_request_descricao_value}}}
        :return: PageMoedaResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sort', 'page', 'limit', 'codigo_moeda', 'simbolo', 'descricao']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method listar_using_get33" % key
                )
            params[key] = val
        del params['kwargs']


        resource_path = '/api/tipos-moedas'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'sort' in params:
            query_params['sort'] = params['sort']
        if 'page' in params:
            query_params['page'] = params['page']
        if 'limit' in params:
            query_params['limit'] = params['limit']
        if 'codigo_moeda' in params:
            query_params['codigoMoeda'] = params['codigo_moeda']
        if 'simbolo' in params:
            query_params['simbolo'] = params['simbolo']
        if 'descricao' in params:
            query_params['descricao'] = params['descricao']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='PageMoedaResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def listar_using_get34(self, **kwargs):
        """
        {{{operacao_credor_resource_listar}}}
        {{{operacao_credor_resource_listar_notes}}}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.listar_using_get34(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param list[str] sort: {{{global_menssagem_sort_sort}}}
        :param int page: {{{global_menssagem_sort_page_value}}}
        :param int limit: {{{global_menssagem_sort_limit}}}
        :param int id_operacao: {{{operacao_credor_request_id_operacao_value}}}
        :param int id_credor: {{{operacao_credor_request_id_credor_value}}}
        :param int id_produto: {{{operacao_credor_request_id_produto_value}}}
        :return: PageOperacaoCredorResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sort', 'page', 'limit', 'id_operacao', 'id_credor', 'id_produto']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method listar_using_get34" % key
                )
            params[key] = val
        del params['kwargs']


        resource_path = '/api/regras-operacoes-estabelecimentos'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'sort' in params:
            query_params['sort'] = params['sort']
        if 'page' in params:
            query_params['page'] = params['page']
        if 'limit' in params:
            query_params['limit'] = params['limit']
        if 'id_operacao' in params:
            query_params['idOperacao'] = params['id_operacao']
        if 'id_credor' in params:
            query_params['idCredor'] = params['id_credor']
        if 'id_produto' in params:
            query_params['idProduto'] = params['id_produto']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='PageOperacaoCredorResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def listar_using_get49(self, **kwargs):
        """
        {{{telefone_estabelecimento_resource_listar}}}
        {{{telefone_estabelecimento_resource_listar_notes}}}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.listar_using_get49(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param list[str] sort: {{{global_menssagem_sort_sort}}}
        :param int page: {{{global_menssagem_sort_page_value}}}
        :param int limit: {{{global_menssagem_sort_limit}}}
        :param int id_estabelecimento: {{{telefone_estabelecimento_request_id_estabelecimento_value}}}
        :return: PageTelefoneEstabelecimentoResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sort', 'page', 'limit', 'id_estabelecimento']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method listar_using_get49" % key
                )
            params[key] = val
        del params['kwargs']


        resource_path = '/api/telefones-estabelecimentos'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'sort' in params:
            query_params['sort'] = params['sort']
        if 'page' in params:
            query_params['page'] = params['page']
        if 'limit' in params:
            query_params['limit'] = params['limit']
        if 'id_estabelecimento' in params:
            query_params['idEstabelecimento'] = params['id_estabelecimento']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='PageTelefoneEstabelecimentoResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def listar_using_get51(self, **kwargs):
        """
        {{{terminal_resource_listar}}}
        {{{terminal_resource_listar_notes}}}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.listar_using_get51(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param list[str] sort: {{{global_menssagem_sort_sort}}}
        :param int page: {{{global_menssagem_sort_page_value}}}
        :param int limit: {{{global_menssagem_sort_limit}}}
        :param int id: {{{terminal_request_id_value}}}
        :param str terminal: {{{terminal_request_terminal_value}}}
        :param int numero_estabelecimento: {{{terminal_request_numero_estabelecimento_value}}}
        :param int id_estabelecimento: {{{terminal_request_id_estabelecimento_value}}}
        :return: PageTerminalResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sort', 'page', 'limit', 'id', 'terminal', 'numero_estabelecimento', 'id_estabelecimento']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method listar_using_get51" % key
                )
            params[key] = val
        del params['kwargs']


        resource_path = '/api/terminais'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'sort' in params:
            query_params['sort'] = params['sort']
        if 'page' in params:
            query_params['page'] = params['page']
        if 'limit' in params:
            query_params['limit'] = params['limit']
        if 'id' in params:
            query_params['id'] = params['id']
        if 'terminal' in params:
            query_params['terminal'] = params['terminal']
        if 'numero_estabelecimento' in params:
            query_params['numeroEstabelecimento'] = params['numero_estabelecimento']
        if 'id_estabelecimento' in params:
            query_params['idEstabelecimento'] = params['id_estabelecimento']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='PageTerminalResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def listar_using_get64(self, **kwargs):
        """
        {{{vinculo_estabelecimento_adquirente_resource_listar}}}
        {{{vinculo_estabelecimento_adquirente_resource_listar_notes}}}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.listar_using_get64(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param list[str] sort: {{{global_menssagem_sort_sort}}}
        :param int page: {{{global_menssagem_sort_page_value}}}
        :param int limit: {{{global_menssagem_sort_limit}}}
        :param int id_adquirente: {{{vinculo_estabelecimento_adquirente_request_id_adquirente_value}}}
        :param int id_estabelecimento: {{{vinculo_estabelecimento_adquirente_request_id_estabelecimento_value}}}
        :param str codigo_estabelecimento_adquirente: {{{vinculo_estabelecimento_adquirente_request_codigo_estabelecimento_adquirente_value}}}
        :return: PageVinculoEstabelecimentoAdquirenteResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sort', 'page', 'limit', 'id_adquirente', 'id_estabelecimento', 'codigo_estabelecimento_adquirente']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method listar_using_get64" % key
                )
            params[key] = val
        del params['kwargs']


        resource_path = '/api/adquirentes-estabelecimento'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'sort' in params:
            query_params['sort'] = params['sort']
        if 'page' in params:
            query_params['page'] = params['page']
        if 'limit' in params:
            query_params['limit'] = params['limit']
        if 'id_adquirente' in params:
            query_params['idAdquirente'] = params['id_adquirente']
        if 'id_estabelecimento' in params:
            query_params['idEstabelecimento'] = params['id_estabelecimento']
        if 'codigo_estabelecimento_adquirente' in params:
            query_params['codigoEstabelecimentoAdquirente'] = params['codigo_estabelecimento_adquirente']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='PageVinculoEstabelecimentoAdquirenteResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def listar_using_get65(self, id, **kwargs):
        """
        {{{vinculo_operacao_resource_listar}}}
        {{{vinculo_operacao_resource_listar_notes}}}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.listar_using_get65(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: {{{vinculo_operacao_resource_listar_param_id}}} (required)
        :param list[str] sort: {{{global_menssagem_sort_sort}}}
        :param int page: {{{global_menssagem_sort_page_value}}}
        :param int limit: {{{global_menssagem_sort_limit}}}
        :param int id_produto: {{{vinculo_operacao_request_id_produto_value}}}
        :param int id_operacao: {{{vinculo_operacao_request_id_operacao_value}}}
        :param int codigo_mcc: {{{vinculo_operacao_request_codigo_m_c_c_value}}}
        :return: PageVinculoOperacaoResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'sort', 'page', 'limit', 'id_produto', 'id_operacao', 'codigo_mcc']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method listar_using_get65" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `listar_using_get65`")

        resource_path = '/api/estabelecimentos/{id}/operacoes'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}
        if 'sort' in params:
            query_params['sort'] = params['sort']
        if 'page' in params:
            query_params['page'] = params['page']
        if 'limit' in params:
            query_params['limit'] = params['limit']
        if 'id_produto' in params:
            query_params['idProduto'] = params['id_produto']
        if 'id_operacao' in params:
            query_params['idOperacao'] = params['id_operacao']
        if 'codigo_mcc' in params:
            query_params['codigoMCC'] = params['codigo_mcc']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='PageVinculoOperacaoResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def salvar_using_post19(self, maquineta_persist, **kwargs):
        """
        {{{maquineta_resource_salvar}}}
        {{{maquineta_resource_salvar_notes}}}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.salvar_using_post19(maquineta_persist, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param MaquinetaPersist maquineta_persist: maquinetaPersist (required)
        :return: MaquinetaResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['maquineta_persist']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method salvar_using_post19" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'maquineta_persist' is set
        if ('maquineta_persist' not in params) or (params['maquineta_persist'] is None):
            raise ValueError("Missing the required parameter `maquineta_persist` when calling `salvar_using_post19`")

        resource_path = '/api/maquinetas'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'maquineta_persist' in params:
            body_params = params['maquineta_persist']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='MaquinetaResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def salvar_using_post20(self, operacao_credor_persist, **kwargs):
        """
        {{{operacao_credor_resource_salvar}}}
        {{{operacao_credor_resource_salvar_notes}}}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.salvar_using_post20(operacao_credor_persist, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param OperacaoCredorPersist operacao_credor_persist: operacaoCredorPersist (required)
        :return: OperacaoCredorResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['operacao_credor_persist']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method salvar_using_post20" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'operacao_credor_persist' is set
        if ('operacao_credor_persist' not in params) or (params['operacao_credor_persist'] is None):
            raise ValueError("Missing the required parameter `operacao_credor_persist` when calling `salvar_using_post20`")

        resource_path = '/api/regras-operacoes-estabelecimentos'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'operacao_credor_persist' in params:
            body_params = params['operacao_credor_persist']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='OperacaoCredorResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def salvar_using_post27(self, telefone_estabelecimento_persist, **kwargs):
        """
        {{{telefone_estabelecimento_resource_salvar}}}
        {{{telefone_estabelecimento_resource_salvar_notes}}}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.salvar_using_post27(telefone_estabelecimento_persist, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param TelefoneEstabelecimentoPersist telefone_estabelecimento_persist: telefoneEstabelecimentoPersist (required)
        :return: TelefoneEstabelecimentoResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['telefone_estabelecimento_persist']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method salvar_using_post27" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'telefone_estabelecimento_persist' is set
        if ('telefone_estabelecimento_persist' not in params) or (params['telefone_estabelecimento_persist'] is None):
            raise ValueError("Missing the required parameter `telefone_estabelecimento_persist` when calling `salvar_using_post27`")

        resource_path = '/api/telefones-estabelecimentos'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'telefone_estabelecimento_persist' in params:
            body_params = params['telefone_estabelecimento_persist']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='TelefoneEstabelecimentoResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def salvar_using_post29(self, terminal_persist, **kwargs):
        """
        {{{terminal_resource_salvar}}}
        {{{terminal_resource_salvar_notes}}}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.salvar_using_post29(terminal_persist, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param TerminalPersist terminal_persist: terminalPersist (required)
        :return: TerminalResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['terminal_persist']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method salvar_using_post29" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'terminal_persist' is set
        if ('terminal_persist' not in params) or (params['terminal_persist'] is None):
            raise ValueError("Missing the required parameter `terminal_persist` when calling `salvar_using_post29`")

        resource_path = '/api/terminais'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'terminal_persist' in params:
            body_params = params['terminal_persist']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='TerminalResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def salvar_using_post34(self, vinculo_estabelecimento_adquirente_persist, **kwargs):
        """
        {{{vinculo_estabelecimento_adquirente_resource_salvar}}}
        {{{vinculo_estabelecimento_adquirente_resource_salvar_notes}}}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.salvar_using_post34(vinculo_estabelecimento_adquirente_persist, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param VinculoEstabelecimentoAdquirentePersist vinculo_estabelecimento_adquirente_persist: vinculoEstabelecimentoAdquirentePersist (required)
        :return: VinculoEstabelecimentoAdquirenteResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['vinculo_estabelecimento_adquirente_persist']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method salvar_using_post34" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'vinculo_estabelecimento_adquirente_persist' is set
        if ('vinculo_estabelecimento_adquirente_persist' not in params) or (params['vinculo_estabelecimento_adquirente_persist'] is None):
            raise ValueError("Missing the required parameter `vinculo_estabelecimento_adquirente_persist` when calling `salvar_using_post34`")

        resource_path = '/api/adquirentes-estabelecimento'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'vinculo_estabelecimento_adquirente_persist' in params:
            body_params = params['vinculo_estabelecimento_adquirente_persist']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='VinculoEstabelecimentoAdquirenteResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response
