# coding: utf-8

"""
CadastrosGeraisApi.py
Copyright 2016 SmartBear Software

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
"""

from __future__ import absolute_import

import sys
import os

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class CadastrosGeraisApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def alterar_using_put1(self, id, **kwargs):
        """
        Atualiza os dados de um determinado Endere\u00C3\u00A7o
        Este m\u00C3\u00A9todo permite que seja alterado na base do emissor um ou mais registros ligados a um determinado Endere\u00C3\u00A7o.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.alterar_using_put1(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: id (required)
        :param int id_pessoa: C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o da Pessoa a qual o endere\u00C3\u00A7o pertence (id)
        :param int id_tipo_endereco: C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o da Tipo Endere\u00C3\u00A7o (id)
        :param str cep: Apresenta o C\u00C3\u00B3digo de Endere\u00C3\u00A7amento Postal (CEP) no formaro '58800000'
        :param str logradouro: Apresenta o nome do Logradouro
        :param int numero: Apresenta o n\u00C3\u00BAmero do endere\u00C3\u00A7o
        :param str complemento: Apresenta descri\u00C3\u00A7oes complementares referente ao endere\u00C3\u00A7o
        :param str ponto_referencia: Apresenta a descri\u00C3\u00A7\u00C3\u00A3o de ponto de refer\u00C3\u00AAncia do endere\u00C3\u00A7o
        :param str bairro: Apresenta nome do bairro
        :param str cidade: Apresenta nome da cidade
        :param str uf: Apresenta sigla da Unidade Federativa
        :param str pais: Apresenta nome do Pais
        :return: Endereco
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'id_pessoa', 'id_tipo_endereco', 'cep', 'logradouro', 'numero', 'complemento', 'ponto_referencia', 'bairro', 'cidade', 'uf', 'pais']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method alterar_using_put1" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `alterar_using_put1`")

        resource_path = '/api/enderecos'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'id' in params:
            query_params['id'] = params['id']
        if 'id_pessoa' in params:
            query_params['idPessoa'] = params['id_pessoa']
        if 'id_tipo_endereco' in params:
            query_params['idTipoEndereco'] = params['id_tipo_endereco']
        if 'cep' in params:
            query_params['cep'] = params['cep']
        if 'logradouro' in params:
            query_params['logradouro'] = params['logradouro']
        if 'numero' in params:
            query_params['numero'] = params['numero']
        if 'complemento' in params:
            query_params['complemento'] = params['complemento']
        if 'ponto_referencia' in params:
            query_params['pontoReferencia'] = params['ponto_referencia']
        if 'bairro' in params:
            query_params['bairro'] = params['bairro']
        if 'cidade' in params:
            query_params['cidade'] = params['cidade']
        if 'uf' in params:
            query_params['uf'] = params['uf']
        if 'pais' in params:
            query_params['pais'] = params['pais']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='Endereco',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def alterar_using_put4(self, id, **kwargs):
        """
        Atualiza os detalhes de uma determinada Pessoa
        Este m\u00C3\u00A9todo permite que seja alterado na base do emissor os detalhes de uma determinada Pessoa.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.alterar_using_put4(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: ID da Pessoa (required)
        :param str nome_mae: Apresenta o nome da m\u00C3\u00A3e da pessoa fisica
        :param int id_estado_civil: Id Estado civil da pessoa fisica
        :param str profissao: Profiss\u00C3\u00A3o da pessoa fisica
        :param int id_natureza_ocupacao: Id Natureza Ocupa\u00C3\u00A7\u00C3\u00A3o da pessoa fisica
        :param int id_nacionalidade: Id Nacionalidade da pessoa fisica
        :param int numero_agencia: N\u00C3\u00BAmero da ag\u00C3\u00AAncia.
        :param str numero_conta_corrente: N\u00C3\u00BAmero da conta corrente.
        :param str email: Email da pessoa fisica
        :param str nome_empresa: Nome que deve ser impresso no cart\u00C3\u00A3o
        :return: PessoaDetalheResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nome_mae', 'id_estado_civil', 'profissao', 'id_natureza_ocupacao', 'id_nacionalidade', 'numero_agencia', 'numero_conta_corrente', 'email', 'nome_empresa']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method alterar_using_put4" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `alterar_using_put4`")

        resource_path = '/api/pessoas-detalhes/{id}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}
        if 'nome_mae' in params:
            query_params['nomeMae'] = params['nome_mae']
        if 'id_estado_civil' in params:
            query_params['idEstadoCivil'] = params['id_estado_civil']
        if 'profissao' in params:
            query_params['profissao'] = params['profissao']
        if 'id_natureza_ocupacao' in params:
            query_params['idNaturezaOcupacao'] = params['id_natureza_ocupacao']
        if 'id_nacionalidade' in params:
            query_params['idNacionalidade'] = params['id_nacionalidade']
        if 'numero_agencia' in params:
            query_params['numeroAgencia'] = params['numero_agencia']
        if 'numero_conta_corrente' in params:
            query_params['numeroContaCorrente'] = params['numero_conta_corrente']
        if 'email' in params:
            query_params['email'] = params['email']
        if 'nome_empresa' in params:
            query_params['nomeEmpresa'] = params['nome_empresa']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='PessoaDetalheResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def alterar_using_put5(self, id, nome, tipo, **kwargs):
        """
        Atualiza os dados de uma determinada Pessoa
        Este m\u00C3\u00A9todo permite que seja alterado na base do emissor um registro de determinada Pessoa.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.alterar_using_put5(id, nome, tipo, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: ID da Pessoa (required)
        :param str nome: Apresenta o 'Nome Completo da PF' ou o 'Nome Completo da Raz\u00C3\u00A3o Social (Nome Empresarial)'. (required)
        :param str tipo: C\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o do tipo da Pessoa, sendo: (\"PF\": Pessoa F\u00C3\u00ADsica), (\"PJ\": Pessoa Jur\u00C3\u00ADdica). (required)
        :param str cpf: N\u00C3\u00BAmero do CPF, quando PF.
        :param str cnpj: N\u00C3\u00BAmero do CNPJ, quando PJ.
        :param str data_nascimento: Data de Nascimento da Pessoa, quando PF, ou a Data de Abertura da Empresa, quando PJ. Essa data deve ser informada no formato aaaa-MM-dd.
        :param str sexo: C\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o do sexo da Pessoa, quando PF, sendo: (\"M\": Masculino), (\"F\": Feminino), (\"O\": Outro), (\"N\": N\u00C3\u00A3o Especificado).
        :param str numero_identidade: N\u00C3\u00BAmero da Identidade.
        :param str orgao_expedidor_identidade: Org\u00C3\u00A3o expedidor do Identidade.
        :param str unidade_federativa_identidade: Sigla da Unidade Federativa de onde foi expedido a Identidade
        :param str data_emissao_identidade: Data emiss\u00C3\u00A3o da Identidade.
        :return: Pessoa
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nome', 'tipo', 'cpf', 'cnpj', 'data_nascimento', 'sexo', 'numero_identidade', 'orgao_expedidor_identidade', 'unidade_federativa_identidade', 'data_emissao_identidade']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method alterar_using_put5" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `alterar_using_put5`")
        # verify the required parameter 'nome' is set
        if ('nome' not in params) or (params['nome'] is None):
            raise ValueError("Missing the required parameter `nome` when calling `alterar_using_put5`")
        # verify the required parameter 'tipo' is set
        if ('tipo' not in params) or (params['tipo'] is None):
            raise ValueError("Missing the required parameter `tipo` when calling `alterar_using_put5`")

        resource_path = '/api/pessoas/{id}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}
        if 'nome' in params:
            query_params['nome'] = params['nome']
        if 'tipo' in params:
            query_params['tipo'] = params['tipo']
        if 'cpf' in params:
            query_params['cpf'] = params['cpf']
        if 'cnpj' in params:
            query_params['cnpj'] = params['cnpj']
        if 'data_nascimento' in params:
            query_params['dataNascimento'] = params['data_nascimento']
        if 'sexo' in params:
            query_params['sexo'] = params['sexo']
        if 'numero_identidade' in params:
            query_params['numeroIdentidade'] = params['numero_identidade']
        if 'orgao_expedidor_identidade' in params:
            query_params['orgaoExpedidorIdentidade'] = params['orgao_expedidor_identidade']
        if 'unidade_federativa_identidade' in params:
            query_params['unidadeFederativaIdentidade'] = params['unidade_federativa_identidade']
        if 'data_emissao_identidade' in params:
            query_params['dataEmissaoIdentidade'] = params['data_emissao_identidade']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='Pessoa',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def alterar_using_put6(self, id, **kwargs):
        """
        Realiza a altera\u00C3\u00A7\u00C3\u00A3o de um determinado Telefone
        Este m\u00C3\u00A9todo permite que seja alterado um determinado Telefone na base de dados do Emissor.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.alterar_using_put6(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Telefone (id). (required)
        :param int id_tipo_telefone: C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Tipo do Telefone (id).
        :param str ddd: C\u00C3\u00B3digo DDD do telefone (id).
        :param str telefone: N\u00C3\u00BAmero do telefone.
        :param str ramal: N\u00C3\u00BAmero do ramal.
        :return: Telefone
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'id_tipo_telefone', 'ddd', 'telefone', 'ramal']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method alterar_using_put6" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `alterar_using_put6`")

        resource_path = '/api/telefones'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'id' in params:
            query_params['id'] = params['id']
        if 'id_tipo_telefone' in params:
            query_params['idTipoTelefone'] = params['id_tipo_telefone']
        if 'ddd' in params:
            query_params['ddd'] = params['ddd']
        if 'telefone' in params:
            query_params['telefone'] = params['telefone']
        if 'ramal' in params:
            query_params['ramal'] = params['ramal']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='Telefone',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def ativar_uso_exterior_using_post(self, id, **kwargs):
        """
        Ativa o par\u00C3\u00A2metro uso exterior para o produto
        Este m\u00C3\u00A9todo permite ativar o uso no exterior para o produto atrav\u00C3\u00A9s do seu c\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o (id).

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.ativar_uso_exterior_using_post(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Produto (id) (required)
        :return: ProdutoDetalhesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ativar_uso_exterior_using_post" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `ativar_uso_exterior_using_post`")

        resource_path = '/api/produtos/{id}/ativar-uso-exterior'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='ProdutoDetalhesResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def configurar_taxa_antecipacao_using_post(self, id, taxa_antecipacao_request, **kwargs):
        """
        Configura a Taxa de Antecipa\u00C3\u00A7\u00C3\u00A3o de um Produto
        Este recurso permite configurar a Taxa de Antecipa\u00C3\u00A7\u00C3\u00A3o de um Produto, a partir do seu c\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o (id).

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.configurar_taxa_antecipacao_using_post(id, taxa_antecipacao_request, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: Id Produto (required)
        :param TaxaAntecipacaoRequest taxa_antecipacao_request: taxaAntecipacaoRequest (required)
        :return: ParametroProdutoResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'taxa_antecipacao_request']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method configurar_taxa_antecipacao_using_post" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `configurar_taxa_antecipacao_using_post`")
        # verify the required parameter 'taxa_antecipacao_request' is set
        if ('taxa_antecipacao_request' not in params) or (params['taxa_antecipacao_request'] is None):
            raise ValueError("Missing the required parameter `taxa_antecipacao_request` when calling `configurar_taxa_antecipacao_using_post`")

        resource_path = '/api/produtos/{id}/configurar-taxa-antecipacao'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'taxa_antecipacao_request' in params:
            body_params = params['taxa_antecipacao_request']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='ParametroProdutoResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def consultar_origem_comercial_using_get(self, id, **kwargs):
        """
        Opera\u00C3\u00A7\u00C3\u00A3o utilizada para consultar uma determinada Origem Comercial
        Este m\u00C3\u00A9todo permite que sejam listados os registros de uma determinada Origem Comercial existente na base do emissor. Para isso, \u00C3\u00A9 preciso informar o seu respectivo c\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o (id).

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.consultar_origem_comercial_using_get(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: ID da Origem Comercial (required)
        :return: OrigemComercial
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method consultar_origem_comercial_using_get" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `consultar_origem_comercial_using_get`")

        resource_path = '/api/origens-comerciais/{id}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='OrigemComercial',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def consultar_taxa_antecipacao_using_get(self, id, tipo_transacao, **kwargs):
        """
        Consulta a Taxa de Antecipa\u00C3\u00A7\u00C3\u00A3o de um Produto
        Este recurso permite consultar a Taxa de Antecipa\u00C3\u00A7\u00C3\u00A3o de um Produto, a partir do seu c\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o (id).

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.consultar_taxa_antecipacao_using_get(id, tipo_transacao, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: Id Produto (required)
        :param str tipo_transacao: Tipo da Transa\u00C3\u00A7\u00C3\u00A3o (ON-US ou OFF-US) (required)
        :return: ParametroProdutoResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'tipo_transacao']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method consultar_taxa_antecipacao_using_get" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `consultar_taxa_antecipacao_using_get`")
        # verify the required parameter 'tipo_transacao' is set
        if ('tipo_transacao' not in params) or (params['tipo_transacao'] is None):
            raise ValueError("Missing the required parameter `tipo_transacao` when calling `consultar_taxa_antecipacao_using_get`")

        resource_path = '/api/produtos/{id}/consultar-taxa-antecipacao'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}
        if 'tipo_transacao' in params:
            query_params['tipoTransacao'] = params['tipo_transacao']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='ParametroProdutoResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def consultar_using_get1(self, id, **kwargs):
        """
        Apresenta os dados de um determinado Banco
        Este m\u00C3\u00A9todo permite consultar um determinado Banco a partir do seu c\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o (id).

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.consultar_using_get1(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Banco (id). (required)
        :return: Banco
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method consultar_using_get1" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `consultar_using_get1`")

        resource_path = '/api/bancos/{id}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='Banco',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def consultar_using_get10(self, id, **kwargs):
        """
        Apresenta os dados de uma determinada Pessoa
        Este m\u00C3\u00A9todo permite que sejam listadas as Pessoas existentes na base de dados do Emissor.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.consultar_using_get10(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: ID da Pessoa (required)
        :return: Pessoa
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method consultar_using_get10" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `consultar_using_get10`")

        resource_path = '/api/pessoas/{id}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='Pessoa',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def consultar_using_get11(self, id, **kwargs):
        """
        Apresenta os dados de um determinado Produto
        Este m\u00C3\u00A9todo permite consultar um determinado Produto a partir do seu c\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o (id).

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.consultar_using_get11(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Produto (id) (required)
        :return: ProdutoDetalhesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method consultar_using_get11" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `consultar_using_get11`")

        resource_path = '/api/produtos/{id}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='ProdutoDetalhesResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def consultar_using_get15(self, id, **kwargs):
        """
        Apresenta os dados de um determinado Telefone
        Este m\u00C3\u00A9todo permite consultar um determinado Telefone a partir do seu c\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o (id).

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.consultar_using_get15(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Telefone (id). (required)
        :return: Telefone
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method consultar_using_get15" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `consultar_using_get15`")

        resource_path = '/api/telefones/{id}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='Telefone',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def consultar_using_get17(self, **kwargs):
        """
        Lista os tipos de ajustes do emissor 
        Este recurso permite que sejam listados os tipos de ajustes existentes na base de dados do emissor.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.consultar_using_get17(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int page: P\u00C3\u00A1gina solicitada (Default = 0)
        :param int limit: Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 50, Max = 50)
        :param int id: C\u00C3\u00B3digo identificador do tipo de ajuste.
        :param str descricao: Descri\u00C3\u00A7\u00C3\u00A3o do tipo de ajuste.
        :return: PageTipoAjuste
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['page', 'limit', 'id', 'descricao']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method consultar_using_get17" % key
                )
            params[key] = val
        del params['kwargs']


        resource_path = '/api/tipos-ajustes'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'page' in params:
            query_params['page'] = params['page']
        if 'limit' in params:
            query_params['limit'] = params['limit']
        if 'id' in params:
            query_params['id'] = params['id']
        if 'descricao' in params:
            query_params['descricao'] = params['descricao']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='PageTipoAjuste',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def consultar_using_get18(self, **kwargs):
        """
        Lista os tipos de boletos do emissor 
        Este recurso permite que sejam listados os tipos de boletos existentes na base de dados do emissor.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.consultar_using_get18(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int page: P\u00C3\u00A1gina solicitada (Default = 0)
        :param int limit: Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 50, Max = 50)
        :param int id: C\u00C3\u00B3digo identificador do tipo de boleto.
        :param str descricao: Descri\u00C3\u00A7\u00C3\u00A3o do tipo de boleto.
        :param int banco: C\u00C3\u00B3digo identificador do banco.
        :return: PageTipoBoleto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['page', 'limit', 'id', 'descricao', 'banco']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method consultar_using_get18" % key
                )
            params[key] = val
        del params['kwargs']


        resource_path = '/api/tipos-boletos'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'page' in params:
            query_params['page'] = params['page']
        if 'limit' in params:
            query_params['limit'] = params['limit']
        if 'id' in params:
            query_params['id'] = params['id']
        if 'descricao' in params:
            query_params['descricao'] = params['descricao']
        if 'banco' in params:
            query_params['banco'] = params['banco']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='PageTipoBoleto',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def consultar_using_get19(self, id, **kwargs):
        """
        Apresenta os dados de um determinado Tipo de Endere\u00C3\u00A7o
        Este m\u00C3\u00A9todo permite consultar um determinado Tipo de Endere\u00C3\u00A7o a partir do seu c\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o (id).

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.consultar_using_get19(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Tipo do Endere\u00C3\u00A7o (id) (required)
        :return: TipoEndereco
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method consultar_using_get19" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `consultar_using_get19`")

        resource_path = '/api/tipos-enderecos/{id}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='TipoEndereco',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def consultar_using_get21(self, id, **kwargs):
        """
        Apresenta os dados de um determinado Tipo de Telefone
        Este m\u00C3\u00A9todo permite consultar um determinado Tipo de Telefone a partir do seu c\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o (id).

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.consultar_using_get21(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Tipo do Telefone (id) (required)
        :return: TipoTelefone
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method consultar_using_get21" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `consultar_using_get21`")

        resource_path = '/api/tipos-telefones/{id}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='TipoTelefone',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def consultar_using_get5(self, id, **kwargs):
        """
        Apresenta os dados de um determinado Endere\u00C3\u00A7o
        Este m\u00C3\u00A9todo permite consultar um determinado Endere\u00C3\u00A7o a partir do seu c\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o (id).

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.consultar_using_get5(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Endere\u00C3\u00A7o (id). (required)
        :return: Endereco
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method consultar_using_get5" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `consultar_using_get5`")

        resource_path = '/api/enderecos/{id}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='Endereco',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def consultar_using_get9(self, id, **kwargs):
        """
        Apresenta os detalhes de uma determinada Pessoa
        Este m\u00C3\u00A9todo permite a consulta dos detalhes de uma Pessoa existentes na base de dados do Emissor.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.consultar_using_get9(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: ID da Pessoa (required)
        :return: PessoaDetalheResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method consultar_using_get9" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `consultar_using_get9`")

        resource_path = '/api/pessoas-detalhes/{id}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='PessoaDetalheResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def desativar_uso_exterior_using_post(self, id, **kwargs):
        """
        Desativa o par\u00C3\u00A2metro uso exterior para o produto
        Este m\u00C3\u00A9todo permite desativar o uso no exterior para o produto atrav\u00C3\u00A9s do seu c\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o (id).

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.desativar_uso_exterior_using_post(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Produto (id) (required)
        :return: ProdutoDetalhesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method desativar_uso_exterior_using_post" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `desativar_uso_exterior_using_post`")

        resource_path = '/api/produtos/{id}/desativar-uso-exterior'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='ProdutoDetalhesResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def listar_contas_por_pessoa_using_get(self, numero_receita_federal, **kwargs):
        """
        Lista as contas da pessoa
        Permite listar as contas de um pessoa a partir do seu numero na receita federal.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.listar_contas_por_pessoa_using_get(numero_receita_federal, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str numero_receita_federal: N\u00C3\u00BAmero de identifica\u00C3\u00A7\u00C3\u00A3o do cliente na Receita Federal (CPF ou CNPJ) (required)
        :param int page: P\u00C3\u00A1gina solicitada (Default = 0)
        :param int limit: Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 50, Max = 50)
        :return: PageContasDetalhe
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['numero_receita_federal', 'page', 'limit']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method listar_contas_por_pessoa_using_get" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'numero_receita_federal' is set
        if ('numero_receita_federal' not in params) or (params['numero_receita_federal'] is None):
            raise ValueError("Missing the required parameter `numero_receita_federal` when calling `listar_contas_por_pessoa_using_get`")

        resource_path = '/api/pessoas/listar-contas'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'numero_receita_federal' in params:
            query_params['numeroReceitaFederal'] = params['numero_receita_federal']
        if 'page' in params:
            query_params['page'] = params['page']
        if 'limit' in params:
            query_params['limit'] = params['limit']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='PageContasDetalhe',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def listar_estados_civis_using_get(self, **kwargs):
        """
        Lista os Estados C\u00C3\u00ADvis
        Este m\u00C3\u00A9todo permite que sejam listados os Estados C\u00C3\u00ADvis na base de dados do Emissor.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.listar_estados_civis_using_get(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int page: P\u00C3\u00A1gina solicitada (Default = 0)
        :param int limit: Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 50, Max = 50)
        :return: PageCampoCodificadoDescricao
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['page', 'limit']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method listar_estados_civis_using_get" % key
                )
            params[key] = val
        del params['kwargs']


        resource_path = '/api/estados-civis'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'page' in params:
            query_params['page'] = params['page']
        if 'limit' in params:
            query_params['limit'] = params['limit']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='PageCampoCodificadoDescricao',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def listar_historico_telefones_using_get(self, id, **kwargs):
        """
        Listar altera\u00C3\u00A7\u00C3\u00B5es de telefones realizadas nos \u00C3\u00BAltimos 60 dias
        Este m\u00C3\u00A9todo permite verificar quais os telefones de um determinado que cliente que sofreram altera\u00C3\u00A7\u00C3\u00A3o nos \u00C3\u00BAltimos 60 dias.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.listar_historico_telefones_using_get(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o da pessoa (id). (required)
        :return: HistoricoTelefone
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method listar_historico_telefones_using_get" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `listar_historico_telefones_using_get`")

        resource_path = '/api/pessoas/{id}/historico-telefones'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='HistoricoTelefone',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def listar_nacionalidades_using_get(self, **kwargs):
        """
        Lista nacionalidades
        Este m\u00C3\u00A9todo permite que sejam listados as nacionalidades na base de dados do Emissor.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.listar_nacionalidades_using_get(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int page: P\u00C3\u00A1gina solicitada (Default = 0)
        :param int limit: Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 50, Max = 50)
        :return: PageCampoCodificadoDescricao
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['page', 'limit']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method listar_nacionalidades_using_get" % key
                )
            params[key] = val
        del params['kwargs']


        resource_path = '/api/nacionalidades'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'page' in params:
            query_params['page'] = params['page']
        if 'limit' in params:
            query_params['limit'] = params['limit']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='PageCampoCodificadoDescricao',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def listar_naturezas_ocupacoes_using_get(self, **kwargs):
        """
        Lista as Ocupa\u00C3\u00A7\u00C3\u00B5es
        Este m\u00C3\u00A9todo permite que sejam listados as naturezas de opera\u00C3\u00A7\u00C3\u00B5es na base de dados do Emissor.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.listar_naturezas_ocupacoes_using_get(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int page: P\u00C3\u00A1gina solicitada (Default = 0)
        :param int limit: Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 50, Max = 50)
        :return: PageCampoCodificadoDescricao
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['page', 'limit']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method listar_naturezas_ocupacoes_using_get" % key
                )
            params[key] = val
        del params['kwargs']


        resource_path = '/api/ocupacoes'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'page' in params:
            query_params['page'] = params['page']
        if 'limit' in params:
            query_params['limit'] = params['limit']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='PageCampoCodificadoDescricao',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def listar_origens_comerciais_using_get(self, **kwargs):
        """
        Opera\u00C3\u00A7\u00C3\u00A3o utilizada para listar Origens Comerciais
        Este m\u00C3\u00A9todo permite que sejam listadas as Origens Comerciais existentes na base do emissor.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.listar_origens_comerciais_using_get(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int page: P\u00C3\u00A1gina solicitada (Default = 0)
        :param int limit: Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 50, Max = 50)
        :param int id: Id da origem comercial
        :param str nome: Nome da origem comercial
        :param int status: Status da origem comercial
        :return: PageOrigensComerciais
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['page', 'limit', 'id', 'nome', 'status']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method listar_origens_comerciais_using_get" % key
                )
            params[key] = val
        del params['kwargs']


        resource_path = '/api/origens-comerciais'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'page' in params:
            query_params['page'] = params['page']
        if 'limit' in params:
            query_params['limit'] = params['limit']
        if 'id' in params:
            query_params['id'] = params['id']
        if 'nome' in params:
            query_params['nome'] = params['nome']
        if 'status' in params:
            query_params['status'] = params['status']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='PageOrigensComerciais',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def listar_profissoes_using_get(self, **kwargs):
        """
        Lista profiss\u00C3\u00B5es
        Este m\u00C3\u00A9todo permite que sejam listados as profiss\u00C3\u00B5es na base de dados do Emissor.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.listar_profissoes_using_get(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int page: P\u00C3\u00A1gina solicitada (Default = 0)
        :param int limit: Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 50, Max = 50)
        :return: PageCampoCodificadoDescricao
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['page', 'limit']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method listar_profissoes_using_get" % key
                )
            params[key] = val
        del params['kwargs']


        resource_path = '/api/profissoes'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'page' in params:
            query_params['page'] = params['page']
        if 'limit' in params:
            query_params['limit'] = params['limit']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='PageCampoCodificadoDescricao',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def listar_using_get13(self, **kwargs):
        """
        Lista os Detalhes das Pessoas cadastradas no Emissor
        Este m\u00C3\u00A9todo permite que sejam listadas od detalhes das Pessoas existentes na base de dados do Emissor.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.listar_using_get13(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int page: P\u00C3\u00A1gina solicitada (Default = 0)
        :param int limit: Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 50, Max = 50)
        :param int id_pessoa: C\u00C3\u00B3digo identificador da pessoa
        :param str nome_mae: Apresenta o nome da m\u00C3\u00A3e da pessoa fisica
        :param int id_estado_civil: Id Estado civil da pessoa fisica
        :param str profissao: Profiss\u00C3\u00A3o da pessoa fisica
        :param int id_natureza_ocupacao: Id Natureza Ocupa\u00C3\u00A7\u00C3\u00A3o da pessoa fisica
        :param int id_nacionalidade: Id Nacionalidade da pessoa fisica
        :param int numero_agencia: N\u00C3\u00BAmero da ag\u00C3\u00AAncia.
        :param str numero_conta_corrente: N\u00C3\u00BAmero da conta corrente.
        :param str email: Email da pessoa fisica
        :param str nome_empresa: Nome que deve ser impresso no cart\u00C3\u00A3o
        :return: PessoaDetalheResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['page', 'limit', 'id_pessoa', 'nome_mae', 'id_estado_civil', 'profissao', 'id_natureza_ocupacao', 'id_nacionalidade', 'numero_agencia', 'numero_conta_corrente', 'email', 'nome_empresa']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method listar_using_get13" % key
                )
            params[key] = val
        del params['kwargs']


        resource_path = '/api/pessoas-detalhes'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'page' in params:
            query_params['page'] = params['page']
        if 'limit' in params:
            query_params['limit'] = params['limit']
        if 'id_pessoa' in params:
            query_params['idPessoa'] = params['id_pessoa']
        if 'nome_mae' in params:
            query_params['nomeMae'] = params['nome_mae']
        if 'id_estado_civil' in params:
            query_params['idEstadoCivil'] = params['id_estado_civil']
        if 'profissao' in params:
            query_params['profissao'] = params['profissao']
        if 'id_natureza_ocupacao' in params:
            query_params['idNaturezaOcupacao'] = params['id_natureza_ocupacao']
        if 'id_nacionalidade' in params:
            query_params['idNacionalidade'] = params['id_nacionalidade']
        if 'numero_agencia' in params:
            query_params['numeroAgencia'] = params['numero_agencia']
        if 'numero_conta_corrente' in params:
            query_params['numeroContaCorrente'] = params['numero_conta_corrente']
        if 'email' in params:
            query_params['email'] = params['email']
        if 'nome_empresa' in params:
            query_params['nomeEmpresa'] = params['nome_empresa']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='PessoaDetalheResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def listar_using_get14(self, **kwargs):
        """
        Lista as Pessoas cadastradas no Emissor
        Este m\u00C3\u00A9todo permite que sejam listadas as Pessoas existentes na base de dados do Emissor.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.listar_using_get14(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int page: P\u00C3\u00A1gina solicitada (Default = 0)
        :param int limit: Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 50, Max = 50)
        :param int id: C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o da Pessoa (id).
        :param str nome: Apresenta o 'Nome Completo da PF' ou o 'Nome Completo da Raz\u00C3\u00A3o Social (Nome Empresarial)'.
        :param str tipo: C\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o do tipo da Pessoa, sendo: (\"PF\": Pessoa F\u00C3\u00ADsica), (\"PJ\": Pessoa Jur\u00C3\u00ADdica).
        :param str cpf: N\u00C3\u00BAmero do CPF, quando PF.
        :param str cnpj: N\u00C3\u00BAmero do CNPJ, quando PJ.
        :param str data_nascimento: Data de Nascimento da Pessoa, quando PF, ou a Data de Abertura da Empresa, quando PJ.
        :param str sexo: C\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o do sexo da Pessoa, quando PF, sendo: (\"M\": Masculino), (\"F\": Feminino), (\"O\": Outro), (\"N\": N\u00C3\u00A3o Especificado).
        :param str numero_identidade: N\u00C3\u00BAmero da Identidade
        :param str orgao_expedidor_identidade: Org\u00C3\u00A3o expedidor do RG.
        :param str unidade_federativa_identidade: Sigla da Unidade Federativa de onde foi expedido a Identidade
        :param str data_emissao_identidade: Data emiss\u00C3\u00A3o da identidade no formato aaaa-MM-dd
        :return: PagePessoas
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['page', 'limit', 'id', 'nome', 'tipo', 'cpf', 'cnpj', 'data_nascimento', 'sexo', 'numero_identidade', 'orgao_expedidor_identidade', 'unidade_federativa_identidade', 'data_emissao_identidade']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method listar_using_get14" % key
                )
            params[key] = val
        del params['kwargs']


        resource_path = '/api/pessoas'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'page' in params:
            query_params['page'] = params['page']
        if 'limit' in params:
            query_params['limit'] = params['limit']
        if 'id' in params:
            query_params['id'] = params['id']
        if 'nome' in params:
            query_params['nome'] = params['nome']
        if 'tipo' in params:
            query_params['tipo'] = params['tipo']
        if 'cpf' in params:
            query_params['cpf'] = params['cpf']
        if 'cnpj' in params:
            query_params['cnpj'] = params['cnpj']
        if 'data_nascimento' in params:
            query_params['dataNascimento'] = params['data_nascimento']
        if 'sexo' in params:
            query_params['sexo'] = params['sexo']
        if 'numero_identidade' in params:
            query_params['numeroIdentidade'] = params['numero_identidade']
        if 'orgao_expedidor_identidade' in params:
            query_params['orgaoExpedidorIdentidade'] = params['orgao_expedidor_identidade']
        if 'unidade_federativa_identidade' in params:
            query_params['unidadeFederativaIdentidade'] = params['unidade_federativa_identidade']
        if 'data_emissao_identidade' in params:
            query_params['dataEmissaoIdentidade'] = params['data_emissao_identidade']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='PagePessoas',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def listar_using_get16(self, **kwargs):
        """
        Lista os Portadores existentes
        Este m\u00C3\u00A9todo permite que sejam listados os portadores cadastrados na base do emissor.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.listar_using_get16(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int page: P\u00C3\u00A1gina solicitada (Default = 0)
        :param int limit: Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 50, Max = 50)
        :param int id_conta: C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o da Conta (id).
        :param int id_produto: C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Produto (id).
        :param int id_pessoa: C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o da Pessoa (id).
        :param int id_parentesco: C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Parentesco (id)
        :param str tipo_portador: Apresenta o tipo do Portador do cart\u00C3\u00A3o, sendo: ('T': Titular, 'A': Adicional).
        :param str nome_impresso: Apresenta o nome a ser impresso no cart\u00C3\u00A3o.
        :param int id_tipo_cartao: Apresenta o c\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o do tipo do cart\u00C3\u00A3o (id), que ser\u00C3\u00A1 utilizado para gerar os cart\u00C3\u00B5es deste portador, vinculados a sua respectiva conta atrav\u00C3\u00A9s do campo idConta.
        :param int flag_ativo: Quanto ativa, indica que o cadastro do Portador est\u00C3\u00A1 ativo, em emissores que realizam este tipo de gest\u00C3\u00A3o.
        :param str data_cadastro_portador: Apresenta a data em que o Portador fora cadastrado, quando possuir esta informa\u00C3\u00A7\u00C3\u00A3o.
        :param str data_cancelamento_portador: Apresenta a data em que o Portador fora cancelado, quando possuir esta informa\u00C3\u00A7\u00C3\u00A3o.
        :return: PagePortador
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['page', 'limit', 'id_conta', 'id_produto', 'id_pessoa', 'id_parentesco', 'tipo_portador', 'nome_impresso', 'id_tipo_cartao', 'flag_ativo', 'data_cadastro_portador', 'data_cancelamento_portador']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method listar_using_get16" % key
                )
            params[key] = val
        del params['kwargs']


        resource_path = '/api/portadores'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'page' in params:
            query_params['page'] = params['page']
        if 'limit' in params:
            query_params['limit'] = params['limit']
        if 'id_conta' in params:
            query_params['idConta'] = params['id_conta']
        if 'id_produto' in params:
            query_params['idProduto'] = params['id_produto']
        if 'id_pessoa' in params:
            query_params['idPessoa'] = params['id_pessoa']
        if 'id_parentesco' in params:
            query_params['idParentesco'] = params['id_parentesco']
        if 'tipo_portador' in params:
            query_params['tipoPortador'] = params['tipo_portador']
        if 'nome_impresso' in params:
            query_params['nomeImpresso'] = params['nome_impresso']
        if 'id_tipo_cartao' in params:
            query_params['idTipoCartao'] = params['id_tipo_cartao']
        if 'flag_ativo' in params:
            query_params['flagAtivo'] = params['flag_ativo']
        if 'data_cadastro_portador' in params:
            query_params['dataCadastroPortador'] = params['data_cadastro_portador']
        if 'data_cancelamento_portador' in params:
            query_params['dataCancelamentoPortador'] = params['data_cancelamento_portador']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='PagePortador',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def listar_using_get17(self, **kwargs):
        """
        Lista os Produtos do Emissor
        Este m\u00C3\u00A9todo permite que sejam listados os Produtos existentes na base de dados do Emissor.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.listar_using_get17(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int page: P\u00C3\u00A1gina solicitada (Default = 0)
        :param int limit: Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 50, Max = 50)
        :param str nome: Descri\u00C3\u00A7\u00C3\u00A3o do Nome do Produto.
        :param int status: Representa o Status do Produto, onde: (\"0\": Inativo), (\"1\": Ativo).
        :param int id_fantasia_basica: C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o da Fantasia B\u00C3\u00A1sica (id) a qual o produto pertence.
        :return: ListaProdutos
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['page', 'limit', 'nome', 'status', 'id_fantasia_basica']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method listar_using_get17" % key
                )
            params[key] = val
        del params['kwargs']


        resource_path = '/api/produtos'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'page' in params:
            query_params['page'] = params['page']
        if 'limit' in params:
            query_params['limit'] = params['limit']
        if 'nome' in params:
            query_params['nome'] = params['nome']
        if 'status' in params:
            query_params['status'] = params['status']
        if 'id_fantasia_basica' in params:
            query_params['idFantasiaBasica'] = params['id_fantasia_basica']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='ListaProdutos',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def listar_using_get2(self, **kwargs):
        """
        Lista os Bancos cadastrados para o Emissor
        Este m\u00C3\u00A9todo permite que sejam listados os Bancos existentes na base de dados do Emissor.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.listar_using_get2(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int page: P\u00C3\u00A1gina solicitada (Default = 0)
        :param int limit: Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 50, Max = 50)
        :return: PageBancos
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['page', 'limit']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method listar_using_get2" % key
                )
            params[key] = val
        del params['kwargs']


        resource_path = '/api/bancos'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'page' in params:
            query_params['page'] = params['page']
        if 'limit' in params:
            query_params['limit'] = params['limit']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='PageBancos',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def listar_using_get21(self, **kwargs):
        """
        Lista os Telefones cadastrados no Emissor
        Este m\u00C3\u00A9todo permite que sejam listados os Telefones existentes na base de dados do Emissor.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.listar_using_get21(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int page: P\u00C3\u00A1gina solicitada (Default = 0)
        :param int limit: Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 50, Max = 50)
        :param int id: C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Telefone (id).
        :param int id_tipo_telefone: C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Tipo do Telefone (id).
        :param int id_pessoa: C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o da Pessoa (id) a qual o telefone pertence.
        :param str ddd: C\u00C3\u00B3digo DDD do telefone (id).
        :param str telefone: N\u00C3\u00BAmero do telefone.
        :param str ramal: N\u00C3\u00BAmero do ramal.
        :param int status: Apresenta o Status do Telefone, onde: '0': Inativo e '1': Ativo
        :return: PageTelefones
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['page', 'limit', 'id', 'id_tipo_telefone', 'id_pessoa', 'ddd', 'telefone', 'ramal', 'status']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method listar_using_get21" % key
                )
            params[key] = val
        del params['kwargs']


        resource_path = '/api/telefones'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'page' in params:
            query_params['page'] = params['page']
        if 'limit' in params:
            query_params['limit'] = params['limit']
        if 'id' in params:
            query_params['id'] = params['id']
        if 'id_tipo_telefone' in params:
            query_params['idTipoTelefone'] = params['id_tipo_telefone']
        if 'id_pessoa' in params:
            query_params['idPessoa'] = params['id_pessoa']
        if 'ddd' in params:
            query_params['ddd'] = params['ddd']
        if 'telefone' in params:
            query_params['telefone'] = params['telefone']
        if 'ramal' in params:
            query_params['ramal'] = params['ramal']
        if 'status' in params:
            query_params['status'] = params['status']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='PageTelefones',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def listar_using_get23(self, **kwargs):
        """
        Lista as op\u00C3\u00B5es de Tipos de Endere\u00C3\u00A7os do Emissor 
        Este m\u00C3\u00A9todo permite que sejam listados os Tipos de Endere\u00C3\u00A7os existentes na base de dados do Emissor.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.listar_using_get23(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int page: P\u00C3\u00A1gina solicitada (Default = 0)
        :param int limit: Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 50, Max = 50)
        :param int id: C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Tipo do Endere\u00C3\u00A7o (id)
        :param str nome: Nome do Tipo do Endere\u00C3\u00A7o
        :return: PageTiposEndereco
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['page', 'limit', 'id', 'nome']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method listar_using_get23" % key
                )
            params[key] = val
        del params['kwargs']


        resource_path = '/api/tipos-enderecos'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'page' in params:
            query_params['page'] = params['page']
        if 'limit' in params:
            query_params['limit'] = params['limit']
        if 'id' in params:
            query_params['id'] = params['id']
        if 'nome' in params:
            query_params['nome'] = params['nome']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='PageTiposEndereco',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def listar_using_get25(self, **kwargs):
        """
        Lista os Tipos de Telefones
        Este m\u00C3\u00A9todo permite que sejam listados os Tipos de Telefones existentes na base de dados do Emissor.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.listar_using_get25(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int page: P\u00C3\u00A1gina solicitada (Default = 0)
        :param int limit: Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 50, Max = 50)
        :param int id: C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Tipo do Telefone (id).
        :param str nome: Nome do Tipo do Telefone
        :return: PageTipoTelefones
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['page', 'limit', 'id', 'nome']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method listar_using_get25" % key
                )
            params[key] = val
        del params['kwargs']


        resource_path = '/api/tipos-telefones'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'page' in params:
            query_params['page'] = params['page']
        if 'limit' in params:
            query_params['limit'] = params['limit']
        if 'id' in params:
            query_params['id'] = params['id']
        if 'nome' in params:
            query_params['nome'] = params['nome']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='PageTipoTelefones',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def listar_using_get8(self, **kwargs):
        """
        Lista os Endere\u00C3\u00A7os cadastrados para o Emissor
        Este m\u00C3\u00A9todo permite que sejam listados os Endere\u00C3\u00A7os existentes na base de dados do Emissor.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.listar_using_get8(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int page: P\u00C3\u00A1gina solicitada (Default = 0)
        :param int limit: Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 50, Max = 50)
        :param int id: C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Endere\u00C3\u00A7o (id).
        :param int id_pessoa: C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o da Pessoa a qual o endere\u00C3\u00A7o pertence (id)
        :param int id_tipo_endereco: C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o da Tipo Endere\u00C3\u00A7o (id)
        :param str cep: Apresenta o C\u00C3\u00B3digo de Endere\u00C3\u00A7amento Postal (CEP)
        :param str logradouro: Apresenta o nome do Logradouro
        :param int numero: Apresenta o n\u00C3\u00BAmero do endere\u00C3\u00A7o
        :param str complemento: Apresenta descri\u00C3\u00A7oes complementares referente ao endere\u00C3\u00A7o
        :param str ponto_referencia: Apresenta a descri\u00C3\u00A7\u00C3\u00A3o de ponto de refer\u00C3\u00AAncia do endere\u00C3\u00A7o
        :param str bairro: Apresenta nome do bairro
        :param str cidade: Apresenta nome da cidade
        :param str uf: Apresenta sigla da Unidade Federativa
        :param str pais: Apresenta nome do Pais
        :param str data_inclusao: Apresenta a data em que fora cadastrado o Endere\u00C3\u00A7o
        :param str data_ultima_atualizacao: Data em que fora realizada a \u00C3\u00BAltima mudan\u00C3\u00A7a neste registro de endere\u00C3\u00A7o. Quando n\u00C3\u00A3o tiver ocorrido mudan\u00C3\u00A7a, conter\u00C3\u00A1 a mesma informa\u00C3\u00A7\u00C3\u00A3o que o campo dataInclusao
        :return: PageEnderecos
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['page', 'limit', 'id', 'id_pessoa', 'id_tipo_endereco', 'cep', 'logradouro', 'numero', 'complemento', 'ponto_referencia', 'bairro', 'cidade', 'uf', 'pais', 'data_inclusao', 'data_ultima_atualizacao']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method listar_using_get8" % key
                )
            params[key] = val
        del params['kwargs']


        resource_path = '/api/enderecos'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'page' in params:
            query_params['page'] = params['page']
        if 'limit' in params:
            query_params['limit'] = params['limit']
        if 'id' in params:
            query_params['id'] = params['id']
        if 'id_pessoa' in params:
            query_params['idPessoa'] = params['id_pessoa']
        if 'id_tipo_endereco' in params:
            query_params['idTipoEndereco'] = params['id_tipo_endereco']
        if 'cep' in params:
            query_params['cep'] = params['cep']
        if 'logradouro' in params:
            query_params['logradouro'] = params['logradouro']
        if 'numero' in params:
            query_params['numero'] = params['numero']
        if 'complemento' in params:
            query_params['complemento'] = params['complemento']
        if 'ponto_referencia' in params:
            query_params['pontoReferencia'] = params['ponto_referencia']
        if 'bairro' in params:
            query_params['bairro'] = params['bairro']
        if 'cidade' in params:
            query_params['cidade'] = params['cidade']
        if 'uf' in params:
            query_params['uf'] = params['uf']
        if 'pais' in params:
            query_params['pais'] = params['pais']
        if 'data_inclusao' in params:
            query_params['dataInclusao'] = params['data_inclusao']
        if 'data_ultima_atualizacao' in params:
            query_params['dataUltimaAtualizacao'] = params['data_ultima_atualizacao']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='PageEnderecos',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def salvar_pessoa_fisica_aprovada_using_post(self, pessoa_persist, **kwargs):
        """
        Cadastro de Conta e Pessoa Fisica
        Permite realizar o cadastro de uma Conta para um cliente do tipo Pessoa F\u00C3\u00ADsica, recebendo nesta opera\u00C3\u00A7\u00C3\u00A3o todos os dados cadastrais que se fazem necess\u00C3\u00A1rios para isso. Uma vez criado, poder\u00C3\u00A1 ser acionado o m\u00C3\u00A9todo de 'Gera\u00C3\u00A7\u00C3\u00A3o de Cart\u00C3\u00A3o' para o cliente e seus adicionais.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.salvar_pessoa_fisica_aprovada_using_post(pessoa_persist, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param PessoaFisicaAprovadaPersist pessoa_persist: pessoaPersist (required)
        :return: PessoaFisicaAprovadaResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['pessoa_persist']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method salvar_pessoa_fisica_aprovada_using_post" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'pessoa_persist' is set
        if ('pessoa_persist' not in params) or (params['pessoa_persist'] is None):
            raise ValueError("Missing the required parameter `pessoa_persist` when calling `salvar_pessoa_fisica_aprovada_using_post`")

        resource_path = '/api/clientes-pessoas-fisicas'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'pessoa_persist' in params:
            body_params = params['pessoa_persist']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='PessoaFisicaAprovadaResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def salvar_pessoa_juridica_aprovada_using_post(self, pessoa_persist, **kwargs):
        """
        Cadastro de Conta e Pessoa Jur\u00C3\u00ADdica
        Cadastro de Conta e Pessoa Jur\u00C3\u00ADdica Permite realizar o cadastro de uma Conta para um cliente do tipo Pessoa Jur\u00C3\u00ADdica, recebendo nesta opera\u00C3\u00A7\u00C3\u00A3o todos os dados cadastrais que se fazem necess\u00C3\u00A1rios para isso, inclu\u00C3\u00ADndo o registro de cada um dos s\u00C3\u00B3cios. Uma vez criado, poder\u00C3\u00A1 ser acionado o m\u00C3\u00A9todo de 'Gera\u00C3\u00A7\u00C3\u00A3o de Cart\u00C3\u00A3o' para o cliente e cada um dos s\u00C3\u00B3cios vinculados.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.salvar_pessoa_juridica_aprovada_using_post(pessoa_persist, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param PessoaJuridicaAprovadaPersist pessoa_persist: pessoaPersist (required)
        :return: PessoaJuridicaAprovadaResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['pessoa_persist']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method salvar_pessoa_juridica_aprovada_using_post" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'pessoa_persist' is set
        if ('pessoa_persist' not in params) or (params['pessoa_persist'] is None):
            raise ValueError("Missing the required parameter `pessoa_persist` when calling `salvar_pessoa_juridica_aprovada_using_post`")

        resource_path = '/api/clientes-pessoas-juridicas'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'pessoa_persist' in params:
            body_params = params['pessoa_persist']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='PessoaJuridicaAprovadaResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def salvar_using_post10(self, **kwargs):
        """
        Realiza o cadastro de um novo Telefone
        Este m\u00C3\u00A9todo permite que seja cadastrado um novo Telefone na base de dados do Emissor.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.salvar_using_post10(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id_tipo_telefone: C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Tipo do Telefone (id).
        :param int id_pessoa: C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o da Pessoa (id) a qual o telefone pertence.
        :param str ddd: C\u00C3\u00B3digo DDD do telefone (id).
        :param str telefone: N\u00C3\u00BAmero do telefone.
        :param str ramal: N\u00C3\u00BAmero do ramal.
        :return: Telefone
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id_tipo_telefone', 'id_pessoa', 'ddd', 'telefone', 'ramal']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method salvar_using_post10" % key
                )
            params[key] = val
        del params['kwargs']


        resource_path = '/api/telefones'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'id_tipo_telefone' in params:
            query_params['idTipoTelefone'] = params['id_tipo_telefone']
        if 'id_pessoa' in params:
            query_params['idPessoa'] = params['id_pessoa']
        if 'ddd' in params:
            query_params['ddd'] = params['ddd']
        if 'telefone' in params:
            query_params['telefone'] = params['telefone']
        if 'ramal' in params:
            query_params['ramal'] = params['ramal']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='Telefone',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def salvar_using_post4(self, **kwargs):
        """
        Realiza o cadastro de um novo Endere\u00C3\u00A7o
        Este m\u00C3\u00A9todo permite que seja cadastrado um novo Endere\u00C3\u00A7o na base de dados do Emissor.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.salvar_using_post4(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id_pessoa: C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o da Pessoa a qual o endere\u00C3\u00A7o pertence (id)
        :param int id_tipo_endereco: C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o da Tipo Endere\u00C3\u00A7o (id)
        :param str cep: Apresenta o C\u00C3\u00B3digo de Endere\u00C3\u00A7amento Postal (CEP) no formaro '58800000'
        :param str logradouro: Apresenta o nome do Logradouro
        :param int numero: Apresenta o n\u00C3\u00BAmero do endere\u00C3\u00A7o
        :param str complemento: Apresenta descri\u00C3\u00A7oes complementares referente ao endere\u00C3\u00A7o
        :param str ponto_referencia: Apresenta a descri\u00C3\u00A7\u00C3\u00A3o de ponto de refer\u00C3\u00AAncia do endere\u00C3\u00A7o
        :param str bairro: Apresenta nome do bairro
        :param str cidade: Apresenta nome da cidade
        :param str uf: Apresenta sigla da Unidade Federativa
        :param str pais: Apresenta nome do Pais
        :return: Endereco
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id_pessoa', 'id_tipo_endereco', 'cep', 'logradouro', 'numero', 'complemento', 'ponto_referencia', 'bairro', 'cidade', 'uf', 'pais']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method salvar_using_post4" % key
                )
            params[key] = val
        del params['kwargs']


        resource_path = '/api/enderecos'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'id_pessoa' in params:
            query_params['idPessoa'] = params['id_pessoa']
        if 'id_tipo_endereco' in params:
            query_params['idTipoEndereco'] = params['id_tipo_endereco']
        if 'cep' in params:
            query_params['cep'] = params['cep']
        if 'logradouro' in params:
            query_params['logradouro'] = params['logradouro']
        if 'numero' in params:
            query_params['numero'] = params['numero']
        if 'complemento' in params:
            query_params['complemento'] = params['complemento']
        if 'ponto_referencia' in params:
            query_params['pontoReferencia'] = params['ponto_referencia']
        if 'bairro' in params:
            query_params['bairro'] = params['bairro']
        if 'cidade' in params:
            query_params['cidade'] = params['cidade']
        if 'uf' in params:
            query_params['uf'] = params['uf']
        if 'pais' in params:
            query_params['pais'] = params['pais']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='Endereco',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def salvar_using_post7(self, **kwargs):
        """
        Salvar os detalhes de uma determinada Pessoa
        Este m\u00C3\u00A9todo permite que seja incluido na base do emissor os detalhes de uma determinada Pessoa.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.salvar_using_post7(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id_pessoa: Apresenta o c\u00C3\u00B3digo identificador da pessoa
        :param str nome_mae: Apresenta o nome da m\u00C3\u00A3e da pessoa fisica
        :param int id_estado_civil: Id Estado civil da pessoa fisica
        :param str profissao: Profiss\u00C3\u00A3o da pessoa fisica
        :param int id_natureza_ocupacao: Id Natureza Ocupa\u00C3\u00A7\u00C3\u00A3o da pessoa fisica
        :param int id_nacionalidade: Id Nacionalidade da pessoa fisica
        :param int numero_agencia: N\u00C3\u00BAmero da ag\u00C3\u00AAncia.
        :param str numero_conta_corrente: N\u00C3\u00BAmero da conta corrente.
        :param str email: Email da pessoa fisica
        :param str nome_empresa: Nome que deve ser impresso no cart\u00C3\u00A3o
        :return: PessoaDetalheResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id_pessoa', 'nome_mae', 'id_estado_civil', 'profissao', 'id_natureza_ocupacao', 'id_nacionalidade', 'numero_agencia', 'numero_conta_corrente', 'email', 'nome_empresa']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method salvar_using_post7" % key
                )
            params[key] = val
        del params['kwargs']


        resource_path = '/api/pessoas-detalhes'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'id_pessoa' in params:
            query_params['idPessoa'] = params['id_pessoa']
        if 'nome_mae' in params:
            query_params['nomeMae'] = params['nome_mae']
        if 'id_estado_civil' in params:
            query_params['idEstadoCivil'] = params['id_estado_civil']
        if 'profissao' in params:
            query_params['profissao'] = params['profissao']
        if 'id_natureza_ocupacao' in params:
            query_params['idNaturezaOcupacao'] = params['id_natureza_ocupacao']
        if 'id_nacionalidade' in params:
            query_params['idNacionalidade'] = params['id_nacionalidade']
        if 'numero_agencia' in params:
            query_params['numeroAgencia'] = params['numero_agencia']
        if 'numero_conta_corrente' in params:
            query_params['numeroContaCorrente'] = params['numero_conta_corrente']
        if 'email' in params:
            query_params['email'] = params['email']
        if 'nome_empresa' in params:
            query_params['nomeEmpresa'] = params['nome_empresa']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='PessoaDetalheResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def salvar_using_post8(self, nome, tipo, **kwargs):
        """
        Realiza o cadastro de um nova Pessoa
        Este m\u00C3\u00A9todo permite que seja cadastrado uma nova Pessoa na base de dados do Emissor.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.salvar_using_post8(nome, tipo, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str nome: Apresenta o 'Nome Completo da PF' ou o 'Nome Completo da Raz\u00C3\u00A3o Social (Nome Empresarial)'. (required)
        :param str tipo: C\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o do tipo da Pessoa, sendo: (\"PF\": Pessoa F\u00C3\u00ADsica), (\"PJ\": Pessoa Jur\u00C3\u00ADdica). (required)
        :param str cpf: N\u00C3\u00BAmero do CPF, quando PF.
        :param str cnpj: N\u00C3\u00BAmero do CNPJ, quando PJ.
        :param str data_nascimento: Data de Nascimento da Pessoa, quando PF, ou a Data de Abertura da Empresa, quando PJ. Essa data deve ser informada no formato aaaa-MM-dd.
        :param str sexo: C\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o do sexo da Pessoa, quando PF, sendo: (\"M\": Masculino), (\"F\": Feminino), (\"O\": Outro), (\"N\": N\u00C3\u00A3o Especificado).
        :param str numero_identidade: N\u00C3\u00BAmero da Identidade.
        :param str orgao_expedidor_identidade: Org\u00C3\u00A3o expedidor do Identidade.
        :param str unidade_federativa_identidade: Sigla da Unidade Federativa de onde foi expedido a Identidade
        :param str data_emissao_identidade: Data emiss\u00C3\u00A3o da Identidade.
        :return: Pessoa
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['nome', 'tipo', 'cpf', 'cnpj', 'data_nascimento', 'sexo', 'numero_identidade', 'orgao_expedidor_identidade', 'unidade_federativa_identidade', 'data_emissao_identidade']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method salvar_using_post8" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'nome' is set
        if ('nome' not in params) or (params['nome'] is None):
            raise ValueError("Missing the required parameter `nome` when calling `salvar_using_post8`")
        # verify the required parameter 'tipo' is set
        if ('tipo' not in params) or (params['tipo'] is None):
            raise ValueError("Missing the required parameter `tipo` when calling `salvar_using_post8`")

        resource_path = '/api/pessoas'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'nome' in params:
            query_params['nome'] = params['nome']
        if 'tipo' in params:
            query_params['tipo'] = params['tipo']
        if 'cpf' in params:
            query_params['cpf'] = params['cpf']
        if 'cnpj' in params:
            query_params['cnpj'] = params['cnpj']
        if 'data_nascimento' in params:
            query_params['dataNascimento'] = params['data_nascimento']
        if 'sexo' in params:
            query_params['sexo'] = params['sexo']
        if 'numero_identidade' in params:
            query_params['numeroIdentidade'] = params['numero_identidade']
        if 'orgao_expedidor_identidade' in params:
            query_params['orgaoExpedidorIdentidade'] = params['orgao_expedidor_identidade']
        if 'unidade_federativa_identidade' in params:
            query_params['unidadeFederativaIdentidade'] = params['unidade_federativa_identidade']
        if 'data_emissao_identidade' in params:
            query_params['dataEmissaoIdentidade'] = params['data_emissao_identidade']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='Pessoa',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response
