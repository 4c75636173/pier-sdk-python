# coding: utf-8

"""
CartaoApi.py
Copyright 2016 SmartBear Software

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
"""

from __future__ import absolute_import

import sys
import os

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class CartaoApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def alterar_status_impressao_using_put(self, id, **kwargs):
        """
        Realiza a altera\u00C3\u00A7\u00C3\u00A3o do Status de Impress\u00C3\u00A3o do Cart\u00C3\u00A3o
        Este m\u00C3\u00A9todo permite que uma Aplica\u00C3\u00A7\u00C3\u00A3o que realize a impress\u00C3\u00A3o de cart\u00C3\u00B5es possa indicar que um determinado idCartao fora impresso ou est\u00C3\u00A1 em processo de impress\u00C3\u00A3o. Para isso, basta informar o respectivo c\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o do cart\u00C3\u00A3o (id) que deseja ter seu um determinado id_status_impressao atribu\u00C3\u00ADdo a ele. Por padr\u00C3\u00A3o, cart\u00C3\u00B5es provis\u00C3\u00B3rios ou que j\u00C3\u00A1 tenham sido inclu\u00C3\u00ADdos em um arquivo para impress\u00C3\u00A3o via gr\u00C3\u00A1fica ter\u00C3\u00A3o esta requisi\u00C3\u00A7\u00C3\u00A3o negada, se utilizada.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.alterar_status_impressao_using_put(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Cart\u00C3\u00A3o (id). (required)
        :param int id_status_impressao: C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Status Impress\u00C3\u00A3o (Id).
        :return: HistoricoImpressaoCartao
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'id_status_impressao']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method alterar_status_impressao_using_put" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `alterar_status_impressao_using_put`")

        resource_path = '/api/cartoes/{id}/alterar-status-impressao'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}
        if 'id_status_impressao' in params:
            query_params['id_status_impressao'] = params['id_status_impressao']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['access_token']

        response = self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='HistoricoImpressaoCartao',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def atribuir_pessoa_using_put(self, id, id_pessoa, **kwargs):
        """
        Realiza a atribui\u00C3\u00A7\u00C3\u00A3o de um cart\u00C3\u00A3o pr\u00C3\u00A9-pago a uma pessoa
        Esta m\u00C3\u00A9todo permite que um cart\u00C3\u00A3o pr\u00C3\u00A9-pago impresso de forma avulsa e an\u00C3\u00B4nimo seja atribu\u00C3\u00ADdo a uma pessoa para que esta passe a ser a portadora titular dele.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.atribuir_pessoa_using_put(id, id_pessoa, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Cart\u00C3\u00A3o (id) (required)
        :param int id_pessoa: C\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o de uma Pessoa (id). (required)
        :return: Cartao
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'id_pessoa']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method atribuir_pessoa_using_put" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `atribuir_pessoa_using_put`")
        # verify the required parameter 'id_pessoa' is set
        if ('id_pessoa' not in params) or (params['id_pessoa'] is None):
            raise ValueError("Missing the required parameter `id_pessoa` when calling `atribuir_pessoa_using_put`")

        resource_path = '/api/cartoes/{id}/atribuir-pessoa'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}
        if 'id_pessoa' in params:
            query_params['id_pessoa'] = params['id_pessoa']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['access_token']

        response = self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='Cartao',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def bloquear_using_put(self, id, id_status, observacao, **kwargs):
        """
        Realiza o bloqueio de um determinado Cart\u00C3\u00A3o
        Este m\u00C3\u00A9todo permite a realiza\u00C3\u00A7\u00C3\u00A3o do bloqueio (tempor\u00C3\u00A1rio) ou do cancelamento (definitivo) de um determinado cart\u00C3\u00A3o a partir do seu c\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o (id). Para isso, \u00C3\u00A9 preciso informar qual o motivo deste bloqueio que nada mais \u00C3\u00A9 do que atribuir um novo StatusCartao para ele dentre as op\u00C3\u00A7\u00C3\u00B5es praticadas pelo emissor.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.bloquear_using_put(id, id_status, observacao, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Cart\u00C3\u00A3o (id). (required)
        :param int id_status: C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Novo Status Cart\u00C3\u00A3o. (required)
        :param str observacao: Texto informando uma observa\u00C3\u00A7\u00C3\u00A3o sobre o bloqueio. (required)
        :return: Cartao
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'id_status', 'observacao']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bloquear_using_put" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `bloquear_using_put`")
        # verify the required parameter 'id_status' is set
        if ('id_status' not in params) or (params['id_status'] is None):
            raise ValueError("Missing the required parameter `id_status` when calling `bloquear_using_put`")
        # verify the required parameter 'observacao' is set
        if ('observacao' not in params) or (params['observacao'] is None):
            raise ValueError("Missing the required parameter `observacao` when calling `bloquear_using_put`")

        resource_path = '/api/cartoes/{id}/bloquear'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}
        if 'id_status' in params:
            query_params['id_status'] = params['id_status']
        if 'observacao' in params:
            query_params['observacao'] = params['observacao']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['access_token']

        response = self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='Cartao',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def cadastrar_alterar_senha_using_put(self, id, senha, **kwargs):
        """
        Realiza o cadastro ou altera\u00C3\u00A7\u00C3\u00A3o da senha de um Cart\u00C3\u00A3o
        Esta opera\u00C3\u00A7\u00C3\u00A3o tem como objetivo permitir que o portador de um determinado cart\u00C3\u00A3o possa definir uma senha a sua escolha.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.cadastrar_alterar_senha_using_put(id, senha, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Cart\u00C3\u00A3o (id). (required)
        :param str senha: Senha para ser cadastrada ou alterada. (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'senha']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cadastrar_alterar_senha_using_put" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `cadastrar_alterar_senha_using_put`")
        # verify the required parameter 'senha' is set
        if ('senha' not in params) or (params['senha'] is None):
            raise ValueError("Missing the required parameter `senha` when calling `cadastrar_alterar_senha_using_put`")

        resource_path = '/api/cartoes/{id}/alterar-senha'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'id' in params:
            query_params['id'] = params['id']

        header_params = {}
        if 'senha' in params:
            header_params['senha'] = params['senha']

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['access_token']

        response = self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='str',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def consultar_limite_disponibilidade_using_get(self, id, **kwargs):
        """
        Apresenta os limites do Portador do Cart\u00C3\u00A3o
        Este m\u00C3\u00A9todo permite consultar os Limites configurados para o Portador de um determinado Cart\u00C3\u00A3o, seja ele o titular da conta ou um adicional, a partir do c\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o do Cart\u00C3\u00A3o (id).

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.consultar_limite_disponibilidade_using_get(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Cart\u00C3\u00A3o (id). (required)
        :return: LimiteDisponibilidade
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method consultar_limite_disponibilidade_using_get" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `consultar_limite_disponibilidade_using_get`")

        resource_path = '/api/cartoes/{id}/limites-disponibilidades'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['access_token']

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='LimiteDisponibilidade',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def consultar_portador_using_get(self, id, **kwargs):
        """
        Apresenta os dados do Portador do Cart\u00C3\u00A3o
        Este m\u00C3\u00A9todo permite consultar as informa\u00C3\u00A7\u00C3\u00B5es do Portador de um determinado Cart\u00C3\u00A3o a partir do c\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o do Cart\u00C3\u00A3o (id).

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.consultar_portador_using_get(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Cart\u00C3\u00A3o (id). (required)
        :return: Portador
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method consultar_portador_using_get" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `consultar_portador_using_get`")

        resource_path = '/api/cartoes/{id}/portadores'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['access_token']

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='Portador',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def consultar_using_get(self, id, **kwargs):
        """
        Apresenta os dados de um determinado Cart\u00C3\u00A3o
        Este m\u00C3\u00A9todo permite consultar as informa\u00C3\u00A7\u00C3\u00B5es b\u00C3\u00A1sicas de um determinado Cart\u00C3\u00A3o a partir do seu c\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o (id).

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.consultar_using_get(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Cart\u00C3\u00A3o (id). (required)
        :return: Cartao
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method consultar_using_get" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `consultar_using_get`")

        resource_path = '/api/cartoes/{id}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['access_token']

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='Cartao',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def desbloquear_using_put(self, id, **kwargs):
        """
        Realiza o desbloqueio de um determinado Cart\u00C3\u00A3o
        Este m\u00C3\u00A9todo permite que seja desbloqueado um determinado cart\u00C3\u00A3o a partir do seu c\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o (id).

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.desbloquear_using_put(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Cart\u00C3\u00A3o (id). (required)
        :return: Cartao
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method desbloquear_using_put" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `desbloquear_using_put`")

        resource_path = '/api/cartoes/{id}/desbloquear'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['access_token']

        response = self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='Cartao',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def listar_lotes_cartoes_pre_pagos_using_get(self, **kwargs):
        """
        Permite listar os Lotes de Cart\u00C3\u00B5es Pr\u00C3\u00A9-Pago
        Este m\u00C3\u00A9todo permite que sejam listados os cart\u00C3\u00B5es pr\u00C3\u00A9-pagos existentes na base do emissor.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.listar_lotes_cartoes_pre_pagos_using_get(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int page: P\u00C3\u00A1gina solicitada (Default = 0)
        :param int limit: Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 100, Max = 100)
        :param int id: C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Lote de Cart\u00C3\u00B5es N\u00C3\u00A3o Nominais (id).
        :param int id_origem_comercial: C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o da Origem Comercial (id).
        :param int id_produto: C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Produto (id).
        :param int id_tipo_cartao: C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Tipo do Cart\u00C3\u00A3o (id).
        :param int id_imagem: C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o da Imagem (id).
        :param int id_endereco: C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Endere\u00C3\u00A7o (id).
        :param int quantidade_cartoes: N\u00C3\u00BAmero de cart\u00C3\u00B5es existentes no Lote.
        :param datetime data_cadastro_lote: Data de Cadastro do Lote de Cart\u00C3\u00B5es N\u00C3\u00A3o Nominais.
        :param str usuario_cadastro: Nome do Usu\u00C3\u00A1rio que criou o Lote.
        :param int flag_processado: Indica o Status de Processamento do Lote.
        :return: PageCartoes
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['page', 'limit', 'id', 'id_origem_comercial', 'id_produto', 'id_tipo_cartao', 'id_imagem', 'id_endereco', 'quantidade_cartoes', 'data_cadastro_lote', 'usuario_cadastro', 'flag_processado']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method listar_lotes_cartoes_pre_pagos_using_get" % key
                )
            params[key] = val
        del params['kwargs']


        resource_path = '/api/cartoes/pre-pagos/lotes'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'page' in params:
            query_params['page'] = params['page']
        if 'limit' in params:
            query_params['limit'] = params['limit']
        if 'id' in params:
            query_params['id'] = params['id']
        if 'id_origem_comercial' in params:
            query_params['idOrigemComercial'] = params['id_origem_comercial']
        if 'id_produto' in params:
            query_params['idProduto'] = params['id_produto']
        if 'id_tipo_cartao' in params:
            query_params['idTipoCartao'] = params['id_tipo_cartao']
        if 'id_imagem' in params:
            query_params['idImagem'] = params['id_imagem']
        if 'id_endereco' in params:
            query_params['idEndereco'] = params['id_endereco']
        if 'quantidade_cartoes' in params:
            query_params['quantidadeCartoes'] = params['quantidade_cartoes']
        if 'data_cadastro_lote' in params:
            query_params['dataCadastroLote'] = params['data_cadastro_lote']
        if 'usuario_cadastro' in params:
            query_params['usuarioCadastro'] = params['usuario_cadastro']
        if 'flag_processado' in params:
            query_params['flagProcessado'] = params['flag_processado']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['access_token']

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='PageCartoes',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def listar_using_get(self, **kwargs):
        """
        Lista os Cart\u00C3\u00B5es gerados pelo Emissor
        Este m\u00C3\u00A9todo permite que sejam listados os cart\u00C3\u00B5es existentes na base do emissor.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.listar_using_get(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int page: P\u00C3\u00A1gina solicitada (Default = 0)
        :param int limit: Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 100, Max = 100)
        :param int id: C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Cart\u00C3\u00A3o (id).
        :param int id_status_cartao: C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Status do Cart\u00C3\u00A3o (id).
        :param int id_estagio_cartao: C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Est\u00C3\u00A1gio de Impress\u00C3\u00A3o do Cart\u00C3\u00A3o (id).
        :param int id_conta: C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o da Conta a qual o cart\u00C3\u00A3o pertence (id).
        :param int id_pessoa: C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o da Pessoa a qual o cart\u00C3\u00A3o pertence (id)
        :param int id_produto: C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Produto a qual o cart\u00C3\u00A3o pertence (id).
        :param str tipo_portador: Apresenta o tipo do Portador do cart\u00C3\u00A3o, sendo: ('T': Titular, 'A': Adicional).
        :param str numero_cartao: Apresenta o n\u00C3\u00BAmero do cart\u00C3\u00A3o.
        :param str nome_impresso: Apresenta o nome impresso no cart\u00C3\u00A3o.
        :param date data_geracao: Apresenta a data em que o cart\u00C3\u00A3o foi gerado.
        :param date data_status_cartao: Apresenta a data em que o idStatusCartao atual do cart\u00C3\u00A3o fora aplicado, quando houver.
        :param date data_estagio_cartao: Apresenta a data em que o idEstagioCartao atual do cart\u00C3\u00A3o fora aplicado, quando houver.
        :param str data_validade: Apresenta a data de validade do cart\u00C3\u00A3o em formato yyyy-MM, quando houver.
        :param date data_impressao: Apresenta a data em que o cart\u00C3\u00A3o fora impresso, caso impress\u00C3\u00A3o em loja, ou a data em que ele fora inclu\u00C3\u00ADdo no arquivo para impress\u00C3\u00A3o via gr\u00C3\u00A1fica.
        :param str arquivo_impressao: Apresenta o nome do arquivo onde o cart\u00C3\u00A3o fora inclu\u00C3\u00ADdo para impress\u00C3\u00A3o por uma gr\u00C3\u00A1fica, quando houver.
        :param int flag_impressao_origem_comercial: Quando ativa, indica que o cart\u00C3\u00A3o fora impresso na Origem Comercial.
        :param int flag_provisorio: Quando ativa, indica que o cart\u00C3\u00A3o \u00C3\u00A9 provis\u00C3\u00B3rio. Ou seja, \u00C3\u00A9 um cart\u00C3\u00A3o para uso tempor\u00C3\u00A1rio quando se deseja permitir que o cliente transacione sem que ele tenha recebido um cart\u00C3\u00A3o definitivo.
        :param str codigo_desbloqueio: Apresenta um c\u00C3\u00B3digo espec\u00C3\u00ADfico para ser utilizado como vari\u00C3\u00A1vel no processo de desbloqueio do cart\u00C3\u00A3o para emissores que querem usar esta funcionalidade.
        :return: PageCartoes
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['page', 'limit', 'id', 'id_status_cartao', 'id_estagio_cartao', 'id_conta', 'id_pessoa', 'id_produto', 'tipo_portador', 'numero_cartao', 'nome_impresso', 'data_geracao', 'data_status_cartao', 'data_estagio_cartao', 'data_validade', 'data_impressao', 'arquivo_impressao', 'flag_impressao_origem_comercial', 'flag_provisorio', 'codigo_desbloqueio']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method listar_using_get" % key
                )
            params[key] = val
        del params['kwargs']


        resource_path = '/api/cartoes'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'page' in params:
            query_params['page'] = params['page']
        if 'limit' in params:
            query_params['limit'] = params['limit']
        if 'id' in params:
            query_params['id'] = params['id']
        if 'id_status_cartao' in params:
            query_params['idStatusCartao'] = params['id_status_cartao']
        if 'id_estagio_cartao' in params:
            query_params['idEstagioCartao'] = params['id_estagio_cartao']
        if 'id_conta' in params:
            query_params['idConta'] = params['id_conta']
        if 'id_pessoa' in params:
            query_params['idPessoa'] = params['id_pessoa']
        if 'id_produto' in params:
            query_params['idProduto'] = params['id_produto']
        if 'tipo_portador' in params:
            query_params['tipoPortador'] = params['tipo_portador']
        if 'numero_cartao' in params:
            query_params['numeroCartao'] = params['numero_cartao']
        if 'nome_impresso' in params:
            query_params['nomeImpresso'] = params['nome_impresso']
        if 'data_geracao' in params:
            query_params['dataGeracao'] = params['data_geracao']
        if 'data_status_cartao' in params:
            query_params['dataStatusCartao'] = params['data_status_cartao']
        if 'data_estagio_cartao' in params:
            query_params['dataEstagioCartao'] = params['data_estagio_cartao']
        if 'data_validade' in params:
            query_params['dataValidade'] = params['data_validade']
        if 'data_impressao' in params:
            query_params['dataImpressao'] = params['data_impressao']
        if 'arquivo_impressao' in params:
            query_params['arquivoImpressao'] = params['arquivo_impressao']
        if 'flag_impressao_origem_comercial' in params:
            query_params['flagImpressaoOrigemComercial'] = params['flag_impressao_origem_comercial']
        if 'flag_provisorio' in params:
            query_params['flagProvisorio'] = params['flag_provisorio']
        if 'codigo_desbloqueio' in params:
            query_params['codigoDesbloqueio'] = params['codigo_desbloqueio']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['access_token']

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='PageCartoes',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def validar_cartao_chip_bandeirado_using_get(self, numero_cartao, criptograma, **kwargs):
        """
        Permite validar um Cart\u00C3\u00A3o com bandeira Mastercard a partir do chip
        Esta opera\u00C3\u00A7\u00C3\u00A3o tem como objetivo permitir que os Emissores validem o criptograma gerado a partir da leitura de um chip EMV de um Cart\u00C3\u00A3o com bandeira Mastercard a fim de verificar a sua autenticidade. A utiliza\u00C3\u00A7\u00C3\u00A3o desde m\u00C3\u00A9todo tem diversas aplica\u00C3\u00A7\u00C3\u00B5es, sendo a principal delas a de Identifica\u00C3\u00A7\u00C3\u00A3o Positiva do Cart\u00C3\u00A3o antes de permitir que o portador realize transa\u00C3\u00A7\u00C3\u00B5es diversas, como as de compra e saque na modalidade d\u00C3\u00A9bito em conta corrente, dentre outras.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.validar_cartao_chip_bandeirado_using_get(numero_cartao, criptograma, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str numero_cartao: N\u00C3\u00BAmero do cart\u00C3\u00A3o a ser validado. (required)
        :param str criptograma: Criptograma do cart\u00C3\u00A3o no formato de55 (required)
        :return: ValidaCartao
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['numero_cartao', 'criptograma']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method validar_cartao_chip_bandeirado_using_get" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'numero_cartao' is set
        if ('numero_cartao' not in params) or (params['numero_cartao'] is None):
            raise ValueError("Missing the required parameter `numero_cartao` when calling `validar_cartao_chip_bandeirado_using_get`")
        # verify the required parameter 'criptograma' is set
        if ('criptograma' not in params) or (params['criptograma'] is None):
            raise ValueError("Missing the required parameter `criptograma` when calling `validar_cartao_chip_bandeirado_using_get`")

        resource_path = '/api/cartoes/bandeirados/validar-chip'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'numero_cartao' in params:
            query_params['numero_cartao'] = params['numero_cartao']
        if 'criptograma' in params:
            query_params['criptograma'] = params['criptograma']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['access_token']

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='ValidaCartao',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def validar_cartao_digitado_bandeirado_using_get(self, numero_cartao, nome_portador, data_validade, codigo_seguranca, **kwargs):
        """
        Permite validar um Cart\u00C3\u00A3o bandeirado a partir dos dados Impressos
        Esta opera\u00C3\u00A7\u00C3\u00A3o tem como objetivo permitir que os Emissores validem a autenticidade de um determinado Cart\u00C3\u00A3o a partir do envio dos dados sens\u00C3\u00ADveis impressos nele. A utiliza\u00C3\u00A7\u00C3\u00A3o desde m\u00C3\u00A9todo tem diversas aplica\u00C3\u00A7\u00C3\u00B5es, sendo a principal delas a de Identifica\u00C3\u00A7\u00C3\u00A3o Positiva do Cart\u00C3\u00A3o para a realiza\u00C3\u00A7\u00C3\u00A3o de transa\u00C3\u00A7\u00C3\u00B5es e-commerce ou por meio de Centrais de Atendimento Eletr\u00C3\u00B4nico (URA), dentre outras.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.validar_cartao_digitado_bandeirado_using_get(numero_cartao, nome_portador, data_validade, codigo_seguranca, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str numero_cartao: N\u00C3\u00BAmero do cart\u00C3\u00A3o a ser validado. (required)
        :param str nome_portador: Nome do portador do cart\u00C3\u00A3o (required)
        :param str data_validade: Data de validade do cart\u00C3\u00A3o no formato yyyy-MM (required)
        :param str codigo_seguranca: C\u00C3\u00B3digo de seguran\u00C3\u00A7a do cart\u00C3\u00A3o com tr\u00C3\u00AAs n\u00C3\u00BAmeros (required)
        :return: ValidaCartao
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['numero_cartao', 'nome_portador', 'data_validade', 'codigo_seguranca']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method validar_cartao_digitado_bandeirado_using_get" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'numero_cartao' is set
        if ('numero_cartao' not in params) or (params['numero_cartao'] is None):
            raise ValueError("Missing the required parameter `numero_cartao` when calling `validar_cartao_digitado_bandeirado_using_get`")
        # verify the required parameter 'nome_portador' is set
        if ('nome_portador' not in params) or (params['nome_portador'] is None):
            raise ValueError("Missing the required parameter `nome_portador` when calling `validar_cartao_digitado_bandeirado_using_get`")
        # verify the required parameter 'data_validade' is set
        if ('data_validade' not in params) or (params['data_validade'] is None):
            raise ValueError("Missing the required parameter `data_validade` when calling `validar_cartao_digitado_bandeirado_using_get`")
        # verify the required parameter 'codigo_seguranca' is set
        if ('codigo_seguranca' not in params) or (params['codigo_seguranca'] is None):
            raise ValueError("Missing the required parameter `codigo_seguranca` when calling `validar_cartao_digitado_bandeirado_using_get`")

        resource_path = '/api/cartoes/bandeirados/validar-digitado'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'numero_cartao' in params:
            query_params['numero_cartao'] = params['numero_cartao']
        if 'nome_portador' in params:
            query_params['nome_portador'] = params['nome_portador']
        if 'data_validade' in params:
            query_params['data_validade'] = params['data_validade']
        if 'codigo_seguranca' in params:
            query_params['codigo_seguranca'] = params['codigo_seguranca']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['access_token']

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='ValidaCartao',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def validar_cartao_digitado_nao_bandeirado_using_get(self, numero_cartao, nome_portador, data_validade, codigo_seguranca, **kwargs):
        """
        Permite validar um Cart\u00C3\u00A3o a partir dos dados Impressos
        Esta opera\u00C3\u00A7\u00C3\u00A3o tem como objetivo permitir que os Emissores validem a autenticidade de um determinado Cart\u00C3\u00A3o a partir do envio dos dados sens\u00C3\u00ADveis impressos nele. A utiliza\u00C3\u00A7\u00C3\u00A3o desde m\u00C3\u00A9todo tem diversas aplica\u00C3\u00A7\u00C3\u00B5es, sendo a principal delas a de Identifica\u00C3\u00A7\u00C3\u00A3o Positiva do Cart\u00C3\u00A3o para a realiza\u00C3\u00A7\u00C3\u00A3o de transa\u00C3\u00A7\u00C3\u00B5es e-commerce ou por meio de Centrais de Atendimento Eletr\u00C3\u00B4nico (URA), dentre outras.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.validar_cartao_digitado_nao_bandeirado_using_get(numero_cartao, nome_portador, data_validade, codigo_seguranca, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str numero_cartao: N\u00C3\u00BAmero do cart\u00C3\u00A3o a ser validado. (required)
        :param str nome_portador: Nome do portador do cart\u00C3\u00A3o (required)
        :param str data_validade: Data de validade do cart\u00C3\u00A3o no formato yyyy-MM (required)
        :param str codigo_seguranca: C\u00C3\u00B3digo de seguran\u00C3\u00A7a do cart\u00C3\u00A3o com tr\u00C3\u00AAs n\u00C3\u00BAmeros (required)
        :return: ValidaCartao
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['numero_cartao', 'nome_portador', 'data_validade', 'codigo_seguranca']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method validar_cartao_digitado_nao_bandeirado_using_get" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'numero_cartao' is set
        if ('numero_cartao' not in params) or (params['numero_cartao'] is None):
            raise ValueError("Missing the required parameter `numero_cartao` when calling `validar_cartao_digitado_nao_bandeirado_using_get`")
        # verify the required parameter 'nome_portador' is set
        if ('nome_portador' not in params) or (params['nome_portador'] is None):
            raise ValueError("Missing the required parameter `nome_portador` when calling `validar_cartao_digitado_nao_bandeirado_using_get`")
        # verify the required parameter 'data_validade' is set
        if ('data_validade' not in params) or (params['data_validade'] is None):
            raise ValueError("Missing the required parameter `data_validade` when calling `validar_cartao_digitado_nao_bandeirado_using_get`")
        # verify the required parameter 'codigo_seguranca' is set
        if ('codigo_seguranca' not in params) or (params['codigo_seguranca'] is None):
            raise ValueError("Missing the required parameter `codigo_seguranca` when calling `validar_cartao_digitado_nao_bandeirado_using_get`")

        resource_path = '/api/cartoes/nao-bandeirados/validar-digitado'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'numero_cartao' in params:
            query_params['numero_cartao'] = params['numero_cartao']
        if 'nome_portador' in params:
            query_params['nome_portador'] = params['nome_portador']
        if 'data_validade' in params:
            query_params['data_validade'] = params['data_validade']
        if 'codigo_seguranca' in params:
            query_params['codigo_seguranca'] = params['codigo_seguranca']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['access_token']

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='ValidaCartao',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def validar_cartao_tarja_bandeirado_using_get(self, numero_cartao, trilha1, trilha2, **kwargs):
        """
        Permite validar um Cart\u00C3\u00A3o Bandeirado a partir da Tarja
        Esta opera\u00C3\u00A7\u00C3\u00A3o tem como objetivo permitir que os Emissores validem a autenticidade de um determinado Cart\u00C3\u00A3o a partir da leitura da tarja magn\u00C3\u00A9tica do mesmo. A utiliza\u00C3\u00A7\u00C3\u00A3o desde m\u00C3\u00A9todo tem diversas aplica\u00C3\u00A7\u00C3\u00B5es, sendo a principal delas a de Identifica\u00C3\u00A7\u00C3\u00A3o Positiva do Cart\u00C3\u00A3o antes de permitir que o portador realize transa\u00C3\u00A7\u00C3\u00B5es diversas, como as de compra e saque na modalidade d\u00C3\u00A9bito em conta corrente, dentre outras.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.validar_cartao_tarja_bandeirado_using_get(numero_cartao, trilha1, trilha2, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str numero_cartao: N\u00C3\u00BAmero do cart\u00C3\u00A3o a ser validado. (required)
        :param str trilha1: Trilha 1 do cart\u00C3\u00A3o a ser validado (required)
        :param str trilha2: Trilha 2 do cart\u00C3\u00A3o a ser validado (required)
        :return: ValidaCartao
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['numero_cartao', 'trilha1', 'trilha2']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method validar_cartao_tarja_bandeirado_using_get" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'numero_cartao' is set
        if ('numero_cartao' not in params) or (params['numero_cartao'] is None):
            raise ValueError("Missing the required parameter `numero_cartao` when calling `validar_cartao_tarja_bandeirado_using_get`")
        # verify the required parameter 'trilha1' is set
        if ('trilha1' not in params) or (params['trilha1'] is None):
            raise ValueError("Missing the required parameter `trilha1` when calling `validar_cartao_tarja_bandeirado_using_get`")
        # verify the required parameter 'trilha2' is set
        if ('trilha2' not in params) or (params['trilha2'] is None):
            raise ValueError("Missing the required parameter `trilha2` when calling `validar_cartao_tarja_bandeirado_using_get`")

        resource_path = '/api/cartoes/bandeirados/validar-tarja'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'numero_cartao' in params:
            query_params['numero_cartao'] = params['numero_cartao']
        if 'trilha1' in params:
            query_params['trilha1'] = params['trilha1']
        if 'trilha2' in params:
            query_params['trilha2'] = params['trilha2']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['access_token']

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='ValidaCartao',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def validar_senha_using_get(self, id, senha, **kwargs):
        """
        Permite validar a senha de um Cart\u00C3\u00A3o
        Esta opera\u00C3\u00A7\u00C3\u00A3o tem como objetivo permitir validar que a senha informada pelo portador de um determinado cart\u00C3\u00A3o est\u00C3\u00A1 correta.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.validar_senha_using_get(id, senha, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Cart\u00C3\u00A3o (id). (required)
        :param str senha: Senha para ser validada. (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'senha']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method validar_senha_using_get" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `validar_senha_using_get`")
        # verify the required parameter 'senha' is set
        if ('senha' not in params) or (params['senha'] is None):
            raise ValueError("Missing the required parameter `senha` when calling `validar_senha_using_get`")

        resource_path = '/api/cartoes/{id}/validar-senha'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'id' in params:
            query_params['id'] = params['id']

        header_params = {}
        if 'senha' in params:
            header_params['senha'] = params['senha']

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['access_token']

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='str',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response
