# coding: utf-8

"""
EnderecoApi.py
Copyright 2016 SmartBear Software

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
"""

from __future__ import absolute_import

import sys
import os

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class EnderecoApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def alterar_using_put(self, id, **kwargs):
        """
        Atualiza os dados de um determinado Endere\u00C3\u00A7o
        Este m\u00C3\u00A9todo permite que seja alterado na base do emissor um ou mais registros ligados a um determinado Endere\u00C3\u00A7o.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.alterar_using_put(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: id (required)
        :param int id_pessoa: C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o da Pessoa a qual o endere\u00C3\u00A7o pertence (id)
        :param int id_tipo_endereco: C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o da Tipo Endere\u00C3\u00A7o (id)
        :param str cep: Apresenta o C\u00C3\u00B3digo de Endere\u00C3\u00A7amento Postal (CEP) no formaro '58800000'
        :param str logradouro: Apresenta o nome do Logradouro
        :param int numero: Apresenta o n\u00C3\u00BAmero do endere\u00C3\u00A7o
        :param str complemento: Apresenta descri\u00C3\u00A7oes complementares referente ao endere\u00C3\u00A7o
        :param str ponto_referencia: Apresenta a descri\u00C3\u00A7\u00C3\u00A3o de ponto de refer\u00C3\u00AAncia do endere\u00C3\u00A7o
        :param str bairro: Apresenta nome do bairro
        :param str cidade: Apresenta nome da cidade
        :param str uf: Apresenta sigla da Unidade Federativa
        :param str pais: Apresenta nome do Pais
        :return: Endereco
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'id_pessoa', 'id_tipo_endereco', 'cep', 'logradouro', 'numero', 'complemento', 'ponto_referencia', 'bairro', 'cidade', 'uf', 'pais']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method alterar_using_put" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `alterar_using_put`")

        resource_path = '/api/enderecos'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'id' in params:
            query_params['id'] = params['id']
        if 'id_pessoa' in params:
            query_params['idPessoa'] = params['id_pessoa']
        if 'id_tipo_endereco' in params:
            query_params['idTipoEndereco'] = params['id_tipo_endereco']
        if 'cep' in params:
            query_params['cep'] = params['cep']
        if 'logradouro' in params:
            query_params['logradouro'] = params['logradouro']
        if 'numero' in params:
            query_params['numero'] = params['numero']
        if 'complemento' in params:
            query_params['complemento'] = params['complemento']
        if 'ponto_referencia' in params:
            query_params['pontoReferencia'] = params['ponto_referencia']
        if 'bairro' in params:
            query_params['bairro'] = params['bairro']
        if 'cidade' in params:
            query_params['cidade'] = params['cidade']
        if 'uf' in params:
            query_params['uf'] = params['uf']
        if 'pais' in params:
            query_params['pais'] = params['pais']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['access_token']

        response = self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='Endereco',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def consultar_using_get2(self, id_endereco, **kwargs):
        """
        Apresenta os dados de um determinado Endere\u00C3\u00A7o
        Este m\u00C3\u00A9todo permite consultar um determinado Endere\u00C3\u00A7o a partir do seu c\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o (id).

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.consultar_using_get2(id_endereco, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id_endereco: C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Endere\u00C3\u00A7o (id). (required)
        :return: Endereco
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id_endereco']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method consultar_using_get2" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'id_endereco' is set
        if ('id_endereco' not in params) or (params['id_endereco'] is None):
            raise ValueError("Missing the required parameter `id_endereco` when calling `consultar_using_get2`")

        resource_path = '/api/enderecos/{id_endereco}'.replace('{format}', 'json')
        path_params = {}
        if 'id_endereco' in params:
            path_params['id_endereco'] = params['id_endereco']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['access_token']

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='Endereco',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def listar_using_get2(self, **kwargs):
        """
        Lista os Endere\u00C3\u00A7os cadastrados para o Emissor
        Este m\u00C3\u00A9todo permite que sejam listados os Endere\u00C3\u00A7os existentes na base de dados do Emissor.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.listar_using_get2(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Endere\u00C3\u00A7o (id).
        :param int id_pessoa: C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o da Pessoa a qual o endere\u00C3\u00A7o pertence (id)
        :param int id_tipo_endereco: C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o da Tipo Endere\u00C3\u00A7o (id)
        :param str cep: Apresenta o C\u00C3\u00B3digo de Endere\u00C3\u00A7amento Postal (CEP)
        :param str logradouro: Apresenta o nome do Logradouro
        :param int numero: Apresenta o n\u00C3\u00BAmero do endere\u00C3\u00A7o
        :param str complemento: Apresenta descri\u00C3\u00A7oes complementares referente ao endere\u00C3\u00A7o
        :param str ponto_referencia: Apresenta a descri\u00C3\u00A7\u00C3\u00A3o de ponto de refer\u00C3\u00AAncia do endere\u00C3\u00A7o
        :param str bairro: Apresenta nome do bairro
        :param str cidade: Apresenta nome da cidade
        :param str uf: Apresenta sigla da Unidade Federativa
        :param str pais: Apresenta nome do Pais
        :param datetime data_inclusao: Apresenta a data em que fora cadastrado o Endere\u00C3\u00A7o
        :param datetime data_ultima_atualizacao: Data em que fora realizada a \u00C3\u00BAltima mudan\u00C3\u00A7a neste registro de endere\u00C3\u00A7o. Quando n\u00C3\u00A3o tiver ocorrido mudan\u00C3\u00A7a, conter\u00C3\u00A1 a mesma informa\u00C3\u00A7\u00C3\u00A3o que o campo dataInclusao
        :param int page: P\u00C3\u00A1gina solicitada (Default = 0)
        :param int limit: Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 100, Max = 100)
        :return: PageEnderecos
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'id_pessoa', 'id_tipo_endereco', 'cep', 'logradouro', 'numero', 'complemento', 'ponto_referencia', 'bairro', 'cidade', 'uf', 'pais', 'data_inclusao', 'data_ultima_atualizacao', 'page', 'limit']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method listar_using_get2" % key
                )
            params[key] = val
        del params['kwargs']


        resource_path = '/api/enderecos'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'id' in params:
            query_params['id'] = params['id']
        if 'id_pessoa' in params:
            query_params['idPessoa'] = params['id_pessoa']
        if 'id_tipo_endereco' in params:
            query_params['idTipoEndereco'] = params['id_tipo_endereco']
        if 'cep' in params:
            query_params['cep'] = params['cep']
        if 'logradouro' in params:
            query_params['logradouro'] = params['logradouro']
        if 'numero' in params:
            query_params['numero'] = params['numero']
        if 'complemento' in params:
            query_params['complemento'] = params['complemento']
        if 'ponto_referencia' in params:
            query_params['pontoReferencia'] = params['ponto_referencia']
        if 'bairro' in params:
            query_params['bairro'] = params['bairro']
        if 'cidade' in params:
            query_params['cidade'] = params['cidade']
        if 'uf' in params:
            query_params['uf'] = params['uf']
        if 'pais' in params:
            query_params['pais'] = params['pais']
        if 'data_inclusao' in params:
            query_params['dataInclusao'] = params['data_inclusao']
        if 'data_ultima_atualizacao' in params:
            query_params['dataUltimaAtualizacao'] = params['data_ultima_atualizacao']
        if 'page' in params:
            query_params['page'] = params['page']
        if 'limit' in params:
            query_params['limit'] = params['limit']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['access_token']

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='PageEnderecos',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def salvar_using_post(self, **kwargs):
        """
        Realiza o cadastro de um novo Endere\u00C3\u00A7o
        Este m\u00C3\u00A9todo permite que seja cadastrado um novo Endere\u00C3\u00A7o na base de dados do Emissor.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.salvar_using_post(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id_pessoa: C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o da Pessoa a qual o endere\u00C3\u00A7o pertence (id)
        :param int id_tipo_endereco: C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o da Tipo Endere\u00C3\u00A7o (id)
        :param str cep: Apresenta o C\u00C3\u00B3digo de Endere\u00C3\u00A7amento Postal (CEP) no formaro '58800000'
        :param str logradouro: Apresenta o nome do Logradouro
        :param int numero: Apresenta o n\u00C3\u00BAmero do endere\u00C3\u00A7o
        :param str complemento: Apresenta descri\u00C3\u00A7oes complementares referente ao endere\u00C3\u00A7o
        :param str ponto_referencia: Apresenta a descri\u00C3\u00A7\u00C3\u00A3o de ponto de refer\u00C3\u00AAncia do endere\u00C3\u00A7o
        :param str bairro: Apresenta nome do bairro
        :param str cidade: Apresenta nome da cidade
        :param str uf: Apresenta sigla da Unidade Federativa
        :param str pais: Apresenta nome do Pais
        :return: Endereco
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id_pessoa', 'id_tipo_endereco', 'cep', 'logradouro', 'numero', 'complemento', 'ponto_referencia', 'bairro', 'cidade', 'uf', 'pais']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method salvar_using_post" % key
                )
            params[key] = val
        del params['kwargs']


        resource_path = '/api/enderecos'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'id_pessoa' in params:
            query_params['idPessoa'] = params['id_pessoa']
        if 'id_tipo_endereco' in params:
            query_params['idTipoEndereco'] = params['id_tipo_endereco']
        if 'cep' in params:
            query_params['cep'] = params['cep']
        if 'logradouro' in params:
            query_params['logradouro'] = params['logradouro']
        if 'numero' in params:
            query_params['numero'] = params['numero']
        if 'complemento' in params:
            query_params['complemento'] = params['complemento']
        if 'ponto_referencia' in params:
            query_params['pontoReferencia'] = params['ponto_referencia']
        if 'bairro' in params:
            query_params['bairro'] = params['bairro']
        if 'cidade' in params:
            query_params['cidade'] = params['cidade']
        if 'uf' in params:
            query_params['uf'] = params['uf']
        if 'pais' in params:
            query_params['pais'] = params['pais']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['access_token']

        response = self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='Endereco',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response
