# coding: utf-8

"""
FaturamentoApi.py
Copyright 2016 SmartBear Software

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
"""

from __future__ import absolute_import

import sys
import os

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class FaturamentoApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def alterar_tipo_faturamento_using_put(self, id, tipo_faturamento_persist, **kwargs):
        """
        Alterar Faturamento
        Alterar as configura\u00E7\u00F5es de um determinado tipo de faturamento

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.alterar_tipo_faturamento_using_put(id, tipo_faturamento_persist, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: Id (required)
        :param TipoFaturamentoPersist tipo_faturamento_persist: tipoFaturamentoPersist (required)
        :return: TipoFaturamentoResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'tipo_faturamento_persist']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method alterar_tipo_faturamento_using_put" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `alterar_tipo_faturamento_using_put`")
        # verify the required parameter 'tipo_faturamento_persist' is set
        if ('tipo_faturamento_persist' not in params) or (params['tipo_faturamento_persist'] is None):
            raise ValueError("Missing the required parameter `tipo_faturamento_persist` when calling `alterar_tipo_faturamento_using_put`")

        resource_path = '/api/tipos-faturamento/{id}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'tipo_faturamento_persist' in params:
            body_params = params['tipo_faturamento_persist']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='TipoFaturamentoResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def cadastrar_faturamento_por_conta_using_post(self, tipo_faturamento_por_conta_persist, **kwargs):
        """
        Adiciona uma nova configura\u00E7\u00E3o de faturamento para uma conta
        Este m\u00E9todo permite adicionar uma nova configura\u00E7\u00E3o de tipo de faturamento para um conta espec\u00EDfica.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.cadastrar_faturamento_por_conta_using_post(tipo_faturamento_por_conta_persist, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param TipoFaturamentoPorContaPersist tipo_faturamento_por_conta_persist: tipoFaturamentoPorContaPersist (required)
        :return: TipoFaturamentoPorContaResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['tipo_faturamento_por_conta_persist']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cadastrar_faturamento_por_conta_using_post" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'tipo_faturamento_por_conta_persist' is set
        if ('tipo_faturamento_por_conta_persist' not in params) or (params['tipo_faturamento_por_conta_persist'] is None):
            raise ValueError("Missing the required parameter `tipo_faturamento_por_conta_persist` when calling `cadastrar_faturamento_por_conta_using_post`")

        resource_path = '/api/tipos-faturamento-conta'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'tipo_faturamento_por_conta_persist' in params:
            body_params = params['tipo_faturamento_por_conta_persist']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='TipoFaturamentoPorContaResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def cadastrar_tipo_faturamento_using_post(self, tipo_faturamento_persist, **kwargs):
        """
        Adiciona um novo faturamento
        Adiciona uma nova configura\u00E7\u00E3o de tipo de faturamento

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.cadastrar_tipo_faturamento_using_post(tipo_faturamento_persist, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param TipoFaturamentoPersist tipo_faturamento_persist: tipoFaturamentoPersist (required)
        :return: TipoFaturamentoResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['tipo_faturamento_persist']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cadastrar_tipo_faturamento_using_post" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'tipo_faturamento_persist' is set
        if ('tipo_faturamento_persist' not in params) or (params['tipo_faturamento_persist'] is None):
            raise ValueError("Missing the required parameter `tipo_faturamento_persist` when calling `cadastrar_tipo_faturamento_using_post`")

        resource_path = '/api/tipos-faturamento'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'tipo_faturamento_persist' in params:
            body_params = params['tipo_faturamento_persist']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='TipoFaturamentoResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def consultar_tipo_faturamento_using_get(self, id, **kwargs):
        """
        Consultar Faturamento por id
        Consulta os detalhes de uma determinada Faturamento

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.consultar_tipo_faturamento_using_get(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: Id (required)
        :return: TipoFaturamentoResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method consultar_tipo_faturamento_using_get" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `consultar_tipo_faturamento_using_get`")

        resource_path = '/api/tipos-faturamento/{id}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='TipoFaturamentoResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def desativar_faturamento_por_conta_using_post(self, id, modificado_por, **kwargs):
        """
        Desativar uma configura\u00E7\u00E3o de tipo de faturamento por conta atrav\u00E9s do id
        Desativa uma configura\u00E7\u00E3o de tipo de faturamento de uma determinada conta.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.desativar_faturamento_por_conta_using_post(id, modificado_por, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: Id (required)
        :param str modificado_por: modificadoPor (required)
        :return: TipoFaturamentoPorContaResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'modificado_por']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method desativar_faturamento_por_conta_using_post" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `desativar_faturamento_por_conta_using_post`")
        # verify the required parameter 'modificado_por' is set
        if ('modificado_por' not in params) or (params['modificado_por'] is None):
            raise ValueError("Missing the required parameter `modificado_por` when calling `desativar_faturamento_por_conta_using_post`")

        resource_path = '/api/tipos-faturamento-conta/{id}/desativar'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'modificado_por' in params:
            body_params = params['modificado_por']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='TipoFaturamentoPorContaResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def desativar_tipo_faturamento_using_post(self, id, **kwargs):
        """
        Desativar uma configura\u00E7\u00E3o de tipo de faturamento atrav\u00E9s do id
        Desativa uma configura\u00E7\u00E3o de tipo de faturamento.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.desativar_tipo_faturamento_using_post(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: Id (required)
        :return: TipoFaturamentoResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method desativar_tipo_faturamento_using_post" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `desativar_tipo_faturamento_using_post`")

        resource_path = '/api/tipos-faturamento/{id}/desativar'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='TipoFaturamentoResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def listar_faturamento_por_conta_using_get(self, **kwargs):
        """
        Lista as configura\u00E7\u00F5es de tipos de faturamento por conta
        Este m\u00E9todo permite listar as configura\u00E7\u00F5es de tipos de faturamento registrados a uma conta.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.listar_faturamento_por_conta_using_get(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param list[str] sort: Tipo de ordena\u00E7\u00E3o dos registros.
        :param int page: P\u00E1gina solicitada (Default = 0)
        :param int limit: Limite de elementos por solicita\u00E7\u00E3o (Default = 50, Max = 50)
        :param int id_tipo_faturamento_por_conta: C\u00F3digo de identifica\u00E7\u00E3o do tipo de faturamento por conta (id).
        :param bool status: Representa se a configura\u00E7\u00E3o est\u00E1 ativada ou desativada para a conta.
        :param int id_conta: C\u00F3digo de identifica\u00E7\u00E3o do tipo de faturamento por conta (id).
        :param int id_tipo_faturamento: C\u00F3digo de identifica\u00E7\u00E3o do tipo de faturamento relacionada (id).
        :param str data_hora_inclusao: Data da inclus\u00E3o da configura\u00E7\u00E3o, deve ser informada no formato yyyy-MM-dd'T'HH:mm:ss.SSS'Z'.
        :param str data_hora_cancelamento: Data do cancelamento da configura\u00E7\u00E3o, deve ser informada no formato yyyy-MM-dd'T'HH:mm:ss.SSS'Z'.
        :param str modificado_por: Identificador do respons\u00E1vel pela modifica\u00E7\u00E3o do registro.
        :return: PageTipoFaturamentoPorContaResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sort', 'page', 'limit', 'id_tipo_faturamento_por_conta', 'status', 'id_conta', 'id_tipo_faturamento', 'data_hora_inclusao', 'data_hora_cancelamento', 'modificado_por']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method listar_faturamento_por_conta_using_get" % key
                )
            params[key] = val
        del params['kwargs']


        resource_path = '/api/tipos-faturamento-conta'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'sort' in params:
            query_params['sort'] = params['sort']
        if 'page' in params:
            query_params['page'] = params['page']
        if 'limit' in params:
            query_params['limit'] = params['limit']
        if 'id_tipo_faturamento_por_conta' in params:
            query_params['idTipoFaturamentoPorConta'] = params['id_tipo_faturamento_por_conta']
        if 'status' in params:
            query_params['status'] = params['status']
        if 'id_conta' in params:
            query_params['idConta'] = params['id_conta']
        if 'id_tipo_faturamento' in params:
            query_params['idTipoFaturamento'] = params['id_tipo_faturamento']
        if 'data_hora_inclusao' in params:
            query_params['dataHoraInclusao'] = params['data_hora_inclusao']
        if 'data_hora_cancelamento' in params:
            query_params['dataHoraCancelamento'] = params['data_hora_cancelamento']
        if 'modificado_por' in params:
            query_params['modificadoPor'] = params['modificado_por']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='PageTipoFaturamentoPorContaResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def listar_tipo_faturamento_using_get(self, **kwargs):
        """
        Lista Tipos de Faturamento
        Lista todas as configura\u00E7\u00F5es dos tipos de faturamento

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.listar_tipo_faturamento_using_get(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param list[str] sort: Tipo de ordena\u00E7\u00E3o dos registros.
        :param int page: P\u00E1gina solicitada (Default = 0)
        :param int limit: Limite de elementos por solicita\u00E7\u00E3o (Default = 50, Max = 50)
        :param int id_tipo_faturamento: C\u00F3digo de identifica\u00E7\u00E3o do tipo de faturamento (id).
        :param str descricao: Descri\u00E7\u00E3o do tipo de faturamento.
        :param bool flag_apenas_demonstrativo: Flag que representa que o faturamento ser\u00E1 apenas demonstrativo.
        :param int id_convenio: C\u00F3digo de identifica\u00E7\u00E3o do conv\u00EAnio relacionado ao tipo de faturamento.
        :return: PageTipoFaturamentoResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sort', 'page', 'limit', 'id_tipo_faturamento', 'descricao', 'flag_apenas_demonstrativo', 'id_convenio']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method listar_tipo_faturamento_using_get" % key
                )
            params[key] = val
        del params['kwargs']


        resource_path = '/api/tipos-faturamento'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'sort' in params:
            query_params['sort'] = params['sort']
        if 'page' in params:
            query_params['page'] = params['page']
        if 'limit' in params:
            query_params['limit'] = params['limit']
        if 'id_tipo_faturamento' in params:
            query_params['idTipoFaturamento'] = params['id_tipo_faturamento']
        if 'descricao' in params:
            query_params['descricao'] = params['descricao']
        if 'flag_apenas_demonstrativo' in params:
            query_params['flagApenasDemonstrativo'] = params['flag_apenas_demonstrativo']
        if 'id_convenio' in params:
            query_params['idConvenio'] = params['id_convenio']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='PageTipoFaturamentoResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response
