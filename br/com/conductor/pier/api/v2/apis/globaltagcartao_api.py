# coding: utf-8

"""
GlobaltagcartaoApi.py
Copyright 2016 SmartBear Software

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
"""

from __future__ import absolute_import

import sys
import os

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class GlobaltagcartaoApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def alterar_alterar_senha_using_put(self, id, senha, **kwargs):
        """
        {{{cartao_resource_alterar_alterar_senha}}}
        {{{cartao_resource_alterar_alterar_senha_notes}}}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.alterar_alterar_senha_using_put(id, senha, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: {{{cartao_resource_alterar_alterar_senha_param_id}}} (required)
        :param str senha: {{{cartao_resource_alterar_alterar_senha_param_nova_senha}}} (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'senha']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method alterar_alterar_senha_using_put" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `alterar_alterar_senha_using_put`")
        # verify the required parameter 'senha' is set
        if ('senha' not in params) or (params['senha'] is None):
            raise ValueError("Missing the required parameter `senha` when calling `alterar_alterar_senha_using_put`")

        resource_path = '/api/cartoes/{id}/alterar-senha'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}
        if 'senha' in params:
            header_params['senha'] = params['senha']

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='str',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def alterar_estagio_using_post(self, id, update, **kwargs):
        """
        {{{cartao_resource_alterar_estagio}}}
        {{{cartao_resource_alterar_estagio_notes}}}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.alterar_estagio_using_post(id, update, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: {{{cartao_resource_alterar_estagio_param_id}}} (required)
        :param EstagioCartaoUpdate update: {{{cartao_resource_alterar_estagio_param_id_estagio_cartao}}} (required)
        :return: CartaoResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'update']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method alterar_estagio_using_post" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `alterar_estagio_using_post`")
        # verify the required parameter 'update' is set
        if ('update' not in params) or (params['update'] is None):
            raise ValueError("Missing the required parameter `update` when calling `alterar_estagio_using_post`")

        resource_path = '/api/cartoes/{id}/alterar-estagio'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'update' in params:
            body_params = params['update']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='CartaoResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def alterar_status_impressao_using_put(self, id, id_status_impressao, **kwargs):
        """
        {{{cartao_resource_alterar_status_impressao}}}
        {{{cartao_resource_alterar_status_impressao_notes}}}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.alterar_status_impressao_using_put(id, id_status_impressao, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: {{{cartao_resource_alterar_status_impressao_param_id}}} (required)
        :param int id_status_impressao: {{{cartao_resource_alterar_status_impressao_param_id_status_impressao}}} (required)
        :return: HistoricoImpressaoCartaoResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'id_status_impressao']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method alterar_status_impressao_using_put" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `alterar_status_impressao_using_put`")
        # verify the required parameter 'id_status_impressao' is set
        if ('id_status_impressao' not in params) or (params['id_status_impressao'] is None):
            raise ValueError("Missing the required parameter `id_status_impressao` when calling `alterar_status_impressao_using_put`")

        resource_path = '/api/cartoes/{id}/alterar-status-impressao'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}
        if 'id_status_impressao' in params:
            query_params['id_status_impressao'] = params['id_status_impressao']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='HistoricoImpressaoCartaoResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def atribuir_pessoa_using_put(self, id, id_pessoa, **kwargs):
        """
        {{{cartao_resource_atribuir_pessoa}}}
        {{{cartao_resource_atribuir_pessoa_notes}}}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.atribuir_pessoa_using_put(id, id_pessoa, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: {{{cartao_resource_atribuir_pessoa_param_id_cartao}}} (required)
        :param int id_pessoa: {{{cartao_resource_atribuir_pessoa_param_id_pessoa}}} (required)
        :return: CartaoResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'id_pessoa']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method atribuir_pessoa_using_put" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `atribuir_pessoa_using_put`")
        # verify the required parameter 'id_pessoa' is set
        if ('id_pessoa' not in params) or (params['id_pessoa'] is None):
            raise ValueError("Missing the required parameter `id_pessoa` when calling `atribuir_pessoa_using_put`")

        resource_path = '/api/cartoes/{id}/atribuir-titular'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}
        if 'id_pessoa' in params:
            query_params['id_pessoa'] = params['id_pessoa']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='CartaoResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def bloquear_using_post(self, id, id_status, observacao, **kwargs):
        """
        {{{cartao_resource_bloquear}}}
        {{{cartao_resource_bloquear_notes}}}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.bloquear_using_post(id, id_status, observacao, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: {{{cartao_resource_bloquear_param_id}}} (required)
        :param int id_status: {{{cartao_resource_bloquear_param_id_status}}} (required)
        :param str observacao: {{{cartao_resource_bloquear_param_observacao}}} (required)
        :return: CartaoResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'id_status', 'observacao']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bloquear_using_post" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `bloquear_using_post`")
        # verify the required parameter 'id_status' is set
        if ('id_status' not in params) or (params['id_status'] is None):
            raise ValueError("Missing the required parameter `id_status` when calling `bloquear_using_post`")
        # verify the required parameter 'observacao' is set
        if ('observacao' not in params) or (params['observacao'] is None):
            raise ValueError("Missing the required parameter `observacao` when calling `bloquear_using_post`")

        resource_path = '/api/cartoes/{id}/bloquear'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}
        if 'id_status' in params:
            query_params['id_status'] = params['id_status']
        if 'observacao' in params:
            query_params['observacao'] = params['observacao']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='CartaoResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def cadastrar_alterar_senha_using_post(self, id, senha, **kwargs):
        """
        {{{cartao_resource_cadastrar_alterar_senha}}}
        {{{cartao_resource_cadastrar_alterar_senha_notes}}}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.cadastrar_alterar_senha_using_post(id, senha, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: {{{cartao_resource_cadastrar_alterar_senha_param_id}}} (required)
        :param str senha: {{{cartao_resource_cadastrar_alterar_senha_param_nova_senha}}} (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'senha']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cadastrar_alterar_senha_using_post" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `cadastrar_alterar_senha_using_post`")
        # verify the required parameter 'senha' is set
        if ('senha' not in params) or (params['senha'] is None):
            raise ValueError("Missing the required parameter `senha` when calling `cadastrar_alterar_senha_using_post`")

        resource_path = '/api/cartoes/{id}/cadastrar-senha'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}
        if 'senha' in params:
            header_params['senha'] = params['senha']

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='str',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def cancelar_using_post(self, id, id_status, observacao, **kwargs):
        """
        {{{cartao_resource_cancelar}}}
        {{{cartao_resource_cancelar_notes}}}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.cancelar_using_post(id, id_status, observacao, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: {{{cartao_resource_cancelar_param_id}}} (required)
        :param int id_status: {{{cartao_resource_cancelar_param_id_status}}} (required)
        :param str observacao: {{{cartao_resource_cancelar_param_observacao}}} (required)
        :return: CartaoResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'id_status', 'observacao']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cancelar_using_post" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `cancelar_using_post`")
        # verify the required parameter 'id_status' is set
        if ('id_status' not in params) or (params['id_status'] is None):
            raise ValueError("Missing the required parameter `id_status` when calling `cancelar_using_post`")
        # verify the required parameter 'observacao' is set
        if ('observacao' not in params) or (params['observacao'] is None):
            raise ValueError("Missing the required parameter `observacao` when calling `cancelar_using_post`")

        resource_path = '/api/cartoes/{id}/cancelar'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}
        if 'id_status' in params:
            query_params['id_status'] = params['id_status']
        if 'observacao' in params:
            query_params['observacao'] = params['observacao']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='CartaoResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def consultar_cartao_impressao_using_get(self, id, **kwargs):
        """
        {{{cartao_resource_consultar_cartao_impressao}}}
        {{{cartao_resource_consultar_cartao_impressao_notes}}}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.consultar_cartao_impressao_using_get(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: {{{cartao_resource_consultar_cartao_impressao_param_id}}} (required)
        :return: DadosCartaoImpressaoResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method consultar_cartao_impressao_using_get" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `consultar_cartao_impressao_using_get`")

        resource_path = '/api/cartoes/{id}/consultar-dados-impressao'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='DadosCartaoImpressaoResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def consultar_dados_reais_cartao_using_get(self, id, **kwargs):
        """
        {{{cartao_resource_consultar_dados_reais_cartao}}}
        {{{cartao_resource_consultar_dados_reais_cartao_notes}}}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.consultar_dados_reais_cartao_using_get(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: id (required)
        :return: DadosCartaoResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method consultar_dados_reais_cartao_using_get" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `consultar_dados_reais_cartao_using_get`")

        resource_path = '/api/cartoes/{id}/consultar-dados-reais'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='DadosCartaoResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def consultar_limite_disponibilidade_using_get(self, id, **kwargs):
        """
        {{{cartao_resource_consultar_limite_disponibilidade}}}
        {{{cartao_resource_consultar_limite_disponibilidade_notes}}}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.consultar_limite_disponibilidade_using_get(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: {{{cartao_resource_consultar_limite_disponibilidade_param_id}}} (required)
        :return: LimiteDisponibilidadeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method consultar_limite_disponibilidade_using_get" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `consultar_limite_disponibilidade_using_get`")

        resource_path = '/api/cartoes/{id}/limites-disponibilidades'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='LimiteDisponibilidadeResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def consultar_lotes_cartoes_pre_pagos_using_get(self, id, **kwargs):
        """
        {{{cartao_resource_consultar_lotes_cartoes_pre_pagos}}}
        {{{cartao_resource_consultar_lotes_cartoes_pre_pagos_notes}}}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.consultar_lotes_cartoes_pre_pagos_using_get(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: {{{cartao_resource_consultar_lotes_cartoes_pre_pagos_param_id_lote}}} (required)
        :return: LoteCartoesPrePagosResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method consultar_lotes_cartoes_pre_pagos_using_get" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `consultar_lotes_cartoes_pre_pagos_using_get`")

        resource_path = '/api/cartoes/lotes-cartoes-pre-pagos/{id}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='LoteCartoesPrePagosResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def consultar_portador_using_get(self, id, **kwargs):
        """
        {{{cartao_resource_consultar_portador}}}
        {{{cartao_resource_consultar_portador_notes}}}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.consultar_portador_using_get(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: {{{cartao_resource_consultar_portador_param_id}}} (required)
        :return: PortadorResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method consultar_portador_using_get" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `consultar_portador_using_get`")

        resource_path = '/api/cartoes/{id}/portadores'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='PortadorResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def consultar_using_get12(self, id, **kwargs):
        """
        {{{cartao_resource_consultar}}}
        {{{cartao_resource_consultar_notes}}}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.consultar_using_get12(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: {{{cartao_resource_consultar_param_id}}} (required)
        :return: CartaoDetalheResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method consultar_using_get12" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `consultar_using_get12`")

        resource_path = '/api/cartoes/{id}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='CartaoDetalheResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def criar_cartoes_multi_app_using_post(self, cartao_multi_app_persist, **kwargs):
        """
        {{{conta_resource_cadastrar_cartao_multiapp}}}
        {{{conta_resource_cadastrar_cartao_multiapp_notes}}}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.criar_cartoes_multi_app_using_post(cartao_multi_app_persist, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param CartaoMultiAppPersistValue cartao_multi_app_persist: cartaoMultiAppPersist (required)
        :return: VinculoCartoesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cartao_multi_app_persist']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method criar_cartoes_multi_app_using_post" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'cartao_multi_app_persist' is set
        if ('cartao_multi_app_persist' not in params) or (params['cartao_multi_app_persist'] is None):
            raise ValueError("Missing the required parameter `cartao_multi_app_persist` when calling `criar_cartoes_multi_app_using_post`")

        resource_path = '/api/cartoes/gerar-cartoes-multiapp'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'cartao_multi_app_persist' in params:
            body_params = params['cartao_multi_app_persist']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='VinculoCartoesResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def desbloquear_senha_incorreta_using_post(self, id, **kwargs):
        """
        {{{cartao_resource_desbloquear_senha_incorreta}}}
        {{{cartao_resource_desbloquear_senha_incorreta_notes}}}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.desbloquear_senha_incorreta_using_post(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: {{{cartao_resource_desbloquear_senha_incorreta_param_id}}} (required)
        :return: CartaoResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method desbloquear_senha_incorreta_using_post" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `desbloquear_senha_incorreta_using_post`")

        resource_path = '/api/cartoes/{id}/desbloquear-senha-incorreta'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='CartaoResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def desbloquear_using_post(self, id, **kwargs):
        """
        {{{cartao_resource_desbloquear}}}
        {{{cartao_resource_desbloquear_notes}}}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.desbloquear_using_post(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: {{{cartao_resource_desbloquear_param_id}}} (required)
        :return: CartaoResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method desbloquear_using_post" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `desbloquear_using_post`")

        resource_path = '/api/cartoes/{id}/desbloquear'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='CartaoResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def gerar_lotes_cartoes_pre_pagos_using_post(self, **kwargs):
        """
        {{{cartao_resource_gerar_lotes_cartoes_pre_pagos}}}
        {{{cartao_resource_gerar_lotes_cartoes_pre_pagos_notes}}}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.gerar_lotes_cartoes_pre_pagos_using_post(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id_origem_comercial: {{{lote_cartoes_pre_pagos_persist_id_origem_comercial_value}}}
        :param int id_produto: {{{lote_cartoes_pre_pagos_persist_id_produto_value}}}
        :param int id_tipo_cartao: {{{lote_cartoes_pre_pagos_persist_id_tipo_cartao_value}}}
        :param int id_imagem: {{{lote_cartoes_pre_pagos_persist_id_imagem_value}}}
        :param int id_endereco: {{{lote_cartoes_pre_pagos_persist_id_endereco_value}}}
        :param int quantidade_cartoes: {{{lote_cartoes_pre_pagos_persist_quantidade_cartoes_value}}}
        :param str identificador_externo: {{{lote_cartoes_pre_pagos_persist_identificador_externo_value}}}
        :return: LoteCartoesPrePagosResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id_origem_comercial', 'id_produto', 'id_tipo_cartao', 'id_imagem', 'id_endereco', 'quantidade_cartoes', 'identificador_externo']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method gerar_lotes_cartoes_pre_pagos_using_post" % key
                )
            params[key] = val
        del params['kwargs']


        resource_path = '/api/cartoes/lotes-cartoes-pre-pagos'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'id_origem_comercial' in params:
            query_params['idOrigemComercial'] = params['id_origem_comercial']
        if 'id_produto' in params:
            query_params['idProduto'] = params['id_produto']
        if 'id_tipo_cartao' in params:
            query_params['idTipoCartao'] = params['id_tipo_cartao']
        if 'id_imagem' in params:
            query_params['idImagem'] = params['id_imagem']
        if 'id_endereco' in params:
            query_params['idEndereco'] = params['id_endereco']
        if 'quantidade_cartoes' in params:
            query_params['quantidadeCartoes'] = params['quantidade_cartoes']
        if 'identificador_externo' in params:
            query_params['identificadorExterno'] = params['identificador_externo']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='LoteCartoesPrePagosResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def gerar_nova_via_cartao_multi_app_using_post(self, id, **kwargs):
        """
        {{{cartao_resource_gerar_nova_via_multiplo}}}
        {{{cartao_resource_gerar_nova_via_multiplo_notes}}}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.gerar_nova_via_cartao_multi_app_using_post(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: {{{cartao_resource_gerar_nova_via_param_id_cartao}}} (required)
        :return: CartaoMultiAppImpressaoResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method gerar_nova_via_cartao_multi_app_using_post" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `gerar_nova_via_cartao_multi_app_using_post`")

        resource_path = '/api/cartoes/{id}/gerar-nova-via-multiplo'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='CartaoMultiAppImpressaoResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def gerar_nova_via_using_post(self, id, **kwargs):
        """
        {{{cartao_resource_gerar_nova_via}}}
        {{{cartao_resource_gerar_nova_via_notes}}}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.gerar_nova_via_using_post(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: {{{cartao_resource_gerar_nova_via_param_id_cartao}}} (required)
        :return: CartaoResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method gerar_nova_via_using_post" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `gerar_nova_via_using_post`")

        resource_path = '/api/cartoes/{id}/gerar-nova-via'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='CartaoResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def lancar_tarifa_segunda_via_using_post(self, id, **kwargs):
        """
        {{{cartao_resource_lancar_tarifa_segunda_via}}}
        {{{cartao_resource_lancar_tarifa_segunda_via_notes}}}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.lancar_tarifa_segunda_via_using_post(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: {{{cartao_resource_lancar_tarifa_segunda_via_param_id}}} (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method lancar_tarifa_segunda_via_using_post" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `lancar_tarifa_segunda_via_using_post`")

        resource_path = '/api/cartoes/{id}/lancar-tarifa-reemissao'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='object',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def listar_lotes_cartoes_pre_pagos_using_get(self, **kwargs):
        """
        {{{cartao_resource_listar_lotes_cartoes_pre_pagos}}}
        {{{cartao_resource_listar_lotes_cartoes_pre_pagos_notes}}}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.listar_lotes_cartoes_pre_pagos_using_get(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param list[str] sort: {{{global_menssagem_sort_sort}}}
        :param int page: {{{global_menssagem_sort_page_value}}}
        :param int limit: {{{global_menssagem_sort_limit}}}
        :param int id_origem_comercial: {{{lote_cartoes_pre_pagos_request_id_origem_comercial_value}}}
        :param int id_produto: {{{lote_cartoes_pre_pagos_request_id_produto_value}}}
        :param int id_tipo_cartao: {{{lote_cartoes_pre_pagos_request_id_tipo_cartao_value}}}
        :param int id_imagem: {{{lote_cartoes_pre_pagos_request_id_imagem_value}}}
        :param int id_endereco: {{{lote_cartoes_pre_pagos_request_id_endereco_value}}}
        :param int quantidade_cartoes: {{{lote_cartoes_pre_pagos_request_quantidade_cartoes_value}}}
        :param str data_cadastro: {{{lote_cartoes_pre_pagos_request_data_cadastro_value}}}
        :param str usuario_cadastro: {{{lote_cartoes_pre_pagos_request_usuario_cadastro_value}}}
        :param int status_processamento: {{{lote_cartoes_pre_pagos_request_status_processamento_value}}}
        :param str identificador_externo: {{{lote_cartoes_pre_pagos_request_identificador_externo_value}}}
        :return: PageLoteCartoesPrePagosResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sort', 'page', 'limit', 'id_origem_comercial', 'id_produto', 'id_tipo_cartao', 'id_imagem', 'id_endereco', 'quantidade_cartoes', 'data_cadastro', 'usuario_cadastro', 'status_processamento', 'identificador_externo']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method listar_lotes_cartoes_pre_pagos_using_get" % key
                )
            params[key] = val
        del params['kwargs']


        resource_path = '/api/cartoes/lotes-cartoes-pre-pagos'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'sort' in params:
            query_params['sort'] = params['sort']
        if 'page' in params:
            query_params['page'] = params['page']
        if 'limit' in params:
            query_params['limit'] = params['limit']
        if 'id_origem_comercial' in params:
            query_params['idOrigemComercial'] = params['id_origem_comercial']
        if 'id_produto' in params:
            query_params['idProduto'] = params['id_produto']
        if 'id_tipo_cartao' in params:
            query_params['idTipoCartao'] = params['id_tipo_cartao']
        if 'id_imagem' in params:
            query_params['idImagem'] = params['id_imagem']
        if 'id_endereco' in params:
            query_params['idEndereco'] = params['id_endereco']
        if 'quantidade_cartoes' in params:
            query_params['quantidadeCartoes'] = params['quantidade_cartoes']
        if 'data_cadastro' in params:
            query_params['dataCadastro'] = params['data_cadastro']
        if 'usuario_cadastro' in params:
            query_params['usuarioCadastro'] = params['usuario_cadastro']
        if 'status_processamento' in params:
            query_params['statusProcessamento'] = params['status_processamento']
        if 'identificador_externo' in params:
            query_params['identificadorExterno'] = params['identificador_externo']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='PageLoteCartoesPrePagosResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def listar_using_get12(self, **kwargs):
        """
        {{{cartao_resource_listar}}}
        {{{cartao_resource_listar_notes}}}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.listar_using_get12(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param list[str] sort: {{{global_menssagem_sort_sort}}}
        :param int page: {{{global_menssagem_sort_page_value}}}
        :param int limit: {{{global_menssagem_sort_limit}}}
        :param int id_status_cartao: {{{cartao_request_id_status_cartao_value}}}
        :param int id_estagio_cartao: {{{cartao_request_id_estagio_cartao_value}}}
        :param int id_conta: {{{cartao_request_id_conta_value}}}
        :param int id_pessoa: {{{cartao_request_id_pessoa_value}}}
        :param int id_produto: {{{cartao_request_id_produto_value}}}
        :param str tipo_portador: {{{cartao_request_tipo_portador_value}}}
        :param str numero_cartao: {{{cartao_request_numero_cartao_value}}}
        :param str nome_impresso: {{{cartao_request_nome_impresso_value}}}
        :param str data_geracao: {{{cartao_request_data_geracao_value}}}
        :param str data_status_cartao: {{{cartao_request_data_status_cartao_value}}}
        :param str data_estagio_cartao: {{{cartao_request_data_estagio_cartao_value}}}
        :param str data_validade: {{{cartao_request_data_validade_value}}}
        :param str data_impressao: {{{cartao_request_data_impressao_value}}}
        :param str arquivo_impressao: {{{cartao_request_arquivo_impressao_value}}}
        :param int flag_impressao_origem_comercial: {{{cartao_request_flag_impressao_origem_comercial_value}}}
        :param int flag_provisorio: {{{cartao_request_flag_provisorio_value}}}
        :param str codigo_desbloqueio: {{{cartao_request_codigo_desbloqueio_value}}}
        :param int sequencial_cartao: {{{cartao_request_sequencial_cartao_value}}}
        :param int identificador_externo: {{{cartao_request_identificador_externo_value}}}
        :return: PageCartaoResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sort', 'page', 'limit', 'id_status_cartao', 'id_estagio_cartao', 'id_conta', 'id_pessoa', 'id_produto', 'tipo_portador', 'numero_cartao', 'nome_impresso', 'data_geracao', 'data_status_cartao', 'data_estagio_cartao', 'data_validade', 'data_impressao', 'arquivo_impressao', 'flag_impressao_origem_comercial', 'flag_provisorio', 'codigo_desbloqueio', 'sequencial_cartao', 'identificador_externo']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method listar_using_get12" % key
                )
            params[key] = val
        del params['kwargs']


        resource_path = '/api/cartoes'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'sort' in params:
            query_params['sort'] = params['sort']
        if 'page' in params:
            query_params['page'] = params['page']
        if 'limit' in params:
            query_params['limit'] = params['limit']
        if 'id_status_cartao' in params:
            query_params['idStatusCartao'] = params['id_status_cartao']
        if 'id_estagio_cartao' in params:
            query_params['idEstagioCartao'] = params['id_estagio_cartao']
        if 'id_conta' in params:
            query_params['idConta'] = params['id_conta']
        if 'id_pessoa' in params:
            query_params['idPessoa'] = params['id_pessoa']
        if 'id_produto' in params:
            query_params['idProduto'] = params['id_produto']
        if 'tipo_portador' in params:
            query_params['tipoPortador'] = params['tipo_portador']
        if 'numero_cartao' in params:
            query_params['numeroCartao'] = params['numero_cartao']
        if 'nome_impresso' in params:
            query_params['nomeImpresso'] = params['nome_impresso']
        if 'data_geracao' in params:
            query_params['dataGeracao'] = params['data_geracao']
        if 'data_status_cartao' in params:
            query_params['dataStatusCartao'] = params['data_status_cartao']
        if 'data_estagio_cartao' in params:
            query_params['dataEstagioCartao'] = params['data_estagio_cartao']
        if 'data_validade' in params:
            query_params['dataValidade'] = params['data_validade']
        if 'data_impressao' in params:
            query_params['dataImpressao'] = params['data_impressao']
        if 'arquivo_impressao' in params:
            query_params['arquivoImpressao'] = params['arquivo_impressao']
        if 'flag_impressao_origem_comercial' in params:
            query_params['flagImpressaoOrigemComercial'] = params['flag_impressao_origem_comercial']
        if 'flag_provisorio' in params:
            query_params['flagProvisorio'] = params['flag_provisorio']
        if 'codigo_desbloqueio' in params:
            query_params['codigoDesbloqueio'] = params['codigo_desbloqueio']
        if 'sequencial_cartao' in params:
            query_params['sequencialCartao'] = params['sequencial_cartao']
        if 'identificador_externo' in params:
            query_params['identificadorExterno'] = params['identificador_externo']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='PageCartaoResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def reativar_using_post(self, id, **kwargs):
        """
        {{{cartao_resource_reativar}}}
        {{{cartao_resource_reativar_notes}}}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.reativar_using_post(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: {{{cartao_resource_reativar_param_id}}} (required)
        :return: CartaoResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method reativar_using_post" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `reativar_using_post`")

        resource_path = '/api/cartoes/{id}/reativar'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='CartaoResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def validar_cvv_using_post(self, id, valida_cvv, **kwargs):
        """
        {{{cartao_resource_validar_c_v_v}}}
        {{{cartao_resource_validar_c_v_v_notes}}}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.validar_cvv_using_post(id, valida_cvv, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: {{{cartao_resource_validar_c_v_v_param_id}}} (required)
        :param ValidaCVVRequest valida_cvv: validaCVV (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'valida_cvv']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method validar_cvv_using_post" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `validar_cvv_using_post`")
        # verify the required parameter 'valida_cvv' is set
        if ('valida_cvv' not in params) or (params['valida_cvv'] is None):
            raise ValueError("Missing the required parameter `valida_cvv` when calling `validar_cvv_using_post`")

        resource_path = '/api/cartoes/{id}/validar-cvv'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'valida_cvv' in params:
            body_params = params['valida_cvv']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='str',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def validar_dados_impressos_bandeirado_using_get(self, numero_cartao, nome_portador, data_validade, codigo_seguranca, **kwargs):
        """
        {{{cartao_resource_validar_dados_impressos_bandeirado}}}
        {{{cartao_resource_validar_dados_impressos_bandeirado_notes}}}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.validar_dados_impressos_bandeirado_using_get(numero_cartao, nome_portador, data_validade, codigo_seguranca, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str numero_cartao: {{{cartao_resource_validar_dados_impressos_bandeirado_param_numero_cartao}}} (required)
        :param str nome_portador: {{{cartao_resource_validar_dados_impressos_bandeirado_param_nome_portador}}} (required)
        :param str data_validade: {{{cartao_resource_validar_dados_impressos_bandeirado_param_data_validade}}} (required)
        :param str codigo_seguranca: {{{cartao_resource_validar_dados_impressos_bandeirado_param_codigo_seguranca}}} (required)
        :return: ValidaCartaoResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['numero_cartao', 'nome_portador', 'data_validade', 'codigo_seguranca']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method validar_dados_impressos_bandeirado_using_get" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'numero_cartao' is set
        if ('numero_cartao' not in params) or (params['numero_cartao'] is None):
            raise ValueError("Missing the required parameter `numero_cartao` when calling `validar_dados_impressos_bandeirado_using_get`")
        # verify the required parameter 'nome_portador' is set
        if ('nome_portador' not in params) or (params['nome_portador'] is None):
            raise ValueError("Missing the required parameter `nome_portador` when calling `validar_dados_impressos_bandeirado_using_get`")
        # verify the required parameter 'data_validade' is set
        if ('data_validade' not in params) or (params['data_validade'] is None):
            raise ValueError("Missing the required parameter `data_validade` when calling `validar_dados_impressos_bandeirado_using_get`")
        # verify the required parameter 'codigo_seguranca' is set
        if ('codigo_seguranca' not in params) or (params['codigo_seguranca'] is None):
            raise ValueError("Missing the required parameter `codigo_seguranca` when calling `validar_dados_impressos_bandeirado_using_get`")

        resource_path = '/api/cartoes/validar-dados-impressos-bandeirados'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'numero_cartao' in params:
            query_params['numero_cartao'] = params['numero_cartao']
        if 'nome_portador' in params:
            query_params['nome_portador'] = params['nome_portador']
        if 'data_validade' in params:
            query_params['data_validade'] = params['data_validade']
        if 'codigo_seguranca' in params:
            query_params['codigo_seguranca'] = params['codigo_seguranca']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='ValidaCartaoResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def validar_dados_impressos_nao_bandeirado_using_get(self, numero_cartao, nome_portador, data_validade, codigo_seguranca, **kwargs):
        """
        {{{cartao_resource_validar_dados_impressos_nao_bandeirado}}}
        {{{cartao_resource_validar_dados_impressos_nao_bandeirado_notes}}}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.validar_dados_impressos_nao_bandeirado_using_get(numero_cartao, nome_portador, data_validade, codigo_seguranca, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str numero_cartao: {{{cartao_resource_validar_dados_impressos_nao_bandeirado_param_numero_cartao}}} (required)
        :param str nome_portador: {{{cartao_resource_validar_dados_impressos_nao_bandeirado_param_nome_portador}}} (required)
        :param str data_validade: {{{cartao_resource_validar_dados_impressos_nao_bandeirado_param_data_validade}}} (required)
        :param str codigo_seguranca: {{{cartao_resource_validar_dados_impressos_nao_bandeirado_param_codigo_seguranca}}} (required)
        :return: ValidaCartaoResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['numero_cartao', 'nome_portador', 'data_validade', 'codigo_seguranca']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method validar_dados_impressos_nao_bandeirado_using_get" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'numero_cartao' is set
        if ('numero_cartao' not in params) or (params['numero_cartao'] is None):
            raise ValueError("Missing the required parameter `numero_cartao` when calling `validar_dados_impressos_nao_bandeirado_using_get`")
        # verify the required parameter 'nome_portador' is set
        if ('nome_portador' not in params) or (params['nome_portador'] is None):
            raise ValueError("Missing the required parameter `nome_portador` when calling `validar_dados_impressos_nao_bandeirado_using_get`")
        # verify the required parameter 'data_validade' is set
        if ('data_validade' not in params) or (params['data_validade'] is None):
            raise ValueError("Missing the required parameter `data_validade` when calling `validar_dados_impressos_nao_bandeirado_using_get`")
        # verify the required parameter 'codigo_seguranca' is set
        if ('codigo_seguranca' not in params) or (params['codigo_seguranca'] is None):
            raise ValueError("Missing the required parameter `codigo_seguranca` when calling `validar_dados_impressos_nao_bandeirado_using_get`")

        resource_path = '/api/cartoes/validar-dados-impressos-nao-bandeirados'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'numero_cartao' in params:
            query_params['numero_cartao'] = params['numero_cartao']
        if 'nome_portador' in params:
            query_params['nome_portador'] = params['nome_portador']
        if 'data_validade' in params:
            query_params['data_validade'] = params['data_validade']
        if 'codigo_seguranca' in params:
            query_params['codigo_seguranca'] = params['codigo_seguranca']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='ValidaCartaoResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def validar_de55_cartao_mastercard_using_get(self, numero_cartao, criptograma, **kwargs):
        """
        {{{cartao_resource_validar_de55_cartao_mastercard}}}
        {{{cartao_resource_validar_de55_cartao_mastercard_notes}}}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.validar_de55_cartao_mastercard_using_get(numero_cartao, criptograma, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str numero_cartao: {{{cartao_resource_validar_de55_cartao_mastercard_param_numero_cartao}}} (required)
        :param str criptograma: {{{cartao_resource_validar_de55_cartao_mastercard_param_criptograma}}} (required)
        :return: ValidaCartaoResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['numero_cartao', 'criptograma']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method validar_de55_cartao_mastercard_using_get" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'numero_cartao' is set
        if ('numero_cartao' not in params) or (params['numero_cartao'] is None):
            raise ValueError("Missing the required parameter `numero_cartao` when calling `validar_de55_cartao_mastercard_using_get`")
        # verify the required parameter 'criptograma' is set
        if ('criptograma' not in params) or (params['criptograma'] is None):
            raise ValueError("Missing the required parameter `criptograma` when calling `validar_de55_cartao_mastercard_using_get`")

        resource_path = '/api/cartoes/validar-de55-mastercard'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'numero_cartao' in params:
            query_params['numero_cartao'] = params['numero_cartao']
        if 'criptograma' in params:
            query_params['criptograma'] = params['criptograma']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='ValidaCartaoResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def validar_senha_using_get(self, id, senha, **kwargs):
        """
        {{{cartao_resource_validar_senha}}}
        {{{cartao_resource_validar_senha_notes}}}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.validar_senha_using_get(id, senha, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: {{{cartao_resource_validar_senha_param_id}}} (required)
        :param str senha: {{{cartao_resource_validar_senha_param_senha}}} (required)
        :return: ValidaSenhaCartaoResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'senha']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method validar_senha_using_get" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `validar_senha_using_get`")
        # verify the required parameter 'senha' is set
        if ('senha' not in params) or (params['senha'] is None):
            raise ValueError("Missing the required parameter `senha` when calling `validar_senha_using_get`")

        resource_path = '/api/cartoes/{id}/validar-senha'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}
        if 'senha' in params:
            header_params['senha'] = params['senha']

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='ValidaSenhaCartaoResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def validar_tarja_using_get(self, numero_cartao, trilha1, trilha2, **kwargs):
        """
        {{{cartao_resource_validar_tarja}}}
        {{{cartao_resource_validar_tarja_notes}}}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.validar_tarja_using_get(numero_cartao, trilha1, trilha2, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str numero_cartao: {{{cartao_resource_validar_tarja_param_numero_cartao}}} (required)
        :param str trilha1: {{{cartao_resource_validar_tarja_param_trilha1}}} (required)
        :param str trilha2: {{{cartao_resource_validar_tarja_param_trilha2}}} (required)
        :return: ValidaCartaoResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['numero_cartao', 'trilha1', 'trilha2']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method validar_tarja_using_get" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'numero_cartao' is set
        if ('numero_cartao' not in params) or (params['numero_cartao'] is None):
            raise ValueError("Missing the required parameter `numero_cartao` when calling `validar_tarja_using_get`")
        # verify the required parameter 'trilha1' is set
        if ('trilha1' not in params) or (params['trilha1'] is None):
            raise ValueError("Missing the required parameter `trilha1` when calling `validar_tarja_using_get`")
        # verify the required parameter 'trilha2' is set
        if ('trilha2' not in params) or (params['trilha2'] is None):
            raise ValueError("Missing the required parameter `trilha2` when calling `validar_tarja_using_get`")

        resource_path = '/api/cartoes/validar-tarja'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'numero_cartao' in params:
            query_params['numero_cartao'] = params['numero_cartao']
        if 'trilha1' in params:
            query_params['trilha1'] = params['trilha1']
        if 'trilha2' in params:
            query_params['trilha2'] = params['trilha2']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='ValidaCartaoResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response
