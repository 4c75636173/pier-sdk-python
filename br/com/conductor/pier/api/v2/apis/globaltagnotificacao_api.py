# coding: utf-8

"""
GlobaltagnotificacaoApi.py
Copyright 2016 SmartBear Software

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
"""

from __future__ import absolute_import

import sys
import os

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class GlobaltagnotificacaoApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def alterar_configuracao_using_put(self, id, persist, **kwargs):
        """
        {{{email_resource_alterar_configuracao}}}
        {{{email_resource_alterar_configuracao_notes}}}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.alterar_configuracao_using_put(id, persist, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: {{{email_resource_alterar_configuracao_param_id}}} (required)
        :param ConfiguracaoEmailPersist persist: persist (required)
        :return: ConfiguracaoEmailResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'persist']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method alterar_configuracao_using_put" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `alterar_configuracao_using_put`")
        # verify the required parameter 'persist' is set
        if ('persist' not in params) or (params['persist'] is None):
            raise ValueError("Missing the required parameter `persist` when calling `alterar_configuracao_using_put`")

        resource_path = '/api/configuracoes-email/{id}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'persist' in params:
            body_params = params['persist']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='ConfiguracaoEmailResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def alterar_template_notificacao_using_put(self, id, conteudo, **kwargs):
        """
        {{{notificacao_resource_alterar_template_notificacao}}}
        {{{notificacao_resource_alterar_template_notificacao_notes}}}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.alterar_template_notificacao_using_put(id, conteudo, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: {{{notificacao_resource_alterar_template_notificacao_param_id}}} (required)
        :param str conteudo: {{{notificacao_resource_alterar_template_notificacao_param_conteudo}}} (required)
        :param int id_configuracao_email: {{{template_notificacao_persist_id_configuracao_email_value}}}
        :param str tipo_layout: {{{template_notificacao_persist_tipo_layout_value}}}
        :param str tipo_notificacao: {{{template_notificacao_persist_tipo_notificacao_value}}}
        :param str remetente: {{{template_notificacao_persist_remetente_value}}}
        :param str assunto: {{{template_notificacao_persist_assunto_value}}}
        :param bool template_padrao: {{{template_notificacao_persist_template_padrao_value}}}
        :return: TemplateNotificacaoDetalheResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'conteudo', 'id_configuracao_email', 'tipo_layout', 'tipo_notificacao', 'remetente', 'assunto', 'template_padrao']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method alterar_template_notificacao_using_put" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `alterar_template_notificacao_using_put`")
        # verify the required parameter 'conteudo' is set
        if ('conteudo' not in params) or (params['conteudo'] is None):
            raise ValueError("Missing the required parameter `conteudo` when calling `alterar_template_notificacao_using_put`")

        resource_path = '/api/templates-notificacoes/{id}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}
        if 'id_configuracao_email' in params:
            query_params['idConfiguracaoEmail'] = params['id_configuracao_email']
        if 'tipo_layout' in params:
            query_params['tipoLayout'] = params['tipo_layout']
        if 'tipo_notificacao' in params:
            query_params['tipoNotificacao'] = params['tipo_notificacao']
        if 'remetente' in params:
            query_params['remetente'] = params['remetente']
        if 'assunto' in params:
            query_params['assunto'] = params['assunto']
        if 'template_padrao' in params:
            query_params['templatePadrao'] = params['template_padrao']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'conteudo' in params:
            body_params = params['conteudo']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['text/plain'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='TemplateNotificacaoDetalheResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def atualizar_sms_using_post(self, **kwargs):
        """
        {{{notificacao_resource_atualizar_s_m_s}}}
        {{{notificacao_resource_atualizar_s_m_s_notes}}}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.atualizar_sms_using_post(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str nsu: {{{notificacao_resource_atualizar_s_m_s_param_nsu}}}
        :param str status: {{{notificacao_resource_atualizar_s_m_s_param_status}}}
        :param str data: {{{notificacao_resource_atualizar_s_m_s_param_data}}}
        :param str texto_status: {{{notificacao_resource_atualizar_s_m_s_param_texto_status}}}
        :param str operadora: {{{notificacao_resource_atualizar_s_m_s_param_operadora}}}
        :return: NotificacaoSMSResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['nsu', 'status', 'data', 'texto_status', 'operadora']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method atualizar_sms_using_post" % key
                )
            params[key] = val
        del params['kwargs']


        resource_path = '/api/notificacoes/sms/atualizar-status'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'nsu' in params:
            query_params['nsu'] = params['nsu']
        if 'status' in params:
            query_params['status'] = params['status']
        if 'data' in params:
            query_params['data'] = params['data']
        if 'texto_status' in params:
            query_params['texto_status'] = params['texto_status']
        if 'operadora' in params:
            query_params['operadora'] = params['operadora']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='NotificacaoSMSResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def consultar_configuracao_using_get(self, id, **kwargs):
        """
        {{{email_resource_consultar_configuracao}}}
        {{{email_resource_consultar_configuracao_notes}}}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.consultar_configuracao_using_get(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: {{{email_resource_consultar_configuracao_param_id}}} (required)
        :return: ConfiguracaoEmailResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method consultar_configuracao_using_get" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `consultar_configuracao_using_get`")

        resource_path = '/api/configuracoes-email/{id}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='ConfiguracaoEmailResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def consultar_por_email_using_get(self, id, **kwargs):
        """
        {{{codigo_seguranca_resource_consultar_por_email}}}
        {{{codigo_seguranca_resource_consultar_por_email_notes}}}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.consultar_por_email_using_get(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: {{{codigo_seguranca_resource_consultar_por_email_param_id}}} (required)
        :return: CodigoSegurancaResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method consultar_por_email_using_get" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `consultar_por_email_using_get`")

        resource_path = '/api/codigos-seguranca-email/{id}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='CodigoSegurancaResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def consultar_por_sms_using_get(self, id, **kwargs):
        """
        {{{codigo_seguranca_resource_consultar_por_s_m_s}}}
        {{{codigo_seguranca_resource_consultar_por_s_m_s_notes}}}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.consultar_por_sms_using_get(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: {{{codigo_seguranca_resource_consultar_por_s_m_s_param_id}}} (required)
        :return: CodigoSegurancaResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method consultar_por_sms_using_get" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `consultar_por_sms_using_get`")

        resource_path = '/api/codigos-seguranca-sms/{id}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='CodigoSegurancaResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def consultar_template_notificacao_using_get(self, id, **kwargs):
        """
        {{{notificacao_resource_consultar_template_notificacao}}}
        {{{notificacao_resource_consultar_template_notificacao_notes}}}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.consultar_template_notificacao_using_get(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: {{{notificacao_resource_consultar_template_notificacao_param_id}}} (required)
        :return: TemplateNotificacaoDetalheResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method consultar_template_notificacao_using_get" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `consultar_template_notificacao_using_get`")

        resource_path = '/api/templates-notificacoes/{id}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='TemplateNotificacaoDetalheResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def enviar_otp_using_post(self, secure3d_request, **kwargs):
        """
        {{{notificacao_resource_3d_secure}}}
        {{{notificacao_resource_3d_secure_notes}}}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.enviar_otp_using_post(secure3d_request, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param Secure3dRequest secure3d_request: secure3dRequest (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['secure3d_request']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method enviar_otp_using_post" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'secure3d_request' is set
        if ('secure3d_request' not in params) or (params['secure3d_request'] is None):
            raise ValueError("Missing the required parameter `secure3d_request` when calling `enviar_otp_using_post`")

        resource_path = '/api/notificacoes/3d-secure'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'secure3d_request' in params:
            body_params = params['secure3d_request']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='object',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def gerar_token_email_using_post(self, email, **kwargs):
        """
        {{{codigo_seguranca_resource_gerar_token_e_m_a_i_l}}}
        {{{codigo_seguranca_resource_gerar_token_e_m_a_i_l_notes}}}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.gerar_token_email_using_post(email, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str email: email (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['email']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method gerar_token_email_using_post" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'email' is set
        if ('email' not in params) or (params['email'] is None):
            raise ValueError("Missing the required parameter `email` when calling `gerar_token_email_using_post`")

        resource_path = '/api/notificacoes-email/gerar-codigo-seguranca'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'email' in params:
            body_params = params['email']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='str',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def gerar_token_sms_using_post(self, persist, **kwargs):
        """
        {{{codigo_seguranca_resource_gerar_token_s_m_s}}}
        {{{codigo_seguranca_resource_gerar_token_s_m_s_notes}}}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.gerar_token_sms_using_post(persist, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param CodigoSegurancaSMSPersist persist: persist (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['persist']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method gerar_token_sms_using_post" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'persist' is set
        if ('persist' not in params) or (params['persist'] is None):
            raise ValueError("Missing the required parameter `persist` when calling `gerar_token_sms_using_post`")

        resource_path = '/api/notificacoes-sms/gerar-codigo-seguranca'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'persist' in params:
            body_params = params['persist']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='str',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def listar_configuracao_using_get(self, **kwargs):
        """
        {{{email_resource_listar_configuracao}}}
        {{{email_resource_listar_configuracao_notes}}}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.listar_configuracao_using_get(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param list[str] sort: {{{global_menssagem_sort_sort}}}
        :param int page: {{{global_menssagem_sort_page_value}}}
        :param int limit: {{{global_menssagem_sort_limit}}}
        :return: PageConfiguracaoEmailResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sort', 'page', 'limit']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method listar_configuracao_using_get" % key
                )
            params[key] = val
        del params['kwargs']


        resource_path = '/api/configuracoes-email'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'sort' in params:
            query_params['sort'] = params['sort']
        if 'page' in params:
            query_params['page'] = params['page']
        if 'limit' in params:
            query_params['limit'] = params['limit']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='PageConfiguracaoEmailResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def listar_por_email_using_get(self, **kwargs):
        """
        {{{codigo_seguranca_resource_listar_por_email}}}
        {{{codigo_seguranca_resource_listar_por_email_notes}}}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.listar_por_email_using_get(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param list[str] sort: {{{global_menssagem_sort_sort}}}
        :param int page: {{{global_menssagem_sort_page_value}}}
        :param int limit: {{{global_menssagem_sort_limit}}}
        :return: PageCodigoSegurancaResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sort', 'page', 'limit']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method listar_por_email_using_get" % key
                )
            params[key] = val
        del params['kwargs']


        resource_path = '/api/codigos-seguranca-email'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'sort' in params:
            query_params['sort'] = params['sort']
        if 'page' in params:
            query_params['page'] = params['page']
        if 'limit' in params:
            query_params['limit'] = params['limit']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='PageCodigoSegurancaResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def listar_por_sms_using_get(self, **kwargs):
        """
        {{{codigo_seguranca_resource_listar_por_s_m_s}}}
        {{{codigo_seguranca_resource_listar_por_s_m_s_notes}}}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.listar_por_sms_using_get(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param list[str] sort: {{{global_menssagem_sort_sort}}}
        :param int page: {{{global_menssagem_sort_page_value}}}
        :param int limit: {{{global_menssagem_sort_limit}}}
        :return: PageCodigoSegurancaResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sort', 'page', 'limit']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method listar_por_sms_using_get" % key
                )
            params[key] = val
        del params['kwargs']


        resource_path = '/api/codigos-seguranca-sms'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'sort' in params:
            query_params['sort'] = params['sort']
        if 'page' in params:
            query_params['page'] = params['page']
        if 'limit' in params:
            query_params['limit'] = params['limit']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='PageCodigoSegurancaResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def listar_push_using_get(self, **kwargs):
        """
        {{{notificacao_resource_listar_push}}}
        {{{notificacao_resource_listar_push_notes}}}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.listar_push_using_get(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param list[str] sort: {{{global_menssagem_sort_sort}}}
        :param int page: {{{global_menssagem_sort_page_value}}}
        :param int limit: {{{global_menssagem_sort_limit}}}
        :param str data_envio: {{{notificacao_push_request_data_envio_value}}}
        :param str tipo_evento: {{{notificacao_push_request_tipo_evento_value}}}
        :param str status: {{{notificacao_push_request_status_value}}}
        :param str plataforma: {{{notificacao_push_request_plataforma_value}}}
        :param str protocolo: {{{notificacao_push_request_protocolo_value}}}
        :return: PagePushResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sort', 'page', 'limit', 'data_envio', 'tipo_evento', 'status', 'plataforma', 'protocolo']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method listar_push_using_get" % key
                )
            params[key] = val
        del params['kwargs']


        resource_path = '/api/notificacoes/push'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'sort' in params:
            query_params['sort'] = params['sort']
        if 'page' in params:
            query_params['page'] = params['page']
        if 'limit' in params:
            query_params['limit'] = params['limit']
        if 'data_envio' in params:
            query_params['dataEnvio'] = params['data_envio']
        if 'tipo_evento' in params:
            query_params['tipoEvento'] = params['tipo_evento']
        if 'status' in params:
            query_params['status'] = params['status']
        if 'plataforma' in params:
            query_params['plataforma'] = params['plataforma']
        if 'protocolo' in params:
            query_params['protocolo'] = params['protocolo']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='PagePushResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def listar_sms_using_get(self, **kwargs):
        """
        {{{notificacao_resource_listar_s_m_s}}}
        {{{notificacao_resource_listar_s_m_s_notes}}}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.listar_sms_using_get(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param list[str] sort: {{{global_menssagem_sort_sort}}}
        :param int page: {{{global_menssagem_sort_page_value}}}
        :param int limit: {{{global_menssagem_sort_limit}}}
        :param str data_inclusao: {{{notificacao_s_m_s_request_data_inclusao_value}}}
        :param str tipo_evento: {{{notificacao_s_m_s_request_tipo_evento_value}}}
        :param str status: {{{notificacao_s_m_s_request_status_value}}}
        :param str operadora: {{{notificacao_s_m_s_request_operadora_value}}}
        :param str protocolo: {{{notificacao_s_m_s_request_protocolo_value}}}
        :param int nsu: {{{notificacao_s_m_s_request_nsu_value}}}
        :return: PageSMSResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sort', 'page', 'limit', 'data_inclusao', 'tipo_evento', 'status', 'operadora', 'protocolo', 'nsu']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method listar_sms_using_get" % key
                )
            params[key] = val
        del params['kwargs']


        resource_path = '/api/notificacoes/sms'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'sort' in params:
            query_params['sort'] = params['sort']
        if 'page' in params:
            query_params['page'] = params['page']
        if 'limit' in params:
            query_params['limit'] = params['limit']
        if 'data_inclusao' in params:
            query_params['dataInclusao'] = params['data_inclusao']
        if 'tipo_evento' in params:
            query_params['tipoEvento'] = params['tipo_evento']
        if 'status' in params:
            query_params['status'] = params['status']
        if 'operadora' in params:
            query_params['operadora'] = params['operadora']
        if 'protocolo' in params:
            query_params['protocolo'] = params['protocolo']
        if 'nsu' in params:
            query_params['nsu'] = params['nsu']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='PageSMSResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def listar_template_notificacao_using_get(self, **kwargs):
        """
        {{{notificacao_resource_listar_template_notificacao}}}
        {{{notificacao_resource_listar_template_notificacao_notes}}}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.listar_template_notificacao_using_get(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param list[str] sort: {{{global_menssagem_sort_sort}}}
        :param int page: {{{global_menssagem_sort_page_value}}}
        :param int limit: {{{global_menssagem_sort_limit}}}
        :return: PageTemplateNotificacaoResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sort', 'page', 'limit']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method listar_template_notificacao_using_get" % key
                )
            params[key] = val
        del params['kwargs']


        resource_path = '/api/templates-notificacoes'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'sort' in params:
            query_params['sort'] = params['sort']
        if 'page' in params:
            query_params['page'] = params['page']
        if 'limit' in params:
            query_params['limit'] = params['limit']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='PageTemplateNotificacaoResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def listar_tipos_layouts_using_get(self, **kwargs):
        """
        {{{enum_resource_listar_tipos_layouts}}}
        {{{enum_resource_listar_tipos_layouts_notes}}}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.listar_tipos_layouts_using_get(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: list[object]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method listar_tipos_layouts_using_get" % key
                )
            params[key] = val
        del params['kwargs']


        resource_path = '/api/tipos-layouts'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='list[object]',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def notificacao_email_using_post(self, request, **kwargs):
        """
        {{{notificacao_resource_notificacao_email}}}
        {{{notificacao_resource_notificacao_email_notes}}}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.notificacao_email_using_post(request, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param NotificacaoEmailRequest request: request (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['request']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method notificacao_email_using_post" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'request' is set
        if ('request' not in params) or (params['request'] is None):
            raise ValueError("Missing the required parameter `request` when calling `notificacao_email_using_post`")

        resource_path = '/api/notificacoes-email'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'request' in params:
            body_params = params['request']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='object',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def reenviar_token_sms_using_post(self, persist, **kwargs):
        """
        {{{codigo_seguranca_resource_reenviar_token_s_m_s}}}
        {{{codigo_seguranca_resource_reenviar_token_s_m_s_notes}}}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.reenviar_token_sms_using_post(persist, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param CodigoSegurancaSMSPersist persist: persist (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['persist']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method reenviar_token_sms_using_post" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'persist' is set
        if ('persist' not in params) or (params['persist'] is None):
            raise ValueError("Missing the required parameter `persist` when calling `reenviar_token_sms_using_post`")

        resource_path = '/api/notificacoes-sms/reenviar-codigo-seguranca'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'persist' in params:
            body_params = params['persist']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='str',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def responder_sms_get_using_get(self, **kwargs):
        """
        {{{notificacao_resource_responder_s_m_s_get}}}
        {{{notificacao_resource_responder_s_m_s_get_notes}}}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.responder_sms_get_using_get(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str nsu: {{{notificacao_resource_responder_s_m_s_get_param_nsu}}}
        :param str data: {{{notificacao_resource_responder_s_m_s_get_param_data}}}
        :param str resposta: {{{notificacao_resource_responder_s_m_s_get_param_resposta}}}
        :return: NotificacaoSMSResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['nsu', 'data', 'resposta']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method responder_sms_get_using_get" % key
                )
            params[key] = val
        del params['kwargs']


        resource_path = '/api/notificacoes/sms/responder'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'nsu' in params:
            query_params['nsu'] = params['nsu']
        if 'data' in params:
            query_params['data'] = params['data']
        if 'resposta' in params:
            query_params['resposta'] = params['resposta']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='NotificacaoSMSResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def salvar_configuracao_using_post(self, persist, **kwargs):
        """
        {{{email_resource_salvar_configuracao}}}
        {{{email_resource_salvar_configuracao_notes}}}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.salvar_configuracao_using_post(persist, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param ConfiguracaoEmailPersist persist: persist (required)
        :return: ConfiguracaoEmailResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['persist']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method salvar_configuracao_using_post" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'persist' is set
        if ('persist' not in params) or (params['persist'] is None):
            raise ValueError("Missing the required parameter `persist` when calling `salvar_configuracao_using_post`")

        resource_path = '/api/configuracoes-email'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'persist' in params:
            body_params = params['persist']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='ConfiguracaoEmailResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def salvar_push_fcm_using_post(self, push_persists, **kwargs):
        """
        {{{notificacao_resource_salvar_push_f_c_m}}}
        {{{notificacao_resource_salvar_push_f_c_m_notes}}}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.salvar_push_fcm_using_post(push_persists, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param list[PushFCMGCMPersistValue] push_persists: pushPersists (required)
        :return: NotificacaoResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['push_persists']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method salvar_push_fcm_using_post" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'push_persists' is set
        if ('push_persists' not in params) or (params['push_persists'] is None):
            raise ValueError("Missing the required parameter `push_persists` when calling `salvar_push_fcm_using_post`")

        resource_path = '/api/notificacoes/push/fcm'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'push_persists' in params:
            body_params = params['push_persists']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='NotificacaoResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def salvar_push_gcm_using_post(self, push_persists, **kwargs):
        """
        {{{notificacao_resource_salvar_push_g_c_m}}}
        {{{notificacao_resource_salvar_push_g_c_m_notes}}}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.salvar_push_gcm_using_post(push_persists, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param list[PushFCMGCMPersistValue] push_persists: pushPersists (required)
        :return: NotificacaoResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['push_persists']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method salvar_push_gcm_using_post" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'push_persists' is set
        if ('push_persists' not in params) or (params['push_persists'] is None):
            raise ValueError("Missing the required parameter `push_persists` when calling `salvar_push_gcm_using_post`")

        resource_path = '/api/notificacoes/push/gcm'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'push_persists' in params:
            body_params = params['push_persists']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='NotificacaoResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def salvar_push_using_post(self, push_persists, **kwargs):
        """
        {{{notificacao_resource_salvar_push}}}
        {{{notificacao_resource_salvar_push_notes}}}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.salvar_push_using_post(push_persists, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param list[PushAPNSPersistValue] push_persists: pushPersists (required)
        :return: NotificacaoResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['push_persists']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method salvar_push_using_post" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'push_persists' is set
        if ('push_persists' not in params) or (params['push_persists'] is None):
            raise ValueError("Missing the required parameter `push_persists` when calling `salvar_push_using_post`")

        resource_path = '/api/notificacoes/push/apns'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'push_persists' in params:
            body_params = params['push_persists']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='NotificacaoResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def salvar_sms_using_post(self, lista_sms, **kwargs):
        """
        {{{notificacao_resource_salvar_s_m_s}}}
        {{{notificacao_resource_salvar_s_m_s_notes}}}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.salvar_sms_using_post(lista_sms, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param list[SMSPersistValue] lista_sms: listaSMS (required)
        :return: NotificacaoResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['lista_sms']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method salvar_sms_using_post" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'lista_sms' is set
        if ('lista_sms' not in params) or (params['lista_sms'] is None):
            raise ValueError("Missing the required parameter `lista_sms` when calling `salvar_sms_using_post`")

        resource_path = '/api/notificacoes/sms'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'lista_sms' in params:
            body_params = params['lista_sms']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='NotificacaoResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def salvar_template_notificacao_using_post(self, conteudo, **kwargs):
        """
        {{{notificacao_resource_salvar_template_notificacao}}}
        {{{notificacao_resource_salvar_template_notificacao_notes}}}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.salvar_template_notificacao_using_post(conteudo, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str conteudo: {{{notificacao_resource_salvar_template_notificacao_param_conteudo}}} (required)
        :param int id_configuracao_email: {{{template_notificacao_persist_id_configuracao_email_value}}}
        :param str tipo_layout: {{{template_notificacao_persist_tipo_layout_value}}}
        :param str tipo_notificacao: {{{template_notificacao_persist_tipo_notificacao_value}}}
        :param str remetente: {{{template_notificacao_persist_remetente_value}}}
        :param str assunto: {{{template_notificacao_persist_assunto_value}}}
        :param bool template_padrao: {{{template_notificacao_persist_template_padrao_value}}}
        :return: TemplateNotificacaoDetalheResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['conteudo', 'id_configuracao_email', 'tipo_layout', 'tipo_notificacao', 'remetente', 'assunto', 'template_padrao']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method salvar_template_notificacao_using_post" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'conteudo' is set
        if ('conteudo' not in params) or (params['conteudo'] is None):
            raise ValueError("Missing the required parameter `conteudo` when calling `salvar_template_notificacao_using_post`")

        resource_path = '/api/templates-notificacoes'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'id_configuracao_email' in params:
            query_params['idConfiguracaoEmail'] = params['id_configuracao_email']
        if 'tipo_layout' in params:
            query_params['tipoLayout'] = params['tipo_layout']
        if 'tipo_notificacao' in params:
            query_params['tipoNotificacao'] = params['tipo_notificacao']
        if 'remetente' in params:
            query_params['remetente'] = params['remetente']
        if 'assunto' in params:
            query_params['assunto'] = params['assunto']
        if 'template_padrao' in params:
            query_params['templatePadrao'] = params['template_padrao']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'conteudo' in params:
            body_params = params['conteudo']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['text/plain'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='TemplateNotificacaoDetalheResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def validar_token_email_using_post(self, request, **kwargs):
        """
        {{{codigo_seguranca_resource_validar_token_e_m_a_i_l}}}
        {{{codigo_seguranca_resource_validar_token_e_m_a_i_l_notes}}}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.validar_token_email_using_post(request, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param CodigoSegurancaEMAILPersist request: request (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['request']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method validar_token_email_using_post" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'request' is set
        if ('request' not in params) or (params['request'] is None):
            raise ValueError("Missing the required parameter `request` when calling `validar_token_email_using_post`")

        resource_path = '/api/notificacoes-email/validar-codigo-seguranca'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'request' in params:
            body_params = params['request']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='str',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def validar_token_sms_using_post(self, request, **kwargs):
        """
        {{{codigo_seguranca_resource_validar_token_s_m_s}}}
        {{{codigo_seguranca_resource_validar_token_s_m_s_notes}}}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.validar_token_sms_using_post(request, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param CodigoSegurancaSMSRequest request: request (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['request']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method validar_token_sms_using_post" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'request' is set
        if ('request' not in params) or (params['request'] is None):
            raise ValueError("Missing the required parameter `request` when calling `validar_token_sms_using_post`")

        resource_path = '/api/notificacoes-sms/validar-codigo-seguranca'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'request' in params:
            body_params = params['request']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='str',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response
