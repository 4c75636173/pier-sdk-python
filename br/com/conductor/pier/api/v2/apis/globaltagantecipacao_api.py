# coding: utf-8

"""
GlobaltagantecipacaoApi.py
Copyright 2016 SmartBear Software

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
"""

from __future__ import absolute_import

import sys
import os

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class GlobaltagantecipacaoApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def configurar_taxa_antecipacao_using_post(self, id, taxa_antecipacao_request, **kwargs):
        """
        {{{produto_resource_configurar_taxa_antecipacao}}}
        {{{produto_resource_configurar_taxa_antecipacao_notes}}}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.configurar_taxa_antecipacao_using_post(id, taxa_antecipacao_request, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: {{{produto_resource_configurar_taxa_antecipacao_param_id}}} (required)
        :param TaxaAntecipacaoRequest taxa_antecipacao_request: taxaAntecipacaoRequest (required)
        :return: ParametroProdutoResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'taxa_antecipacao_request']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method configurar_taxa_antecipacao_using_post" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `configurar_taxa_antecipacao_using_post`")
        # verify the required parameter 'taxa_antecipacao_request' is set
        if ('taxa_antecipacao_request' not in params) or (params['taxa_antecipacao_request'] is None):
            raise ValueError("Missing the required parameter `taxa_antecipacao_request` when calling `configurar_taxa_antecipacao_using_post`")

        resource_path = '/api/produtos/{id}/configurar-taxa-antecipacao'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'taxa_antecipacao_request' in params:
            body_params = params['taxa_antecipacao_request']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='ParametroProdutoResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def consultar_taxa_antecipacao_using_get(self, id, tipo_transacao, **kwargs):
        """
        {{{produto_resource_consultar_taxa_antecipacao}}}
        {{{produto_resource_consultar_taxa_antecipacao_notes}}}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.consultar_taxa_antecipacao_using_get(id, tipo_transacao, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: {{{produto_resource_consultar_taxa_antecipacao_param_id}}} (required)
        :param str tipo_transacao: {{{produto_resource_consultar_taxa_antecipacao_param_tipo_transacao}}} (required)
        :return: ParametroProdutoResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'tipo_transacao']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method consultar_taxa_antecipacao_using_get" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `consultar_taxa_antecipacao_using_get`")
        # verify the required parameter 'tipo_transacao' is set
        if ('tipo_transacao' not in params) or (params['tipo_transacao'] is None):
            raise ValueError("Missing the required parameter `tipo_transacao` when calling `consultar_taxa_antecipacao_using_get`")

        resource_path = '/api/produtos/{id}/consultar-taxa-antecipacao'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}
        if 'tipo_transacao' in params:
            query_params['tipoTransacao'] = params['tipo_transacao']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='ParametroProdutoResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def efetivar_antecipacao_using_post(self, id_conta, id, quantidade_parcelas, **kwargs):
        """
        {{{compra_antecipavel_resource_efetivar_antecipacao}}}
        {{{compra_antecipavel_resource_efetivar_antecipacao_notes}}}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.efetivar_antecipacao_using_post(id_conta, id, quantidade_parcelas, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id_conta: {{{compra_antecipavel_resource_efetivar_antecipacao_param_id_conta}}} (required)
        :param int id: {{{compra_antecipavel_resource_efetivar_antecipacao_param_id_compra}}} (required)
        :param int quantidade_parcelas: {{{compra_antecipavel_resource_efetivar_antecipacao_param_quantidade_parcelas}}} (required)
        :param str complemento: {{{compra_antecipavel_resource_efetivar_antecipacao_param_complemento}}}
        :return: AntecipacaoResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id_conta', 'id', 'quantidade_parcelas', 'complemento']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method efetivar_antecipacao_using_post" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'id_conta' is set
        if ('id_conta' not in params) or (params['id_conta'] is None):
            raise ValueError("Missing the required parameter `id_conta` when calling `efetivar_antecipacao_using_post`")
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `efetivar_antecipacao_using_post`")
        # verify the required parameter 'quantidade_parcelas' is set
        if ('quantidade_parcelas' not in params) or (params['quantidade_parcelas'] is None):
            raise ValueError("Missing the required parameter `quantidade_parcelas` when calling `efetivar_antecipacao_using_post`")

        resource_path = '/api/compras-antecipaveis/{id}/efetivar-antecipacao'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}
        if 'id_conta' in params:
            query_params['idConta'] = params['id_conta']
        if 'quantidade_parcelas' in params:
            query_params['quantidadeParcelas'] = params['quantidade_parcelas']
        if 'complemento' in params:
            query_params['complemento'] = params['complemento']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='AntecipacaoResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def efetivar_antecipacoes_using_post(self, id_conta, **kwargs):
        """
        {{{compra_antecipavel_resource_efetivar_antecipacoes}}}
        {{{compra_antecipavel_resource_efetivar_antecipacoes_notes}}}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.efetivar_antecipacoes_using_post(id_conta, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id_conta: {{{compra_antecipavel_resource_efetivar_antecipacoes_param_id_conta}}} (required)
        :param str complemento: {{{compra_antecipavel_resource_efetivar_antecipacoes_param_complemento}}}
        :return: AntecipacaoResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id_conta', 'complemento']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method efetivar_antecipacoes_using_post" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'id_conta' is set
        if ('id_conta' not in params) or (params['id_conta'] is None):
            raise ValueError("Missing the required parameter `id_conta` when calling `efetivar_antecipacoes_using_post`")

        resource_path = '/api/compras-antecipaveis/efetivar-antecipacao'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'id_conta' in params:
            query_params['idConta'] = params['id_conta']
        if 'complemento' in params:
            query_params['complemento'] = params['complemento']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='AntecipacaoResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def listar_using_get14(self, id_conta, **kwargs):
        """
        {{{compra_antecipavel_resource_listar}}}
        {{{compra_antecipavel_resource_listar_notes}}}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.listar_using_get14(id_conta, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id_conta: {{{compra_d_t_o_id_conta_value}}} (required)
        :param list[str] sort: {{{global_menssagem_sort_sort}}}
        :param int page: {{{global_menssagem_sort_page_value}}}
        :param int limit: {{{global_menssagem_sort_limit}}}
        :param int id_compra: {{{compra_d_t_o_id_compra_value}}}
        :param bool parcelada: {{{compra_d_t_o_parcelada_value}}}
        :param bool juros: {{{compra_d_t_o_juros_value}}}
        :param str tipo_origem_transacao: {{{compra_d_t_o_tipo_origem_transacao_value}}}
        :return: PageCompraResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id_conta', 'sort', 'page', 'limit', 'id_compra', 'parcelada', 'juros', 'tipo_origem_transacao']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method listar_using_get14" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'id_conta' is set
        if ('id_conta' not in params) or (params['id_conta'] is None):
            raise ValueError("Missing the required parameter `id_conta` when calling `listar_using_get14`")

        resource_path = '/api/compras-antecipaveis'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'sort' in params:
            query_params['sort'] = params['sort']
        if 'page' in params:
            query_params['page'] = params['page']
        if 'limit' in params:
            query_params['limit'] = params['limit']
        if 'id_compra' in params:
            query_params['idCompra'] = params['id_compra']
        if 'id_conta' in params:
            query_params['idConta'] = params['id_conta']
        if 'parcelada' in params:
            query_params['parcelada'] = params['parcelada']
        if 'juros' in params:
            query_params['juros'] = params['juros']
        if 'tipo_origem_transacao' in params:
            query_params['tipoOrigemTransacao'] = params['tipo_origem_transacao']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='PageCompraResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def simular_antecipacao_using_get(self, id_conta, id, **kwargs):
        """
        {{{compra_antecipavel_resource_simular_antecipacao}}}
        {{{compra_antecipavel_resource_simular_antecipacao_notes}}}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.simular_antecipacao_using_get(id_conta, id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id_conta: {{{compra_antecipavel_resource_simular_antecipacao_param_id_conta}}} (required)
        :param int id: {{{compra_antecipavel_resource_simular_antecipacao_param_id_evento}}} (required)
        :param str complemento: {{{compra_antecipavel_resource_simular_antecipacao_param_complemento}}}
        :return: AntecipacaoSimuladaResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id_conta', 'id', 'complemento']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method simular_antecipacao_using_get" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'id_conta' is set
        if ('id_conta' not in params) or (params['id_conta'] is None):
            raise ValueError("Missing the required parameter `id_conta` when calling `simular_antecipacao_using_get`")
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `simular_antecipacao_using_get`")

        resource_path = '/api/compras-antecipaveis/{id}/simular-antecipacao'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}
        if 'id_conta' in params:
            query_params['idConta'] = params['id_conta']
        if 'complemento' in params:
            query_params['complemento'] = params['complemento']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='AntecipacaoSimuladaResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def simular_antecipacoes_using_get(self, id_conta, **kwargs):
        """
        {{{compra_antecipavel_resource_simular_antecipacoes}}}
        {{{compra_antecipavel_resource_simular_antecipacoes_notes}}}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.simular_antecipacoes_using_get(id_conta, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id_conta: {{{compra_antecipavel_resource_simular_antecipacoes_param_id_conta}}} (required)
        :param str complemento: {{{compra_antecipavel_resource_simular_antecipacoes_param_complemento}}}
        :return: AntecipacaoSimuladaLoteResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id_conta', 'complemento']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method simular_antecipacoes_using_get" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'id_conta' is set
        if ('id_conta' not in params) or (params['id_conta'] is None):
            raise ValueError("Missing the required parameter `id_conta` when calling `simular_antecipacoes_using_get`")

        resource_path = '/api/compras-antecipaveis/simular-antecipacao'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'id_conta' in params:
            query_params['idConta'] = params['id_conta']
        if 'complemento' in params:
            query_params['complemento'] = params['complemento']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='AntecipacaoSimuladaLoteResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response
