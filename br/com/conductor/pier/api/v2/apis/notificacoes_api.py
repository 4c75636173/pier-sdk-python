# coding: utf-8

"""
NotificacoesApi.py
Copyright 2016 SmartBear Software

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
"""

from __future__ import absolute_import

import sys
import os

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class NotificacoesApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def alterar_configuracao_using_put(self, id, persist, **kwargs):
        """
        Altera configura\u00C3\u00A7\u00C3\u00B5es de E-mail
        Esse recurso permite salvar altera\u00C3\u00A7\u00C3\u00B5es de configura\u00C3\u00A7\u00C3\u00B5es de E-mail.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.alterar_configuracao_using_put(id, persist, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o da configura\u00C3\u00A7\u00C3\u00A3o de e-mail. (required)
        :param ConfiguracaoEmailPersist persist: persist (required)
        :return: ConfiguracaoEmailResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'persist']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method alterar_configuracao_using_put" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `alterar_configuracao_using_put`")
        # verify the required parameter 'persist' is set
        if ('persist' not in params) or (params['persist'] is None):
            raise ValueError("Missing the required parameter `persist` when calling `alterar_configuracao_using_put`")

        resource_path = '/api/configuracoes-email/{id}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'persist' in params:
            body_params = params['persist']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='ConfiguracaoEmailResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def alterar_template_notificacao_using_put(self, id, conteudo, **kwargs):
        """
        Alterar template de notifica\u00C3\u00A7\u00C3\u00A3o
        Esse recurso permite salvar altera\u00C3\u00A7\u00C3\u00B5es de templates notifica\u00C3\u00A7\u00C3\u00B5es.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.alterar_template_notificacao_using_put(id, conteudo, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do layout de e-mail. (required)
        :param str conteudo: Template HTML (required)
        :param int id_configuracao_email: C\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o da configra\u00C3\u00A7\u00C3\u00A3o de EMAIL.
        :param str tipo_layout: Tipo do layout.
        :param str tipo_notificacao: Tipo da notifica\u00C3\u00A7\u00C3\u00A3o.
        :param str assunto: Assunto da Notificaca\u00C3\u00A7\u00C3\u00A3o.
        :return: TemplateNotificacaoResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'conteudo', 'id_configuracao_email', 'tipo_layout', 'tipo_notificacao', 'assunto']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method alterar_template_notificacao_using_put" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `alterar_template_notificacao_using_put`")
        # verify the required parameter 'conteudo' is set
        if ('conteudo' not in params) or (params['conteudo'] is None):
            raise ValueError("Missing the required parameter `conteudo` when calling `alterar_template_notificacao_using_put`")

        resource_path = '/api/templates-notificacoes/{id}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}
        if 'id_configuracao_email' in params:
            query_params['idConfiguracaoEmail'] = params['id_configuracao_email']
        if 'tipo_layout' in params:
            query_params['tipoLayout'] = params['tipo_layout']
        if 'tipo_notificacao' in params:
            query_params['tipoNotificacao'] = params['tipo_notificacao']
        if 'assunto' in params:
            query_params['assunto'] = params['assunto']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'conteudo' in params:
            body_params = params['conteudo']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['text/plain'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='TemplateNotificacaoResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def atualizar_sms_using_post(self, **kwargs):
        """
        Atualizar SMS
        Esse recurso permite atualizar o status do SMS do emissor

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.atualizar_sms_using_post(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str nsu: Seu n\u00C3\u00BAmero
        :param str status: Status
        :param str data: Data
        :param str texto_status: TextoStatus
        :param str operadora: Operadora
        :return: NotificacaoSMSResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['nsu', 'status', 'data', 'texto_status', 'operadora']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method atualizar_sms_using_post" % key
                )
            params[key] = val
        del params['kwargs']


        resource_path = '/api/notificacoes/sms/atualizar-status'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'nsu' in params:
            query_params['nsu'] = params['nsu']
        if 'status' in params:
            query_params['status'] = params['status']
        if 'data' in params:
            query_params['data'] = params['data']
        if 'texto_status' in params:
            query_params['texto_status'] = params['texto_status']
        if 'operadora' in params:
            query_params['operadora'] = params['operadora']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='NotificacaoSMSResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def consultar_configuracao_using_get(self, id, **kwargs):
        """
        Consulta configura\u00C3\u00A7\u00C3\u00A3o de E-mail
        Esse recurso permite consultar uma configura\u00C3\u00A7\u00C3\u00A3o espec\u00C3\u00ADfica por id.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.consultar_configuracao_using_get(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o da configura\u00C3\u00A7\u00C3\u00A3o de e-mail. (required)
        :return: ConfiguracaoEmailResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method consultar_configuracao_using_get" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `consultar_configuracao_using_get`")

        resource_path = '/api/configuracoes-email/{id}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='ConfiguracaoEmailResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def consultar_template_notificacao_using_get(self, id, **kwargs):
        """
        Consulta template de notifica\u00C3\u00A7\u00C3\u00A3o
        Esse recurso permite consultar uma configura\u00C3\u00A7\u00C3\u00A3o espec\u00C3\u00ADfica por id.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.consultar_template_notificacao_using_get(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do layout de e-mail. (required)
        :return: TemplateNotificacaoResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method consultar_template_notificacao_using_get" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `consultar_template_notificacao_using_get`")

        resource_path = '/api/templates-notificacoes/{id}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='TemplateNotificacaoResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def gerar_token_using_post(self, persist, **kwargs):
        """
        Gerar c\u00C3\u00B3digo de seguran\u00C3\u00A7a e enviar por sms
        Esse recurso permite gerar e enviar c\u00C3\u00B3digos de seguran\u00C3\u00A7a por sms, para valida\u00C3\u00A7\u00C3\u00A3o de dispositivos.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.gerar_token_using_post(persist, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param CodigoSegurancaSMSPersist persist: persist (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['persist']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method gerar_token_using_post" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'persist' is set
        if ('persist' not in params) or (params['persist'] is None):
            raise ValueError("Missing the required parameter `persist` when calling `gerar_token_using_post`")

        resource_path = '/api/notificacoes-sms/gerar-codigo-seguranca'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'persist' in params:
            body_params = params['persist']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='str',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def listar_configuracao_using_get(self, **kwargs):
        """
        Lista configura\u00C3\u00A7\u00C3\u00B5es de E-mails
        Esse recurso permite listar as configura\u00C3\u00A7\u00C3\u00B5es de E-mails.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.listar_configuracao_using_get(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param list[str] sort: Tipo de ordena\u00C3\u00A7\u00C3\u00A3o dos registros.
        :param int page: P\u00C3\u00A1gina solicitada (Default = 0)
        :param int limit: Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 50, Max = 50)
        :return: PageConfiguracaoEmailResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sort', 'page', 'limit']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method listar_configuracao_using_get" % key
                )
            params[key] = val
        del params['kwargs']


        resource_path = '/api/configuracoes-email'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'sort' in params:
            query_params['sort'] = params['sort']
        if 'page' in params:
            query_params['page'] = params['page']
        if 'limit' in params:
            query_params['limit'] = params['limit']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='PageConfiguracaoEmailResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def listar_push_using_get(self, **kwargs):
        """
        Listar Push
        Esse recurso permite listar os Pushes do emissor

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.listar_push_using_get(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param list[str] sort: Tipo de ordena\u00C3\u00A7\u00C3\u00A3o dos registros.
        :param int page: P\u00C3\u00A1gina solicitada (Default = 0)
        :param int limit: Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 50, Max = 50)
        :param str data_envio: Apresenta a data e em que o registro foi enviado para o dispositivo.
        :param str tipo_evento: Nome do tipoEvento da notifica\u00C3\u00A7\u00C3\u00A3o
        :param str status: Status de envio da notifica\u00C3\u00A7\u00C3\u00A3o
        :param str plataforma: Plataforma de Push notifications.
        :param str protocolo: N\u00C3\u00BAmero do protocolo de envio de notifica\u00C3\u00A7\u00C3\u00B5es
        :return: PagePushResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sort', 'page', 'limit', 'data_envio', 'tipo_evento', 'status', 'plataforma', 'protocolo']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method listar_push_using_get" % key
                )
            params[key] = val
        del params['kwargs']


        resource_path = '/api/notificacoes/push'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'sort' in params:
            query_params['sort'] = params['sort']
        if 'page' in params:
            query_params['page'] = params['page']
        if 'limit' in params:
            query_params['limit'] = params['limit']
        if 'data_envio' in params:
            query_params['dataEnvio'] = params['data_envio']
        if 'tipo_evento' in params:
            query_params['tipoEvento'] = params['tipo_evento']
        if 'status' in params:
            query_params['status'] = params['status']
        if 'plataforma' in params:
            query_params['plataforma'] = params['plataforma']
        if 'protocolo' in params:
            query_params['protocolo'] = params['protocolo']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='PagePushResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def listar_sms_using_get(self, **kwargs):
        """
        Listar SMS
        Esse recurso permite listar os SMS do emissor

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.listar_sms_using_get(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param list[str] sort: Tipo de ordena\u00C3\u00A7\u00C3\u00A3o dos registros.
        :param int page: P\u00C3\u00A1gina solicitada (Default = 0)
        :param int limit: Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 50, Max = 50)
        :param str data_inclusao: Apresenta a data e em que o registro foi inclu\u00C3\u00ADdo na base para ser enviado
        :param str tipo_evento: Nome do tipoEvento da notifica\u00C3\u00A7\u00C3\u00A3o
        :param str status: Status de envio da notifica\u00C3\u00A7\u00C3\u00A3o
        :param str operadora: Nome da operadora a qual a notifica\u00C3\u00A7\u00C3\u00A3o foi enviada.
        :param str protocolo: N\u00C3\u00BAmero do protocolo de envio de notifica\u00C3\u00A7\u00C3\u00B5es
        :param int nsu: Apresenta o nsu da notifica\u00C3\u00A7\u00C3\u00A3o
        :return: PageSMSResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sort', 'page', 'limit', 'data_inclusao', 'tipo_evento', 'status', 'operadora', 'protocolo', 'nsu']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method listar_sms_using_get" % key
                )
            params[key] = val
        del params['kwargs']


        resource_path = '/api/notificacoes/sms'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'sort' in params:
            query_params['sort'] = params['sort']
        if 'page' in params:
            query_params['page'] = params['page']
        if 'limit' in params:
            query_params['limit'] = params['limit']
        if 'data_inclusao' in params:
            query_params['dataInclusao'] = params['data_inclusao']
        if 'tipo_evento' in params:
            query_params['tipoEvento'] = params['tipo_evento']
        if 'status' in params:
            query_params['status'] = params['status']
        if 'operadora' in params:
            query_params['operadora'] = params['operadora']
        if 'protocolo' in params:
            query_params['protocolo'] = params['protocolo']
        if 'nsu' in params:
            query_params['nsu'] = params['nsu']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='PageSMSResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def listar_template_notificacao_using_get(self, **kwargs):
        """
        Lista templates de notifica\u00C3\u00A7\u00C3\u00B5es
        Esse recurso permite listar templates notifica\u00C3\u00A7\u00C3\u00B5es.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.listar_template_notificacao_using_get(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param list[str] sort: Tipo de ordena\u00C3\u00A7\u00C3\u00A3o dos registros.
        :param int page: P\u00C3\u00A1gina solicitada (Default = 0)
        :param int limit: Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 50, Max = 50)
        :return: PageTemplateNotificacaoResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sort', 'page', 'limit']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method listar_template_notificacao_using_get" % key
                )
            params[key] = val
        del params['kwargs']


        resource_path = '/api/templates-notificacoes'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'sort' in params:
            query_params['sort'] = params['sort']
        if 'page' in params:
            query_params['page'] = params['page']
        if 'limit' in params:
            query_params['limit'] = params['limit']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='PageTemplateNotificacaoResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def listar_tipos_layouts_using_get(self, **kwargs):
        """
        Lista os tipos templates de notifica\u00C3\u00A7\u00C3\u00A3o
        Esse recurso permite listar os tipos de templates dispon\u00C3\u00ADveis os par\u00C3\u00A2metros devem ser usados entre chaves. Ex: {{nomeParametro}} .

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.listar_tipos_layouts_using_get(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: list[object]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method listar_tipos_layouts_using_get" % key
                )
            params[key] = val
        del params['kwargs']


        resource_path = '/api/tipos-layouts'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='list[object]',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def responder_sms_using_post(self, **kwargs):
        """
        Responder SMS
        Esse recurso permite atualizar a resposta do SMS, fornecida pedo usu\u00C3\u00A1rio

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.responder_sms_using_post(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str nsu: Seu n\u00C3\u00BAmero
        :param str data: Data
        :param str resposta: TextoStatus
        :return: NotificacaoSMSResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['nsu', 'data', 'resposta']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method responder_sms_using_post" % key
                )
            params[key] = val
        del params['kwargs']


        resource_path = '/api/notificacoes/sms/responder'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'nsu' in params:
            query_params['nsu'] = params['nsu']
        if 'data' in params:
            query_params['data'] = params['data']
        if 'resposta' in params:
            query_params['resposta'] = params['resposta']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='NotificacaoSMSResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def salvar_configuracao_using_post(self, persist, **kwargs):
        """
        Salva configura\u00C3\u00A7\u00C3\u00B5es de E-mail
        Esse recurso salvar configura\u00C3\u00A7\u00C3\u00B5es de E-mail.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.salvar_configuracao_using_post(persist, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param ConfiguracaoEmailPersist persist: persist (required)
        :return: ConfiguracaoEmailResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['persist']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method salvar_configuracao_using_post" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'persist' is set
        if ('persist' not in params) or (params['persist'] is None):
            raise ValueError("Missing the required parameter `persist` when calling `salvar_configuracao_using_post`")

        resource_path = '/api/configuracoes-email'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'persist' in params:
            body_params = params['persist']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='ConfiguracaoEmailResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def salvar_push_fcm_using_post(self, push_persists, **kwargs):
        """
        Enviar Push FCM
        Esse recurso permite enviar Push para um determinado dipositivo movel atrav\u00C3\u00A9s da plataforma FCM (Firebase Cloud Messaging).

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.salvar_push_fcm_using_post(push_persists, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param list[PushFCMEGCM] push_persists: pushPersists (required)
        :return: NotificacaoResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['push_persists']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method salvar_push_fcm_using_post" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'push_persists' is set
        if ('push_persists' not in params) or (params['push_persists'] is None):
            raise ValueError("Missing the required parameter `push_persists` when calling `salvar_push_fcm_using_post`")

        resource_path = '/api/notificacoes/push/fcm'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'push_persists' in params:
            body_params = params['push_persists']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='NotificacaoResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def salvar_push_gcm_using_post(self, push_persists, **kwargs):
        """
        Enviar Push GCM
        Esse recurso permite enviar Push para um determinado dipositivo movel atrav\u00C3\u00A9s da plataforma GCM (Google Cloud Messaging).

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.salvar_push_gcm_using_post(push_persists, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param list[PushFCMEGCM] push_persists: pushPersists (required)
        :return: NotificacaoResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['push_persists']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method salvar_push_gcm_using_post" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'push_persists' is set
        if ('push_persists' not in params) or (params['push_persists'] is None):
            raise ValueError("Missing the required parameter `push_persists` when calling `salvar_push_gcm_using_post`")

        resource_path = '/api/notificacoes/push/gcm'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'push_persists' in params:
            body_params = params['push_persists']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='NotificacaoResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def salvar_push_using_post(self, push_persists, **kwargs):
        """
        Enviar Push APNS
        Esse recurso permite enviar Push para um determinado dipositivo movel atrav\u00C3\u00A9s da plataforma APNS (Apple Push Notification Service).

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.salvar_push_using_post(push_persists, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param list[PushAPNS] push_persists: pushPersists (required)
        :return: NotificacaoResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['push_persists']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method salvar_push_using_post" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'push_persists' is set
        if ('push_persists' not in params) or (params['push_persists'] is None):
            raise ValueError("Missing the required parameter `push_persists` when calling `salvar_push_using_post`")

        resource_path = '/api/notificacoes/push/apns'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'push_persists' in params:
            body_params = params['push_persists']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='NotificacaoResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def salvar_sms_using_post(self, lista_sms, **kwargs):
        """
        Enviar SMS
        Esse recurso permite enviar uma lista de SMS.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.salvar_sms_using_post(lista_sms, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param list[NotificacaoSMSBody] lista_sms: listaSMS (required)
        :return: NotificacaoResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['lista_sms']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method salvar_sms_using_post" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'lista_sms' is set
        if ('lista_sms' not in params) or (params['lista_sms'] is None):
            raise ValueError("Missing the required parameter `lista_sms` when calling `salvar_sms_using_post`")

        resource_path = '/api/notificacoes/sms'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'lista_sms' in params:
            body_params = params['lista_sms']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='NotificacaoResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def salvar_template_notificacao_using_post(self, conteudo, **kwargs):
        """
        Salva template de notifica\u00C3\u00A7\u00C3\u00A3o
        Esse recurso salvar template notifica\u00C3\u00A7\u00C3\u00B5e.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.salvar_template_notificacao_using_post(conteudo, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str conteudo: Template HTML (required)
        :param int id_configuracao_email: C\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o da configra\u00C3\u00A7\u00C3\u00A3o de EMAIL.
        :param str tipo_layout: Tipo do layout.
        :param str tipo_notificacao: Tipo da notifica\u00C3\u00A7\u00C3\u00A3o.
        :param str assunto: Assunto da Notificaca\u00C3\u00A7\u00C3\u00A3o.
        :return: TemplateNotificacaoResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['conteudo', 'id_configuracao_email', 'tipo_layout', 'tipo_notificacao', 'assunto']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method salvar_template_notificacao_using_post" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'conteudo' is set
        if ('conteudo' not in params) or (params['conteudo'] is None):
            raise ValueError("Missing the required parameter `conteudo` when calling `salvar_template_notificacao_using_post`")

        resource_path = '/api/templates-notificacoes'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'id_configuracao_email' in params:
            query_params['idConfiguracaoEmail'] = params['id_configuracao_email']
        if 'tipo_layout' in params:
            query_params['tipoLayout'] = params['tipo_layout']
        if 'tipo_notificacao' in params:
            query_params['tipoNotificacao'] = params['tipo_notificacao']
        if 'assunto' in params:
            query_params['assunto'] = params['assunto']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'conteudo' in params:
            body_params = params['conteudo']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['text/plain'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='TemplateNotificacaoResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def validar_token_using_post(self, request, **kwargs):
        """
        Validar c\u00C3\u00B3digo de seguran\u00C3\u00A7a enviado por sms
        Esse recurso permite validar os c\u00C3\u00B3digos de seguran\u00C3\u00A7a enviador por sms, para valida\u00C3\u00A7\u00C3\u00A3o de dispositivos.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.validar_token_using_post(request, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param CodigoSegurancaSMSRequest request: request (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['request']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method validar_token_using_post" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'request' is set
        if ('request' not in params) or (params['request'] is None):
            raise ValueError("Missing the required parameter `request` when calling `validar_token_using_post`")

        resource_path = '/api/notificacoes-sms/validar-codigo-seguranca'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'request' in params:
            body_params = params['request']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='str',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response
