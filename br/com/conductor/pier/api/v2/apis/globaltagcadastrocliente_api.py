# coding: utf-8

"""
GlobaltagcadastroclienteApi.py
Copyright 2016 SmartBear Software

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
"""

from __future__ import absolute_import

import sys
import os

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class GlobaltagcadastroclienteApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def alterar_using_put(self, id, id_pessoa, adicional_update, **kwargs):
        """
        {{{adicional_resource_alterar}}}
        {{{adicional_resource_alterar_notes}}}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.alterar_using_put(id, id_pessoa, adicional_update, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: {{{adicional_resource_alterar_param_id_conta}}} (required)
        :param int id_pessoa: {{{adicional_resource_alterar_param_id_pessoa}}} (required)
        :param AdicionalUpdate adicional_update: adicionalUpdate (required)
        :return: AdicionalDetalheResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'id_pessoa', 'adicional_update']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method alterar_using_put" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `alterar_using_put`")
        # verify the required parameter 'id_pessoa' is set
        if ('id_pessoa' not in params) or (params['id_pessoa'] is None):
            raise ValueError("Missing the required parameter `id_pessoa` when calling `alterar_using_put`")
        # verify the required parameter 'adicional_update' is set
        if ('adicional_update' not in params) or (params['adicional_update'] is None):
            raise ValueError("Missing the required parameter `adicional_update` when calling `alterar_using_put`")

        resource_path = '/api/contas/{id}/adicionais/{idPessoa}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'id_pessoa' in params:
            path_params['idPessoa'] = params['id_pessoa']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'adicional_update' in params:
            body_params = params['adicional_update']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='AdicionalDetalheResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def alterar_using_put15(self, id, **kwargs):
        """
        {{{pessoa_detalhe_resource_alterar}}}
        {{{pessoa_detalhe_resource_alterar_notes}}}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.alterar_using_put15(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: {{{pessoa_detalhe_resource_alterar_param_id}}} (required)
        :param str nome_mae: {{{pessoa_detalhe_update_nome_mae_value}}}
        :param int id_estado_civil: {{{pessoa_detalhe_update_id_estado_civil_value}}}
        :param str id_profissao: {{{pessoa_detalhe_update_id_profissao_value}}}
        :param int id_natureza_ocupacao: {{{pessoa_detalhe_update_id_natureza_ocupacao_value}}}
        :param int id_nacionalidade: {{{pessoa_detalhe_update_id_nacionalidade_value}}}
        :param int numero_banco: {{{pessoa_detalhe_update_numero_banco_value}}}
        :param int numero_agencia: {{{pessoa_detalhe_update_numero_agencia_value}}}
        :param str numero_conta_corrente: {{{pessoa_detalhe_update_numero_conta_corrente_value}}}
        :param str email: {{{pessoa_detalhe_update_email_value}}}
        :param str nome_empresa: {{{pessoa_detalhe_update_nome_empresa_value}}}
        :return: PessoaDetalheResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nome_mae', 'id_estado_civil', 'id_profissao', 'id_natureza_ocupacao', 'id_nacionalidade', 'numero_banco', 'numero_agencia', 'numero_conta_corrente', 'email', 'nome_empresa']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method alterar_using_put15" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `alterar_using_put15`")

        resource_path = '/api/pessoas-detalhes/{id}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}
        if 'nome_mae' in params:
            query_params['nomeMae'] = params['nome_mae']
        if 'id_estado_civil' in params:
            query_params['idEstadoCivil'] = params['id_estado_civil']
        if 'id_profissao' in params:
            query_params['idProfissao'] = params['id_profissao']
        if 'id_natureza_ocupacao' in params:
            query_params['idNaturezaOcupacao'] = params['id_natureza_ocupacao']
        if 'id_nacionalidade' in params:
            query_params['idNacionalidade'] = params['id_nacionalidade']
        if 'numero_banco' in params:
            query_params['numeroBanco'] = params['numero_banco']
        if 'numero_agencia' in params:
            query_params['numeroAgencia'] = params['numero_agencia']
        if 'numero_conta_corrente' in params:
            query_params['numeroContaCorrente'] = params['numero_conta_corrente']
        if 'email' in params:
            query_params['email'] = params['email']
        if 'nome_empresa' in params:
            query_params['nomeEmpresa'] = params['nome_empresa']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='PessoaDetalheResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def alterar_using_put16(self, id, nome, tipo, data_nascimento, **kwargs):
        """
        {{{pessoa_resource_alterar}}}
        {{{pessoa_resource_alterar_notes}}}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.alterar_using_put16(id, nome, tipo, data_nascimento, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: {{{pessoa_resource_alterar_param_id}}} (required)
        :param str nome: {{{pessoa_persist_nome_value}}} (required)
        :param str tipo: {{{pessoa_persist_tipo_value}}} (required)
        :param str data_nascimento: {{{pessoa_persist_data_nascimento_value}}} (required)
        :param str cpf: {{{pessoa_persist_cpf_value}}}
        :param str cnpj: {{{pessoa_persist_cnpj_value}}}
        :param str sexo: {{{pessoa_persist_sexo_value}}}
        :param str numero_identidade: {{{pessoa_persist_numero_identidade_value}}}
        :param str orgao_expedidor_identidade: {{{pessoa_persist_orgao_expedidor_identidade_value}}}
        :param str unidade_federativa_identidade: {{{pessoa_persist_unidade_federativa_identidade_value}}}
        :param str data_emissao_identidade: {{{pessoa_persist_data_emissao_identidade_value}}}
        :return: PessoaResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nome', 'tipo', 'data_nascimento', 'cpf', 'cnpj', 'sexo', 'numero_identidade', 'orgao_expedidor_identidade', 'unidade_federativa_identidade', 'data_emissao_identidade']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method alterar_using_put16" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `alterar_using_put16`")
        # verify the required parameter 'nome' is set
        if ('nome' not in params) or (params['nome'] is None):
            raise ValueError("Missing the required parameter `nome` when calling `alterar_using_put16`")
        # verify the required parameter 'tipo' is set
        if ('tipo' not in params) or (params['tipo'] is None):
            raise ValueError("Missing the required parameter `tipo` when calling `alterar_using_put16`")
        # verify the required parameter 'data_nascimento' is set
        if ('data_nascimento' not in params) or (params['data_nascimento'] is None):
            raise ValueError("Missing the required parameter `data_nascimento` when calling `alterar_using_put16`")

        resource_path = '/api/pessoas/{id}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}
        if 'nome' in params:
            query_params['nome'] = params['nome']
        if 'tipo' in params:
            query_params['tipo'] = params['tipo']
        if 'cpf' in params:
            query_params['cpf'] = params['cpf']
        if 'cnpj' in params:
            query_params['cnpj'] = params['cnpj']
        if 'data_nascimento' in params:
            query_params['dataNascimento'] = params['data_nascimento']
        if 'sexo' in params:
            query_params['sexo'] = params['sexo']
        if 'numero_identidade' in params:
            query_params['numeroIdentidade'] = params['numero_identidade']
        if 'orgao_expedidor_identidade' in params:
            query_params['orgaoExpedidorIdentidade'] = params['orgao_expedidor_identidade']
        if 'unidade_federativa_identidade' in params:
            query_params['unidadeFederativaIdentidade'] = params['unidade_federativa_identidade']
        if 'data_emissao_identidade' in params:
            query_params['dataEmissaoIdentidade'] = params['data_emissao_identidade']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='PessoaResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def alterar_using_put18(self, id, **kwargs):
        """
        {{{telefone_resource_alterar}}}
        {{{telefone_resource_alterar_notes}}}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.alterar_using_put18(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: {{{telefone_alterar_persist_id_value}}} (required)
        :param int id_tipo_telefone: {{{telefone_alterar_persist_id_tipo_telefone_value}}}
        :param str ddd: {{{telefone_alterar_persist_ddd_value}}}
        :param str telefone: {{{telefone_alterar_persist_telefone_value}}}
        :param str ramal: {{{telefone_alterar_persist_ramal_value}}}
        :return: TelefoneResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'id_tipo_telefone', 'ddd', 'telefone', 'ramal']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method alterar_using_put18" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `alterar_using_put18`")

        resource_path = '/api/telefones'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'id' in params:
            query_params['id'] = params['id']
        if 'id_tipo_telefone' in params:
            query_params['idTipoTelefone'] = params['id_tipo_telefone']
        if 'ddd' in params:
            query_params['ddd'] = params['ddd']
        if 'telefone' in params:
            query_params['telefone'] = params['telefone']
        if 'ramal' in params:
            query_params['ramal'] = params['ramal']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='TelefoneResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def alterar_using_put5(self, id, **kwargs):
        """
        {{{endereco_resource_alterar}}}
        {{{endereco_resource_alterar_notes}}}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.alterar_using_put5(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: id (required)
        :param int id_pessoa: {{{endereco_persist_id_pessoa_value}}}
        :param int id_tipo_endereco: {{{endereco_persist_id_tipo_endereco_value}}}
        :param str cep: {{{endereco_persist_cep_value}}}
        :param str logradouro: {{{endereco_persist_logradouro_value}}}
        :param int numero: {{{endereco_persist_numero_value}}}
        :param str complemento: {{{endereco_persist_complemento_value}}}
        :param str ponto_referencia: {{{endereco_persist_ponto_referencia_value}}}
        :param str bairro: {{{endereco_persist_bairro_value}}}
        :param str cidade: {{{endereco_persist_cidade_value}}}
        :param str uf: {{{endereco_persist_uf_value}}}
        :param str pais: {{{endereco_persist_pais_value}}}
        :return: EnderecoResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'id_pessoa', 'id_tipo_endereco', 'cep', 'logradouro', 'numero', 'complemento', 'ponto_referencia', 'bairro', 'cidade', 'uf', 'pais']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method alterar_using_put5" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `alterar_using_put5`")

        resource_path = '/api/enderecos'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'id' in params:
            query_params['id'] = params['id']
        if 'id_pessoa' in params:
            query_params['idPessoa'] = params['id_pessoa']
        if 'id_tipo_endereco' in params:
            query_params['idTipoEndereco'] = params['id_tipo_endereco']
        if 'cep' in params:
            query_params['cep'] = params['cep']
        if 'logradouro' in params:
            query_params['logradouro'] = params['logradouro']
        if 'numero' in params:
            query_params['numero'] = params['numero']
        if 'complemento' in params:
            query_params['complemento'] = params['complemento']
        if 'ponto_referencia' in params:
            query_params['pontoReferencia'] = params['ponto_referencia']
        if 'bairro' in params:
            query_params['bairro'] = params['bairro']
        if 'cidade' in params:
            query_params['cidade'] = params['cidade']
        if 'uf' in params:
            query_params['uf'] = params['uf']
        if 'pais' in params:
            query_params['pais'] = params['pais']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='EnderecoResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def atribuir_assinatura_cliente_using_post(self, id, body, **kwargs):
        """
        {{{conta_pessoa_resource_atribuir_assinatura_cliente}}}
        {{{conta_pessoa_resource_atribuir_assinatura_cliente_notes}}}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.atribuir_assinatura_cliente_using_post(id, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: {{{conta_pessoa_resource_atribuir_assinatura_cliente_param_id}}} (required)
        :param AtribuirAssinaturaClientePersist body: {{{conta_pessoa_resource_atribuir_assinatura_cliente_param_body}}} (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'body']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method atribuir_assinatura_cliente_using_post" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `atribuir_assinatura_cliente_using_post`")
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `atribuir_assinatura_cliente_using_post`")

        resource_path = '/api/contas/{id}/atribuir-assinatura-cliente'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='object',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def atualizar_endereco_de_correspondencia_using_put(self, id, id_conta, **kwargs):
        """
        {{{endereco_resource_atualizar_correspondencia}}}
        {{{endereco_resource_atualizar_correspondencia_notes}}}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.atualizar_endereco_de_correspondencia_using_put(id, id_conta, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: {{{endereco_resource_atualizar_correspondencia_param_id}}} (required)
        :param int id_conta: {{{endereco_resource_atualizar_correspondencia_param_idConta}}} (required)
        :return: EnderecoResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'id_conta']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method atualizar_endereco_de_correspondencia_using_put" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `atualizar_endereco_de_correspondencia_using_put`")
        # verify the required parameter 'id_conta' is set
        if ('id_conta' not in params) or (params['id_conta'] is None):
            raise ValueError("Missing the required parameter `id_conta` when calling `atualizar_endereco_de_correspondencia_using_put`")

        resource_path = '/api/enderecos/{id}/alterar-endereco-correspondencia'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}
        if 'id_conta' in params:
            query_params['idConta'] = params['id_conta']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='EnderecoResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def atualizar_using_post(self, id, **kwargs):
        """
        {{{integracao_emissor_resource_atualizar}}}
        {{{integracao_emissor_resource_atualizar_notes}}}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.atualizar_using_post(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: {{{integracao_emissor_resource_atualizar_param_id_conta}}} (required)
        :param IntegracaoEmissorPersist body: {{{integracao_emissor_resource_atualizar_param_body}}}
        :return: IntegracaoEmissorResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'body']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method atualizar_using_post" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `atualizar_using_post`")

        resource_path = '/api/contas/{id}/atualizar-registro-integracao'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='IntegracaoEmissorResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def cadastrar_using_post(self, id, persist, **kwargs):
        """
        {{{adicional_resource_cadastrar}}}
        {{{adicional_resource_cadastrar_notes}}}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.cadastrar_using_post(id, persist, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: {{{adicional_resource_cadastrar_param_id_conta}}} (required)
        :param AdicionalPersist persist: persist (required)
        :return: AdicionalDetalheResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'persist']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cadastrar_using_post" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `cadastrar_using_post`")
        # verify the required parameter 'persist' is set
        if ('persist' not in params) or (params['persist'] is None):
            raise ValueError("Missing the required parameter `persist` when calling `cadastrar_using_post`")

        resource_path = '/api/contas/{id}/cadastrar-adicional'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'persist' in params:
            body_params = params['persist']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='AdicionalDetalheResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def consultar_using_get1(self, id, id_pessoa, **kwargs):
        """
        {{{adicional_resource_consultar}}}
        {{{adicional_resource_consultar_notes}}}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.consultar_using_get1(id, id_pessoa, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: {{{adicional_resource_consultar_param_id_conta}}} (required)
        :param int id_pessoa: {{{adicional_resource_consultar_param_id_pessoa}}} (required)
        :return: AdicionalDetalheResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'id_pessoa']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method consultar_using_get1" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `consultar_using_get1`")
        # verify the required parameter 'id_pessoa' is set
        if ('id_pessoa' not in params) or (params['id_pessoa'] is None):
            raise ValueError("Missing the required parameter `id_pessoa` when calling `consultar_using_get1`")

        resource_path = '/api/contas/{id}/adicionais/{idPessoa}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'id_pessoa' in params:
            path_params['idPessoa'] = params['id_pessoa']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='AdicionalDetalheResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def consultar_using_get18(self, id, **kwargs):
        """
        {{{endereco_resource_consultar}}}
        {{{endereco_resource_consultar_notes}}}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.consultar_using_get18(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: {{{endereco_resource_consultar_param_id}}} (required)
        :return: EnderecoResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method consultar_using_get18" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `consultar_using_get18`")

        resource_path = '/api/enderecos/{id}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='EnderecoResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def consultar_using_get29(self, id, **kwargs):
        """
        {{{pessoa_detalhe_resource_consultar}}}
        {{{pessoa_detalhe_resource_consultar_notes}}}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.consultar_using_get29(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: {{{pessoa_detalhe_resource_consultar_param_id}}} (required)
        :return: PessoaDetalheResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method consultar_using_get29" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `consultar_using_get29`")

        resource_path = '/api/pessoas-detalhes/{id}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='PessoaDetalheResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def consultar_using_get30(self, id, **kwargs):
        """
        {{{pessoa_resource_consultar}}}
        {{{pessoa_resource_consultar_notes}}}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.consultar_using_get30(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: {{{pessoa_resource_consultar_param_id}}} (required)
        :return: PessoaResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method consultar_using_get30" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `consultar_using_get30`")

        resource_path = '/api/pessoas/{id}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='PessoaResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def consultar_using_get38(self, id, **kwargs):
        """
        {{{telefone_resource_consultar}}}
        {{{telefone_resource_consultar_notes}}}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.consultar_using_get38(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: {{{telefone_resource_consultar_param_id}}} (required)
        :return: TelefoneResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method consultar_using_get38" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `consultar_using_get38`")

        resource_path = '/api/telefones/{id}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='TelefoneResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def inativar_using_post(self, id, id_pessoa, **kwargs):
        """
        {{{adicional_resource_inativar}}}
        {{{adicional_resource_inativar_notes}}}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.inativar_using_post(id, id_pessoa, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: {{{adicional_resource_inativar_param_id_conta}}} (required)
        :param int id_pessoa: {{{adicional_resource_inativar_param_id_pessoa}}} (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'id_pessoa']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method inativar_using_post" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `inativar_using_post`")
        # verify the required parameter 'id_pessoa' is set
        if ('id_pessoa' not in params) or (params['id_pessoa'] is None):
            raise ValueError("Missing the required parameter `id_pessoa` when calling `inativar_using_post`")

        resource_path = '/api/contas/{id}/adicionais/{idPessoa}/inativar'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'id_pessoa' in params:
            path_params['idPessoa'] = params['id_pessoa']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='str',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def listar_socios_using_get(self, id, **kwargs):
        """
        {{{conta_pessoa_resource_listar_socios}}}
        {{{conta_pessoa_resource_listar_socios_notes}}}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.listar_socios_using_get(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: {{{conta_pessoa_resource_listar_socios_param_id}}} (required)
        :param list[str] sort: {{{global_menssagem_sort_sort}}}
        :param int page: {{{global_menssagem_sort_page_value}}}
        :param int limit: {{{global_menssagem_sort_limit}}}
        :return: PagePessoaResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'sort', 'page', 'limit']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method listar_socios_using_get" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `listar_socios_using_get`")

        resource_path = '/api/clientes-pessoas-juridicas/{id}/socios'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}
        if 'sort' in params:
            query_params['sort'] = params['sort']
        if 'page' in params:
            query_params['page'] = params['page']
        if 'limit' in params:
            query_params['limit'] = params['limit']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='PagePessoaResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def listar_using_get1(self, id, **kwargs):
        """
        {{{adicional_resource_listar}}}
        {{{adicional_resource_listar_notes}}}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.listar_using_get1(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: {{{adicional_resource_listar_param_id_conta}}} (required)
        :param list[str] sort: {{{global_menssagem_sort_sort}}}
        :param int page: {{{global_menssagem_sort_page_value}}}
        :param int limit: {{{global_menssagem_sort_limit}}}
        :return: AdicionalResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'sort', 'page', 'limit']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method listar_using_get1" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `listar_using_get1`")

        resource_path = '/api/contas/{id}/adicionais'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}
        if 'sort' in params:
            query_params['sort'] = params['sort']
        if 'page' in params:
            query_params['page'] = params['page']
        if 'limit' in params:
            query_params['limit'] = params['limit']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='AdicionalResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def listar_using_get24(self, **kwargs):
        """
        {{{endereco_resource_listar}}}
        {{{endereco_resource_listar_notes}}}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.listar_using_get24(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param list[str] sort: {{{global_menssagem_sort_sort}}}
        :param int page: {{{global_menssagem_sort_page_value}}}
        :param int limit: {{{global_menssagem_sort_limit}}}
        :param int id: {{{endereco_request_id_value}}}
        :param int id_pessoa: {{{endereco_request_id_pessoa_value}}}
        :param int id_tipo_endereco: {{{endereco_request_id_tipo_endereco_value}}}
        :param str cep: {{{endereco_request_cep_value}}}
        :param str logradouro: {{{endereco_request_logradouro_value}}}
        :param int numero: {{{endereco_request_numero_value}}}
        :param str complemento: {{{endereco_request_complemento_value}}}
        :param str ponto_referencia: {{{endereco_request_ponto_referencia_value}}}
        :param str bairro: {{{endereco_request_bairro_value}}}
        :param str cidade: {{{endereco_request_cidade_value}}}
        :param str uf: {{{endereco_request_uf_value}}}
        :param str pais: {{{endereco_request_pais_value}}}
        :param str data_inclusao: {{{endereco_request_data_inclusao_value}}}
        :param str data_ultima_atualizacao: {{{endereco_request_data_ultima_atualizacao_value}}}
        :return: PageEnderecoResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sort', 'page', 'limit', 'id', 'id_pessoa', 'id_tipo_endereco', 'cep', 'logradouro', 'numero', 'complemento', 'ponto_referencia', 'bairro', 'cidade', 'uf', 'pais', 'data_inclusao', 'data_ultima_atualizacao']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method listar_using_get24" % key
                )
            params[key] = val
        del params['kwargs']


        resource_path = '/api/enderecos'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'sort' in params:
            query_params['sort'] = params['sort']
        if 'page' in params:
            query_params['page'] = params['page']
        if 'limit' in params:
            query_params['limit'] = params['limit']
        if 'id' in params:
            query_params['id'] = params['id']
        if 'id_pessoa' in params:
            query_params['idPessoa'] = params['id_pessoa']
        if 'id_tipo_endereco' in params:
            query_params['idTipoEndereco'] = params['id_tipo_endereco']
        if 'cep' in params:
            query_params['cep'] = params['cep']
        if 'logradouro' in params:
            query_params['logradouro'] = params['logradouro']
        if 'numero' in params:
            query_params['numero'] = params['numero']
        if 'complemento' in params:
            query_params['complemento'] = params['complemento']
        if 'ponto_referencia' in params:
            query_params['pontoReferencia'] = params['ponto_referencia']
        if 'bairro' in params:
            query_params['bairro'] = params['bairro']
        if 'cidade' in params:
            query_params['cidade'] = params['cidade']
        if 'uf' in params:
            query_params['uf'] = params['uf']
        if 'pais' in params:
            query_params['pais'] = params['pais']
        if 'data_inclusao' in params:
            query_params['dataInclusao'] = params['data_inclusao']
        if 'data_ultima_atualizacao' in params:
            query_params['dataUltimaAtualizacao'] = params['data_ultima_atualizacao']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='PageEnderecoResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def listar_using_get38(self, **kwargs):
        """
        {{{pessoa_detalhe_resource_listar}}}
        {{{pessoa_detalhe_resource_listar_notes}}}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.listar_using_get38(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param list[str] sort: {{{global_menssagem_sort_sort}}}
        :param int page: {{{global_menssagem_sort_page_value}}}
        :param int limit: {{{global_menssagem_sort_limit}}}
        :param int id_pessoa: {{{pessoa_detalhe_request_id_pessoa_value}}}
        :param str nome_mae: {{{pessoa_detalhe_request_nome_mae_value}}}
        :param int id_estado_civil: {{{pessoa_detalhe_request_id_estado_civil_value}}}
        :param str id_profissao: {{{pessoa_detalhe_request_id_profissao_value}}}
        :param int id_natureza_ocupacao: {{{pessoa_detalhe_request_id_natureza_ocupacao_value}}}
        :param int id_nacionalidade: {{{pessoa_detalhe_request_id_nacionalidade_value}}}
        :param int numero_banco: {{{pessoa_detalhe_request_numero_banco_value}}}
        :param int numero_agencia: {{{pessoa_detalhe_request_numero_agencia_value}}}
        :param str numero_conta_corrente: {{{pessoa_detalhe_request_numero_conta_corrente_value}}}
        :param str email: {{{pessoa_detalhe_request_email_value}}}
        :param str nome_empresa: {{{pessoa_detalhe_request_nome_empresa_value}}}
        :return: PagePessoaDetalheResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sort', 'page', 'limit', 'id_pessoa', 'nome_mae', 'id_estado_civil', 'id_profissao', 'id_natureza_ocupacao', 'id_nacionalidade', 'numero_banco', 'numero_agencia', 'numero_conta_corrente', 'email', 'nome_empresa']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method listar_using_get38" % key
                )
            params[key] = val
        del params['kwargs']


        resource_path = '/api/pessoas-detalhes'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'sort' in params:
            query_params['sort'] = params['sort']
        if 'page' in params:
            query_params['page'] = params['page']
        if 'limit' in params:
            query_params['limit'] = params['limit']
        if 'id_pessoa' in params:
            query_params['idPessoa'] = params['id_pessoa']
        if 'nome_mae' in params:
            query_params['nomeMae'] = params['nome_mae']
        if 'id_estado_civil' in params:
            query_params['idEstadoCivil'] = params['id_estado_civil']
        if 'id_profissao' in params:
            query_params['idProfissao'] = params['id_profissao']
        if 'id_natureza_ocupacao' in params:
            query_params['idNaturezaOcupacao'] = params['id_natureza_ocupacao']
        if 'id_nacionalidade' in params:
            query_params['idNacionalidade'] = params['id_nacionalidade']
        if 'numero_banco' in params:
            query_params['numeroBanco'] = params['numero_banco']
        if 'numero_agencia' in params:
            query_params['numeroAgencia'] = params['numero_agencia']
        if 'numero_conta_corrente' in params:
            query_params['numeroContaCorrente'] = params['numero_conta_corrente']
        if 'email' in params:
            query_params['email'] = params['email']
        if 'nome_empresa' in params:
            query_params['nomeEmpresa'] = params['nome_empresa']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='PagePessoaDetalheResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def listar_using_get39(self, **kwargs):
        """
        {{{pessoa_resource_listar}}}
        {{{pessoa_resource_listar_notes}}}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.listar_using_get39(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param list[str] sort: {{{global_menssagem_sort_sort}}}
        :param int page: {{{global_menssagem_sort_page_value}}}
        :param int limit: {{{global_menssagem_sort_limit}}}
        :param int id: {{{pessoa_request_id_value}}}
        :param str nome: {{{pessoa_request_nome_value}}}
        :param str tipo: {{{pessoa_request_tipo_value}}}
        :param str cpf: {{{pessoa_request_cpf_value}}}
        :param str cnpj: {{{pessoa_request_cnpj_value}}}
        :param str data_nascimento: {{{pessoa_request_data_nascimento_value}}}
        :param str sexo: {{{pessoa_request_sexo_value}}}
        :param str numero_identidade: {{{pessoa_request_numero_identidade_value}}}
        :param str orgao_expedidor_identidade: {{{pessoa_request_orgao_expedidor_identidade_value}}}
        :param str unidade_federativa_identidade: {{{pessoa_request_unidade_federativa_identidade_value}}}
        :param str data_emissao_identidade: {{{pessoa_request_data_emissao_identidade_value}}}
        :return: PagePessoaResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sort', 'page', 'limit', 'id', 'nome', 'tipo', 'cpf', 'cnpj', 'data_nascimento', 'sexo', 'numero_identidade', 'orgao_expedidor_identidade', 'unidade_federativa_identidade', 'data_emissao_identidade']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method listar_using_get39" % key
                )
            params[key] = val
        del params['kwargs']


        resource_path = '/api/pessoas'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'sort' in params:
            query_params['sort'] = params['sort']
        if 'page' in params:
            query_params['page'] = params['page']
        if 'limit' in params:
            query_params['limit'] = params['limit']
        if 'id' in params:
            query_params['id'] = params['id']
        if 'nome' in params:
            query_params['nome'] = params['nome']
        if 'tipo' in params:
            query_params['tipo'] = params['tipo']
        if 'cpf' in params:
            query_params['cpf'] = params['cpf']
        if 'cnpj' in params:
            query_params['cnpj'] = params['cnpj']
        if 'data_nascimento' in params:
            query_params['dataNascimento'] = params['data_nascimento']
        if 'sexo' in params:
            query_params['sexo'] = params['sexo']
        if 'numero_identidade' in params:
            query_params['numeroIdentidade'] = params['numero_identidade']
        if 'orgao_expedidor_identidade' in params:
            query_params['orgaoExpedidorIdentidade'] = params['orgao_expedidor_identidade']
        if 'unidade_federativa_identidade' in params:
            query_params['unidadeFederativaIdentidade'] = params['unidade_federativa_identidade']
        if 'data_emissao_identidade' in params:
            query_params['dataEmissaoIdentidade'] = params['data_emissao_identidade']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='PagePessoaResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def listar_using_get50(self, **kwargs):
        """
        {{{telefone_resource_listar}}}
        {{{telefone_resource_listar_notes}}}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.listar_using_get50(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param list[str] sort: {{{global_menssagem_sort_sort}}}
        :param int page: {{{global_menssagem_sort_page_value}}}
        :param int limit: {{{global_menssagem_sort_limit}}}
        :param int id: {{{telefone_request_id_value}}}
        :param int id_tipo_telefone: {{{telefone_request_id_tipo_telefone_value}}}
        :param int id_pessoa: {{{telefone_request_id_pessoa_value}}}
        :param str ddd: {{{telefone_request_ddd_value}}}
        :param str telefone: {{{telefone_request_telefone_value}}}
        :param str ramal: {{{telefone_request_ramal_value}}}
        :param int status: {{{telefone_request_status_value}}}
        :return: PageTelefoneResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sort', 'page', 'limit', 'id', 'id_tipo_telefone', 'id_pessoa', 'ddd', 'telefone', 'ramal', 'status']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method listar_using_get50" % key
                )
            params[key] = val
        del params['kwargs']


        resource_path = '/api/telefones'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'sort' in params:
            query_params['sort'] = params['sort']
        if 'page' in params:
            query_params['page'] = params['page']
        if 'limit' in params:
            query_params['limit'] = params['limit']
        if 'id' in params:
            query_params['id'] = params['id']
        if 'id_tipo_telefone' in params:
            query_params['idTipoTelefone'] = params['id_tipo_telefone']
        if 'id_pessoa' in params:
            query_params['idPessoa'] = params['id_pessoa']
        if 'ddd' in params:
            query_params['ddd'] = params['ddd']
        if 'telefone' in params:
            query_params['telefone'] = params['telefone']
        if 'ramal' in params:
            query_params['ramal'] = params['ramal']
        if 'status' in params:
            query_params['status'] = params['status']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='PageTelefoneResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def salvar_pessoa_fisica_aprovada_using_post(self, pessoa_persist, **kwargs):
        """
        {{{conta_pessoa_resource_salvar_pessoa_fisica_aprovada}}}
        {{{conta_pessoa_resource_salvar_pessoa_fisica_aprovada_notes}}}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.salvar_pessoa_fisica_aprovada_using_post(pessoa_persist, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param PessoaFisicaAprovadaPersistValue pessoa_persist: pessoaPersist (required)
        :return: PessoaFisicaAprovadaResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['pessoa_persist']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method salvar_pessoa_fisica_aprovada_using_post" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'pessoa_persist' is set
        if ('pessoa_persist' not in params) or (params['pessoa_persist'] is None):
            raise ValueError("Missing the required parameter `pessoa_persist` when calling `salvar_pessoa_fisica_aprovada_using_post`")

        resource_path = '/api/clientes-pessoas-fisicas'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'pessoa_persist' in params:
            body_params = params['pessoa_persist']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='PessoaFisicaAprovadaResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def salvar_pessoa_juridica_aprovada_using_post(self, pessoa_persist, **kwargs):
        """
        {{{conta_pessoa_resource_salvar_pessoa_juridica_aprovada}}}
        {{{conta_pessoa_resource_salvar_pessoa_juridica_aprovada_notes}}}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.salvar_pessoa_juridica_aprovada_using_post(pessoa_persist, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param PessoaJuridicaAprovadaPersist pessoa_persist: pessoaPersist (required)
        :return: PessoaJuridicaAprovadaResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['pessoa_persist']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method salvar_pessoa_juridica_aprovada_using_post" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'pessoa_persist' is set
        if ('pessoa_persist' not in params) or (params['pessoa_persist'] is None):
            raise ValueError("Missing the required parameter `pessoa_persist` when calling `salvar_pessoa_juridica_aprovada_using_post`")

        resource_path = '/api/clientes-pessoas-juridicas'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'pessoa_persist' in params:
            body_params = params['pessoa_persist']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='PessoaJuridicaAprovadaResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def salvar_using_post13(self, **kwargs):
        """
        {{{endereco_resource_salvar}}}
        {{{endereco_resource_salvar_notes}}}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.salvar_using_post13(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id_pessoa: {{{endereco_persist_id_pessoa_value}}}
        :param int id_tipo_endereco: {{{endereco_persist_id_tipo_endereco_value}}}
        :param str cep: {{{endereco_persist_cep_value}}}
        :param str logradouro: {{{endereco_persist_logradouro_value}}}
        :param int numero: {{{endereco_persist_numero_value}}}
        :param str complemento: {{{endereco_persist_complemento_value}}}
        :param str ponto_referencia: {{{endereco_persist_ponto_referencia_value}}}
        :param str bairro: {{{endereco_persist_bairro_value}}}
        :param str cidade: {{{endereco_persist_cidade_value}}}
        :param str uf: {{{endereco_persist_uf_value}}}
        :param str pais: {{{endereco_persist_pais_value}}}
        :return: EnderecoResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id_pessoa', 'id_tipo_endereco', 'cep', 'logradouro', 'numero', 'complemento', 'ponto_referencia', 'bairro', 'cidade', 'uf', 'pais']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method salvar_using_post13" % key
                )
            params[key] = val
        del params['kwargs']


        resource_path = '/api/enderecos'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'id_pessoa' in params:
            query_params['idPessoa'] = params['id_pessoa']
        if 'id_tipo_endereco' in params:
            query_params['idTipoEndereco'] = params['id_tipo_endereco']
        if 'cep' in params:
            query_params['cep'] = params['cep']
        if 'logradouro' in params:
            query_params['logradouro'] = params['logradouro']
        if 'numero' in params:
            query_params['numero'] = params['numero']
        if 'complemento' in params:
            query_params['complemento'] = params['complemento']
        if 'ponto_referencia' in params:
            query_params['pontoReferencia'] = params['ponto_referencia']
        if 'bairro' in params:
            query_params['bairro'] = params['bairro']
        if 'cidade' in params:
            query_params['cidade'] = params['cidade']
        if 'uf' in params:
            query_params['uf'] = params['uf']
        if 'pais' in params:
            query_params['pais'] = params['pais']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='EnderecoResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def salvar_using_post16(self, id, **kwargs):
        """
        {{{integracao_emissor_resource_salvar}}}
        {{{integracao_emissor_resource_salvar_notes}}}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.salvar_using_post16(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: {{{integracao_emissor_resource_salvar_param_id_conta}}} (required)
        :param IntegracaoEmissorPersist body: {{{integracao_emissor_resource_salvar_param_body}}}
        :return: IntegracaoEmissorResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'body']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method salvar_using_post16" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `salvar_using_post16`")

        resource_path = '/api/contas/{id}/incluir-registro-integracao'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='IntegracaoEmissorResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def salvar_using_post24(self, id_pessoa, **kwargs):
        """
        {{{pessoa_detalhe_resource_salvar}}}
        {{{pessoa_detalhe_resource_salvar_notes}}}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.salvar_using_post24(id_pessoa, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id_pessoa: {{{pessoa_detalhe_persist_id_pessoa_value}}} (required)
        :param str nome_mae: {{{pessoa_detalhe_persist_nome_mae_value}}}
        :param int id_estado_civil: {{{pessoa_detalhe_persist_id_estado_civil_value}}}
        :param str id_profissao: {{{pessoa_detalhe_persist_id_profissao_value}}}
        :param int id_natureza_ocupacao: {{{pessoa_detalhe_persist_id_natureza_ocupacao_value}}}
        :param int id_nacionalidade: {{{pessoa_detalhe_persist_id_nacionalidade_value}}}
        :param int numero_banco: {{{pessoa_detalhe_persist_numero_banco_value}}}
        :param int numero_agencia: {{{pessoa_detalhe_persist_numero_agencia_value}}}
        :param str numero_conta_corrente: {{{pessoa_detalhe_persist_numero_conta_corrente_value}}}
        :param str email: {{{pessoa_detalhe_persist_email_value}}}
        :param str nome_empresa: {{{pessoa_detalhe_persist_nome_empresa_value}}}
        :return: PessoaDetalheResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id_pessoa', 'nome_mae', 'id_estado_civil', 'id_profissao', 'id_natureza_ocupacao', 'id_nacionalidade', 'numero_banco', 'numero_agencia', 'numero_conta_corrente', 'email', 'nome_empresa']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method salvar_using_post24" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'id_pessoa' is set
        if ('id_pessoa' not in params) or (params['id_pessoa'] is None):
            raise ValueError("Missing the required parameter `id_pessoa` when calling `salvar_using_post24`")

        resource_path = '/api/pessoas-detalhes'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'id_pessoa' in params:
            query_params['idPessoa'] = params['id_pessoa']
        if 'nome_mae' in params:
            query_params['nomeMae'] = params['nome_mae']
        if 'id_estado_civil' in params:
            query_params['idEstadoCivil'] = params['id_estado_civil']
        if 'id_profissao' in params:
            query_params['idProfissao'] = params['id_profissao']
        if 'id_natureza_ocupacao' in params:
            query_params['idNaturezaOcupacao'] = params['id_natureza_ocupacao']
        if 'id_nacionalidade' in params:
            query_params['idNacionalidade'] = params['id_nacionalidade']
        if 'numero_banco' in params:
            query_params['numeroBanco'] = params['numero_banco']
        if 'numero_agencia' in params:
            query_params['numeroAgencia'] = params['numero_agencia']
        if 'numero_conta_corrente' in params:
            query_params['numeroContaCorrente'] = params['numero_conta_corrente']
        if 'email' in params:
            query_params['email'] = params['email']
        if 'nome_empresa' in params:
            query_params['nomeEmpresa'] = params['nome_empresa']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='PessoaDetalheResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def salvar_using_post25(self, nome, tipo, data_nascimento, **kwargs):
        """
        {{{pessoa_resource_salvar}}}
        {{{pessoa_resource_salvar_notes}}}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.salvar_using_post25(nome, tipo, data_nascimento, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str nome: {{{pessoa_persist_nome_value}}} (required)
        :param str tipo: {{{pessoa_persist_tipo_value}}} (required)
        :param str data_nascimento: {{{pessoa_persist_data_nascimento_value}}} (required)
        :param str cpf: {{{pessoa_persist_cpf_value}}}
        :param str cnpj: {{{pessoa_persist_cnpj_value}}}
        :param str sexo: {{{pessoa_persist_sexo_value}}}
        :param str numero_identidade: {{{pessoa_persist_numero_identidade_value}}}
        :param str orgao_expedidor_identidade: {{{pessoa_persist_orgao_expedidor_identidade_value}}}
        :param str unidade_federativa_identidade: {{{pessoa_persist_unidade_federativa_identidade_value}}}
        :param str data_emissao_identidade: {{{pessoa_persist_data_emissao_identidade_value}}}
        :return: PessoaResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['nome', 'tipo', 'data_nascimento', 'cpf', 'cnpj', 'sexo', 'numero_identidade', 'orgao_expedidor_identidade', 'unidade_federativa_identidade', 'data_emissao_identidade']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method salvar_using_post25" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'nome' is set
        if ('nome' not in params) or (params['nome'] is None):
            raise ValueError("Missing the required parameter `nome` when calling `salvar_using_post25`")
        # verify the required parameter 'tipo' is set
        if ('tipo' not in params) or (params['tipo'] is None):
            raise ValueError("Missing the required parameter `tipo` when calling `salvar_using_post25`")
        # verify the required parameter 'data_nascimento' is set
        if ('data_nascimento' not in params) or (params['data_nascimento'] is None):
            raise ValueError("Missing the required parameter `data_nascimento` when calling `salvar_using_post25`")

        resource_path = '/api/pessoas'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'nome' in params:
            query_params['nome'] = params['nome']
        if 'tipo' in params:
            query_params['tipo'] = params['tipo']
        if 'cpf' in params:
            query_params['cpf'] = params['cpf']
        if 'cnpj' in params:
            query_params['cnpj'] = params['cnpj']
        if 'data_nascimento' in params:
            query_params['dataNascimento'] = params['data_nascimento']
        if 'sexo' in params:
            query_params['sexo'] = params['sexo']
        if 'numero_identidade' in params:
            query_params['numeroIdentidade'] = params['numero_identidade']
        if 'orgao_expedidor_identidade' in params:
            query_params['orgaoExpedidorIdentidade'] = params['orgao_expedidor_identidade']
        if 'unidade_federativa_identidade' in params:
            query_params['unidadeFederativaIdentidade'] = params['unidade_federativa_identidade']
        if 'data_emissao_identidade' in params:
            query_params['dataEmissaoIdentidade'] = params['data_emissao_identidade']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='PessoaResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def salvar_using_post28(self, **kwargs):
        """
        {{{telefone_resource_salvar}}}
        {{{telefone_resource_salvar_notes}}}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.salvar_using_post28(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id_tipo_telefone: {{{telefone_persist_id_tipo_telefone_value}}}
        :param int id_pessoa: {{{telefone_persist_id_pessoa_value}}}
        :param str ddd: {{{telefone_persist_ddd_value}}}
        :param str telefone: {{{telefone_persist_telefone_value}}}
        :param str ramal: {{{telefone_persist_ramal_value}}}
        :return: TelefoneResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id_tipo_telefone', 'id_pessoa', 'ddd', 'telefone', 'ramal']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method salvar_using_post28" % key
                )
            params[key] = val
        del params['kwargs']


        resource_path = '/api/telefones'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'id_tipo_telefone' in params:
            query_params['idTipoTelefone'] = params['id_tipo_telefone']
        if 'id_pessoa' in params:
            query_params['idPessoa'] = params['id_pessoa']
        if 'ddd' in params:
            query_params['ddd'] = params['ddd']
        if 'telefone' in params:
            query_params['telefone'] = params['telefone']
        if 'ramal' in params:
            query_params['ramal'] = params['ramal']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='TelefoneResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response
