# coding: utf-8

"""
GlobaltagoportunidadeApi.py
Copyright 2016 SmartBear Software

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
"""

from __future__ import absolute_import

import sys
import os

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class GlobaltagoportunidadeApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def alterar_status_using_put(self, id, id_status, persist, **kwargs):
        """
        {{{tipo_oportunidade_resource_alterar_status}}}
        {{{tipo_oportunidade_resource_alterar_status_notes}}}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.alterar_status_using_put(id, id_status, persist, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: {{{tipo_oportunidade_resource_alterar_status_param_id}}} (required)
        :param int id_status: {{{tipo_oportunidade_resource_alterar_status_param_id_status}}} (required)
        :param StatusOportunidadePersistValue persist: persist (required)
        :return: StatusOportunidadeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'id_status', 'persist']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method alterar_status_using_put" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `alterar_status_using_put`")
        # verify the required parameter 'id_status' is set
        if ('id_status' not in params) or (params['id_status'] is None):
            raise ValueError("Missing the required parameter `id_status` when calling `alterar_status_using_put`")
        # verify the required parameter 'persist' is set
        if ('persist' not in params) or (params['persist'] is None):
            raise ValueError("Missing the required parameter `persist` when calling `alterar_status_using_put`")

        resource_path = '/api/tipos-oportunidades/{id}/status/{idStatus}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'id_status' in params:
            path_params['idStatus'] = params['id_status']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'persist' in params:
            body_params = params['persist']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='StatusOportunidadeResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def alterar_using_put12(self, id, update, **kwargs):
        """
        {{{oportunidade_resource_alterar}}}
        {{{oportunidade_resource_alterar_notes}}}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.alterar_using_put12(id, update, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: {{{oportunidade_resource_alterar_param_id}}} (required)
        :param OportunidadeUpdateValue update: update (required)
        :return: OportunidadeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'update']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method alterar_using_put12" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `alterar_using_put12`")
        # verify the required parameter 'update' is set
        if ('update' not in params) or (params['update'] is None):
            raise ValueError("Missing the required parameter `update` when calling `alterar_using_put12`")

        resource_path = '/api/oportunidades/{id}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'update' in params:
            body_params = params['update']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='OportunidadeResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def alterar_using_put20(self, id, persist, **kwargs):
        """
        {{{tipo_oportunidade_resource_alterar}}}
        {{{tipo_oportunidade_resource_alterar_notes}}}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.alterar_using_put20(id, persist, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: {{{tipo_oportunidade_resource_alterar_param_id}}} (required)
        :param TipoOportunidadePersistValue persist: persist (required)
        :return: TipoOportunidadeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'persist']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method alterar_using_put20" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `alterar_using_put20`")
        # verify the required parameter 'persist' is set
        if ('persist' not in params) or (params['persist'] is None):
            raise ValueError("Missing the required parameter `persist` when calling `alterar_using_put20`")

        resource_path = '/api/tipos-oportunidades/{id}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'persist' in params:
            body_params = params['persist']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='TipoOportunidadeResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def consultar_status_using_get(self, id, id_status, **kwargs):
        """
        {{{tipo_oportunidade_resource_consultar_status}}}
        {{{tipo_oportunidade_resource_consultar_status_notes}}}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.consultar_status_using_get(id, id_status, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: {{{tipo_oportunidade_resource_consultar_status_param_id}}} (required)
        :param int id_status: {{{tipo_oportunidade_resource_consultar_status_param_id_status}}} (required)
        :return: StatusOportunidadeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'id_status']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method consultar_status_using_get" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `consultar_status_using_get`")
        # verify the required parameter 'id_status' is set
        if ('id_status' not in params) or (params['id_status'] is None):
            raise ValueError("Missing the required parameter `id_status` when calling `consultar_status_using_get`")

        resource_path = '/api/tipos-oportunidades/{id}/status/{idStatus}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'id_status' in params:
            path_params['idStatus'] = params['id_status']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='StatusOportunidadeResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def consultar_using_get25(self, id, **kwargs):
        """
        {{{oportunidade_resource_consultar}}}
        {{{oportunidade_resource_consultar_notes}}}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.consultar_using_get25(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: {{{oportunidade_resource_consultar_param_id}}} (required)
        :return: OportunidadeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method consultar_using_get25" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `consultar_using_get25`")

        resource_path = '/api/oportunidades/{id}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='OportunidadeResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def consultar_using_get44(self, id, **kwargs):
        """
        {{{tipo_oportunidade_resource_consultar}}}
        {{{tipo_oportunidade_resource_consultar_notes}}}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.consultar_using_get44(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: {{{tipo_oportunidade_resource_consultar_param_id}}} (required)
        :return: TipoOportunidadeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method consultar_using_get44" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `consultar_using_get44`")

        resource_path = '/api/tipos-oportunidades/{id}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='TipoOportunidadeResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def listar_auditorias_status_using_get(self, **kwargs):
        """
        {{{tipo_oportunidade_resource_listar_auditorias_status}}}
        {{{tipo_oportunidade_resource_listar_auditorias_status_notes}}}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.listar_auditorias_status_using_get(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param list[str] sort: {{{global_menssagem_sort_sort}}}
        :param int page: {{{global_menssagem_sort_page_value}}}
        :param int limit: {{{global_menssagem_sort_limit}}}
        :param int rev_type: {{{status_oportunidade_a_u_d_request_rev_type_value}}}
        :param str rev_date: {{{status_oportunidade_a_u_d_request_rev_date_value}}}
        :param int id: {{{status_oportunidade_a_u_d_request_id_value}}}
        :param int id_tipo_oportunidade: {{{status_oportunidade_a_u_d_request_id_tipo_oportunidade_value}}}
        :param str nome: {{{status_oportunidade_a_u_d_request_nome_value}}}
        :param str descricao: {{{status_oportunidade_a_u_d_request_descricao_value}}}
        :param bool flag_ativo: {{{status_oportunidade_a_u_d_request_flag_ativo_value}}}
        :param str rev_user: {{{status_oportunidade_a_u_d_request_rev_user_value}}}
        :return: PageStatusOportunidadeAUDResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sort', 'page', 'limit', 'rev_type', 'rev_date', 'id', 'id_tipo_oportunidade', 'nome', 'descricao', 'flag_ativo', 'rev_user']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method listar_auditorias_status_using_get" % key
                )
            params[key] = val
        del params['kwargs']


        resource_path = '/api/auditorias-status-oportunidades'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'sort' in params:
            query_params['sort'] = params['sort']
        if 'page' in params:
            query_params['page'] = params['page']
        if 'limit' in params:
            query_params['limit'] = params['limit']
        if 'rev_type' in params:
            query_params['revType'] = params['rev_type']
        if 'rev_date' in params:
            query_params['revDate'] = params['rev_date']
        if 'id' in params:
            query_params['id'] = params['id']
        if 'id_tipo_oportunidade' in params:
            query_params['idTipoOportunidade'] = params['id_tipo_oportunidade']
        if 'nome' in params:
            query_params['nome'] = params['nome']
        if 'descricao' in params:
            query_params['descricao'] = params['descricao']
        if 'flag_ativo' in params:
            query_params['flagAtivo'] = params['flag_ativo']
        if 'rev_user' in params:
            query_params['revUser'] = params['rev_user']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='PageStatusOportunidadeAUDResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def listar_auditorias_using_get(self, **kwargs):
        """
        {{{oportunidade_resource_listar_auditorias}}}
        {{{oportunidade_resource_listar_auditorias_notes}}}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.listar_auditorias_using_get(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param list[str] sort: {{{global_menssagem_sort_sort}}}
        :param int page: {{{global_menssagem_sort_page_value}}}
        :param int limit: {{{global_menssagem_sort_limit}}}
        :param int id_status_oportunidade: {{{oportunidade_a_u_d_request_id_status_oportunidade_value}}}
        :param str data_cadastro: {{{oportunidade_a_u_d_request_data_cadastro_value}}}
        :param str data_atualizacao: {{{oportunidade_a_u_d_request_data_atualizacao_value}}}
        :param str numero_receita_federal: {{{oportunidade_a_u_d_request_numero_receita_federal_value}}}
        :param str data_inicio_vigencia: {{{oportunidade_a_u_d_request_data_inicio_vigencia_value}}}
        :param str datat_fim_vigencia: {{{oportunidade_a_u_d_request_datat_fim_vigencia_value}}}
        :param bool flag_ativo: {{{oportunidade_a_u_d_request_flag_ativo_value}}}
        :param str rev_date: {{{oportunidade_a_u_d_request_rev_date_value}}}
        :param str rev_type: {{{oportunidade_a_u_d_request_rev_type_value}}}
        :param str rev_user: {{{oportunidade_a_u_d_request_rev_user_value}}}
        :return: PageOportunidadeAUDResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sort', 'page', 'limit', 'id_status_oportunidade', 'data_cadastro', 'data_atualizacao', 'numero_receita_federal', 'data_inicio_vigencia', 'datat_fim_vigencia', 'flag_ativo', 'rev_date', 'rev_type', 'rev_user']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method listar_auditorias_using_get" % key
                )
            params[key] = val
        del params['kwargs']


        resource_path = '/api/auditorias-oportunidades'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'sort' in params:
            query_params['sort'] = params['sort']
        if 'page' in params:
            query_params['page'] = params['page']
        if 'limit' in params:
            query_params['limit'] = params['limit']
        if 'id_status_oportunidade' in params:
            query_params['idStatusOportunidade'] = params['id_status_oportunidade']
        if 'data_cadastro' in params:
            query_params['dataCadastro'] = params['data_cadastro']
        if 'data_atualizacao' in params:
            query_params['dataAtualizacao'] = params['data_atualizacao']
        if 'numero_receita_federal' in params:
            query_params['numeroReceitaFederal'] = params['numero_receita_federal']
        if 'data_inicio_vigencia' in params:
            query_params['dataInicioVigencia'] = params['data_inicio_vigencia']
        if 'datat_fim_vigencia' in params:
            query_params['datatFimVigencia'] = params['datat_fim_vigencia']
        if 'flag_ativo' in params:
            query_params['flagAtivo'] = params['flag_ativo']
        if 'rev_date' in params:
            query_params['revDate'] = params['rev_date']
        if 'rev_type' in params:
            query_params['revType'] = params['rev_type']
        if 'rev_user' in params:
            query_params['revUser'] = params['rev_user']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='PageOportunidadeAUDResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def listar_auditorias_using_get1(self, **kwargs):
        """
        {{{tipo_oportunidade_resource_listar_auditorias}}}
        {{{tipo_oportunidade_resource_listar_auditorias_notes}}}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.listar_auditorias_using_get1(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param list[str] sort: {{{global_menssagem_sort_sort}}}
        :param int page: {{{global_menssagem_sort_page_value}}}
        :param int limit: {{{global_menssagem_sort_limit}}}
        :param int rev_type: {{{tipo_oportunidade_a_u_d_request_rev_type_value}}}
        :param str rev_date: {{{tipo_oportunidade_a_u_d_request_rev_date_value}}}
        :param int id: {{{tipo_oportunidade_a_u_d_request_id_value}}}
        :param str descricao: {{{tipo_oportunidade_a_u_d_request_descricao_value}}}
        :param bool flag_ativo: {{{tipo_oportunidade_a_u_d_request_flag_ativo_value}}}
        :param str rev_user: {{{tipo_oportunidade_a_u_d_request_rev_user_value}}}
        :return: PageTipoOportunidadeAUDResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sort', 'page', 'limit', 'rev_type', 'rev_date', 'id', 'descricao', 'flag_ativo', 'rev_user']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method listar_auditorias_using_get1" % key
                )
            params[key] = val
        del params['kwargs']


        resource_path = '/api/auditorias-tipos-oportunidades'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'sort' in params:
            query_params['sort'] = params['sort']
        if 'page' in params:
            query_params['page'] = params['page']
        if 'limit' in params:
            query_params['limit'] = params['limit']
        if 'rev_type' in params:
            query_params['revType'] = params['rev_type']
        if 'rev_date' in params:
            query_params['revDate'] = params['rev_date']
        if 'id' in params:
            query_params['id'] = params['id']
        if 'descricao' in params:
            query_params['descricao'] = params['descricao']
        if 'flag_ativo' in params:
            query_params['flagAtivo'] = params['flag_ativo']
        if 'rev_user' in params:
            query_params['revUser'] = params['rev_user']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='PageTipoOportunidadeAUDResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def listar_status_using_get(self, id, **kwargs):
        """
        {{{tipo_oportunidade_resource_listar_status}}}
        {{{tipo_oportunidade_resource_listar_status_notes}}}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.listar_status_using_get(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: {{{tipo_oportunidade_resource_listar_status_param_id}}} (required)
        :param list[str] sort: {{{global_menssagem_sort_sort}}}
        :param int page: {{{global_menssagem_sort_page_value}}}
        :param int limit: {{{global_menssagem_sort_limit}}}
        :param str nome: {{{status_oportunidade_request_nome_value}}}
        :param str descricao: {{{status_oportunidade_request_descricao_value}}}
        :param bool flag_ativo: {{{status_oportunidade_request_flag_ativo_value}}}
        :return: PageStatusOportunidadeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'sort', 'page', 'limit', 'nome', 'descricao', 'flag_ativo']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method listar_status_using_get" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `listar_status_using_get`")

        resource_path = '/api/tipos-oportunidades/{id}/status'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}
        if 'sort' in params:
            query_params['sort'] = params['sort']
        if 'page' in params:
            query_params['page'] = params['page']
        if 'limit' in params:
            query_params['limit'] = params['limit']
        if 'nome' in params:
            query_params['nome'] = params['nome']
        if 'descricao' in params:
            query_params['descricao'] = params['descricao']
        if 'flag_ativo' in params:
            query_params['flagAtivo'] = params['flag_ativo']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='PageStatusOportunidadeResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def listar_using_get35(self, **kwargs):
        """
        {{{oportunidade_resource_listar}}}
        {{{oportunidade_resource_listar_notes}}}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.listar_using_get35(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param list[str] sort: {{{global_menssagem_sort_sort}}}
        :param int page: {{{global_menssagem_sort_page_value}}}
        :param int limit: {{{global_menssagem_sort_limit}}}
        :param int id_status_oportunidade: {{{oportunidade_request_id_status_oportunidade_value}}}
        :param str data_cadastro: {{{oportunidade_request_data_cadastro_value}}}
        :param str data_atualizacao: {{{oportunidade_request_data_atualizacao_value}}}
        :param str numero_receita_federal: {{{oportunidade_request_numero_receita_federal_value}}}
        :param str data_inicio_vigencia: {{{oportunidade_request_data_inicio_vigencia_value}}}
        :param str data_fim_vigencia: {{{oportunidade_request_data_fim_vigencia_value}}}
        :param bool flag_ativo: {{{oportunidade_request_flag_ativo_value}}}
        :return: PageOportunidadeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sort', 'page', 'limit', 'id_status_oportunidade', 'data_cadastro', 'data_atualizacao', 'numero_receita_federal', 'data_inicio_vigencia', 'data_fim_vigencia', 'flag_ativo']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method listar_using_get35" % key
                )
            params[key] = val
        del params['kwargs']


        resource_path = '/api/oportunidades'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'sort' in params:
            query_params['sort'] = params['sort']
        if 'page' in params:
            query_params['page'] = params['page']
        if 'limit' in params:
            query_params['limit'] = params['limit']
        if 'id_status_oportunidade' in params:
            query_params['idStatusOportunidade'] = params['id_status_oportunidade']
        if 'data_cadastro' in params:
            query_params['dataCadastro'] = params['data_cadastro']
        if 'data_atualizacao' in params:
            query_params['dataAtualizacao'] = params['data_atualizacao']
        if 'numero_receita_federal' in params:
            query_params['numeroReceitaFederal'] = params['numero_receita_federal']
        if 'data_inicio_vigencia' in params:
            query_params['dataInicioVigencia'] = params['data_inicio_vigencia']
        if 'data_fim_vigencia' in params:
            query_params['dataFimVigencia'] = params['data_fim_vigencia']
        if 'flag_ativo' in params:
            query_params['flagAtivo'] = params['flag_ativo']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='PageOportunidadeResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def listar_using_get55(self, **kwargs):
        """
        {{{tipo_oportunidade_resource_listar}}}
        {{{tipo_oportunidade_resource_listar_notes}}}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.listar_using_get55(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param list[str] sort: {{{global_menssagem_sort_sort}}}
        :param int page: {{{global_menssagem_sort_page_value}}}
        :param int limit: {{{global_menssagem_sort_limit}}}
        :param str descricao: {{{tipo_oportunidade_request_descricao_value}}}
        :param bool flag_ativo: {{{tipo_oportunidade_request_flag_ativo_value}}}
        :return: PageTipoOportunidadeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sort', 'page', 'limit', 'descricao', 'flag_ativo']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method listar_using_get55" % key
                )
            params[key] = val
        del params['kwargs']


        resource_path = '/api/tipos-oportunidades'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'sort' in params:
            query_params['sort'] = params['sort']
        if 'page' in params:
            query_params['page'] = params['page']
        if 'limit' in params:
            query_params['limit'] = params['limit']
        if 'descricao' in params:
            query_params['descricao'] = params['descricao']
        if 'flag_ativo' in params:
            query_params['flagAtivo'] = params['flag_ativo']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='PageTipoOportunidadeResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def salvar_status_using_post(self, id, persist, **kwargs):
        """
        {{{tipo_oportunidade_resource_salvar_status}}}
        {{{tipo_oportunidade_resource_salvar_status_notes}}}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.salvar_status_using_post(id, persist, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: {{{tipo_oportunidade_resource_salvar_status_param_id}}} (required)
        :param StatusOportunidadePersistValue persist: persist (required)
        :return: StatusOportunidadeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'persist']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method salvar_status_using_post" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `salvar_status_using_post`")
        # verify the required parameter 'persist' is set
        if ('persist' not in params) or (params['persist'] is None):
            raise ValueError("Missing the required parameter `persist` when calling `salvar_status_using_post`")

        resource_path = '/api/tipos-oportunidades/{id}/status'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'persist' in params:
            body_params = params['persist']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='StatusOportunidadeResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def salvar_using_post21(self, persist, **kwargs):
        """
        {{{oportunidade_resource_salvar}}}
        {{{oportunidade_resource_salvar_notes}}}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.salvar_using_post21(persist, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param OportunidadePersistValue persist: persist (required)
        :return: OportunidadeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['persist']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method salvar_using_post21" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'persist' is set
        if ('persist' not in params) or (params['persist'] is None):
            raise ValueError("Missing the required parameter `persist` when calling `salvar_using_post21`")

        resource_path = '/api/oportunidades'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'persist' in params:
            body_params = params['persist']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='OportunidadeResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def salvar_using_post30(self, persist, **kwargs):
        """
        {{{tipo_oportunidade_resource_salvar}}}
        {{{tipo_oportunidade_resource_salvar_notes}}}

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.salvar_using_post30(persist, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param TipoOportunidadePersistValue persist: persist (required)
        :return: TipoOportunidadeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['persist']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method salvar_using_post30" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'persist' is set
        if ('persist' not in params) or (params['persist'] is None):
            raise ValueError("Missing the required parameter `persist` when calling `salvar_using_post30`")

        resource_path = '/api/tipos-oportunidades'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'persist' in params:
            body_params = params['persist']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='TipoOportunidadeResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response
