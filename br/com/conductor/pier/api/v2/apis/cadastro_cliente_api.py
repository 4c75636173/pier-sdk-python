# coding: utf-8

"""
CadastroClienteApi.py
Copyright 2016 SmartBear Software

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
"""

from __future__ import absolute_import

import sys
import os

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class CadastroClienteApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def alterar_using_put(self, id, id_pessoa, adicional_update, **kwargs):
        """
        Altera Adicional de uma Conta
        Este m\u00C3\u00A9todo permite que seja alterado um portador Adicional de uma determinada Conta.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.alterar_using_put(id, id_pessoa, adicional_update, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o da conta (id). (required)
        :param int id_pessoa: C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o da pessoa (id). (required)
        :param AdicionalUpdate adicional_update: adicionalUpdate (required)
        :return: AdicionalDetalheResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'id_pessoa', 'adicional_update']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method alterar_using_put" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `alterar_using_put`")
        # verify the required parameter 'id_pessoa' is set
        if ('id_pessoa' not in params) or (params['id_pessoa'] is None):
            raise ValueError("Missing the required parameter `id_pessoa` when calling `alterar_using_put`")
        # verify the required parameter 'adicional_update' is set
        if ('adicional_update' not in params) or (params['adicional_update'] is None):
            raise ValueError("Missing the required parameter `adicional_update` when calling `alterar_using_put`")

        resource_path = '/api/contas/{id}/adicionais/{idPessoa}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'id_pessoa' in params:
            path_params['idPessoa'] = params['id_pessoa']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'adicional_update' in params:
            body_params = params['adicional_update']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='AdicionalDetalheResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def alterar_using_put13(self, id, **kwargs):
        """
        Atualiza os detalhes de uma determinada Pessoa
        Este m\u00C3\u00A9todo permite que seja alterado na base do emissor os detalhes de uma determinada Pessoa.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.alterar_using_put13(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: ID da Pessoa (required)
        :param str nome_mae: Apresenta o nome da m\u00C3\u00A3e da pessoa fisica
        :param int id_estado_civil: Id Estado civil da pessoa fisica
        :param str id_profissao: Profiss\u00C3\u00A3o da pessoa fisica
        :param int id_natureza_ocupacao: Id Natureza Ocupa\u00C3\u00A7\u00C3\u00A3o da pessoa fisica
        :param int id_nacionalidade: Id Nacionalidade da pessoa fisica
        :param int numero_banco: N\u00C3\u00BAmero do banco.
        :param int numero_agencia: N\u00C3\u00BAmero da ag\u00C3\u00AAncia.
        :param str numero_conta_corrente: N\u00C3\u00BAmero da conta corrente.
        :param str email: Email da pessoa fisica
        :param str nome_empresa: Nome que deve ser impresso no cart\u00C3\u00A3o
        :return: PessoaDetalheResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nome_mae', 'id_estado_civil', 'id_profissao', 'id_natureza_ocupacao', 'id_nacionalidade', 'numero_banco', 'numero_agencia', 'numero_conta_corrente', 'email', 'nome_empresa']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method alterar_using_put13" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `alterar_using_put13`")

        resource_path = '/api/pessoas-detalhes/{id}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}
        if 'nome_mae' in params:
            query_params['nomeMae'] = params['nome_mae']
        if 'id_estado_civil' in params:
            query_params['idEstadoCivil'] = params['id_estado_civil']
        if 'id_profissao' in params:
            query_params['idProfissao'] = params['id_profissao']
        if 'id_natureza_ocupacao' in params:
            query_params['idNaturezaOcupacao'] = params['id_natureza_ocupacao']
        if 'id_nacionalidade' in params:
            query_params['idNacionalidade'] = params['id_nacionalidade']
        if 'numero_banco' in params:
            query_params['numeroBanco'] = params['numero_banco']
        if 'numero_agencia' in params:
            query_params['numeroAgencia'] = params['numero_agencia']
        if 'numero_conta_corrente' in params:
            query_params['numeroContaCorrente'] = params['numero_conta_corrente']
        if 'email' in params:
            query_params['email'] = params['email']
        if 'nome_empresa' in params:
            query_params['nomeEmpresa'] = params['nome_empresa']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='PessoaDetalheResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def alterar_using_put14(self, id, nome, tipo, data_nascimento, **kwargs):
        """
        Atualiza os dados de uma determinada Pessoa
        Este m\u00C3\u00A9todo permite que seja alterado na base do emissor um registro de determinada Pessoa.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.alterar_using_put14(id, nome, tipo, data_nascimento, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: ID da Pessoa (required)
        :param str nome: Apresenta o 'Nome Completo da PF' ou o 'Nome Completo da Raz\u00C3\u00A3o Social (Nome Empresarial)'. (required)
        :param str tipo: C\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o do tipo da Pessoa, sendo: (\"PF\": Pessoa F\u00C3\u00ADsica), (\"PJ\": Pessoa Jur\u00C3\u00ADdica). (required)
        :param str data_nascimento: Data de Nascimento da Pessoa, quando PF, ou a Data de Abertura da Empresa, quando PJ. Essa data deve ser informada no formato aaaa-MM-dd. (required)
        :param str cpf: N\u00C3\u00BAmero do CPF, quando PF.
        :param str cnpj: N\u00C3\u00BAmero do CNPJ, quando PJ.
        :param str sexo: C\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o do sexo da Pessoa, quando PF, sendo: (\"M\": Masculino), (\"F\": Feminino), (\"O\": Outro), (\"N\": N\u00C3\u00A3o Especificado).
        :param str numero_identidade: N\u00C3\u00BAmero da Identidade.
        :param str orgao_expedidor_identidade: Org\u00C3\u00A3o expedidor do Identidade.
        :param str unidade_federativa_identidade: Sigla da Unidade Federativa de onde foi expedido a Identidade
        :param str data_emissao_identidade: Data emiss\u00C3\u00A3o da Identidade.
        :return: PessoaResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'nome', 'tipo', 'data_nascimento', 'cpf', 'cnpj', 'sexo', 'numero_identidade', 'orgao_expedidor_identidade', 'unidade_federativa_identidade', 'data_emissao_identidade']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method alterar_using_put14" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `alterar_using_put14`")
        # verify the required parameter 'nome' is set
        if ('nome' not in params) or (params['nome'] is None):
            raise ValueError("Missing the required parameter `nome` when calling `alterar_using_put14`")
        # verify the required parameter 'tipo' is set
        if ('tipo' not in params) or (params['tipo'] is None):
            raise ValueError("Missing the required parameter `tipo` when calling `alterar_using_put14`")
        # verify the required parameter 'data_nascimento' is set
        if ('data_nascimento' not in params) or (params['data_nascimento'] is None):
            raise ValueError("Missing the required parameter `data_nascimento` when calling `alterar_using_put14`")

        resource_path = '/api/pessoas/{id}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}
        if 'nome' in params:
            query_params['nome'] = params['nome']
        if 'tipo' in params:
            query_params['tipo'] = params['tipo']
        if 'cpf' in params:
            query_params['cpf'] = params['cpf']
        if 'cnpj' in params:
            query_params['cnpj'] = params['cnpj']
        if 'data_nascimento' in params:
            query_params['dataNascimento'] = params['data_nascimento']
        if 'sexo' in params:
            query_params['sexo'] = params['sexo']
        if 'numero_identidade' in params:
            query_params['numeroIdentidade'] = params['numero_identidade']
        if 'orgao_expedidor_identidade' in params:
            query_params['orgaoExpedidorIdentidade'] = params['orgao_expedidor_identidade']
        if 'unidade_federativa_identidade' in params:
            query_params['unidadeFederativaIdentidade'] = params['unidade_federativa_identidade']
        if 'data_emissao_identidade' in params:
            query_params['dataEmissaoIdentidade'] = params['data_emissao_identidade']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='PessoaResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def alterar_using_put16(self, id, **kwargs):
        """
        Realiza a altera\u00C3\u00A7\u00C3\u00A3o de um determinado Telefone
        Este m\u00C3\u00A9todo permite que seja alterado um determinado Telefone na base de dados do Emissor.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.alterar_using_put16(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Telefone (id). (required)
        :param int id_tipo_telefone: C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Tipo do Telefone (id).
        :param str ddd: C\u00C3\u00B3digo DDD do telefone (id).
        :param str telefone: N\u00C3\u00BAmero do telefone.
        :param str ramal: N\u00C3\u00BAmero do ramal.
        :return: TelefoneResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'id_tipo_telefone', 'ddd', 'telefone', 'ramal']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method alterar_using_put16" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `alterar_using_put16`")

        resource_path = '/api/telefones'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'id' in params:
            query_params['id'] = params['id']
        if 'id_tipo_telefone' in params:
            query_params['idTipoTelefone'] = params['id_tipo_telefone']
        if 'ddd' in params:
            query_params['ddd'] = params['ddd']
        if 'telefone' in params:
            query_params['telefone'] = params['telefone']
        if 'ramal' in params:
            query_params['ramal'] = params['ramal']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='TelefoneResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def alterar_using_put5(self, id, **kwargs):
        """
        Atualiza os dados de um determinado Endere\u00C3\u00A7o
        Este m\u00C3\u00A9todo permite que seja alterado na base do emissor um ou mais registros ligados a um determinado Endere\u00C3\u00A7o.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.alterar_using_put5(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: id (required)
        :param int id_pessoa: C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o da Pessoa a qual o endere\u00C3\u00A7o pertence (id)
        :param int id_tipo_endereco: C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o da Tipo Endere\u00C3\u00A7o (id)
        :param str cep: Apresenta o C\u00C3\u00B3digo de Endere\u00C3\u00A7amento Postal (CEP) no formaro '58800000'
        :param str logradouro: Apresenta o nome do Logradouro
        :param int numero: Apresenta o n\u00C3\u00BAmero do endere\u00C3\u00A7o
        :param str complemento: Apresenta descri\u00C3\u00A7oes complementares referente ao endere\u00C3\u00A7o
        :param str ponto_referencia: Apresenta a descri\u00C3\u00A7\u00C3\u00A3o de ponto de refer\u00C3\u00AAncia do endere\u00C3\u00A7o
        :param str bairro: Apresenta nome do bairro
        :param str cidade: Apresenta nome da cidade
        :param str uf: Apresenta sigla da Unidade Federativa
        :param str pais: Apresenta nome do Pais
        :return: EnderecoResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'id_pessoa', 'id_tipo_endereco', 'cep', 'logradouro', 'numero', 'complemento', 'ponto_referencia', 'bairro', 'cidade', 'uf', 'pais']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method alterar_using_put5" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `alterar_using_put5`")

        resource_path = '/api/enderecos'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'id' in params:
            query_params['id'] = params['id']
        if 'id_pessoa' in params:
            query_params['idPessoa'] = params['id_pessoa']
        if 'id_tipo_endereco' in params:
            query_params['idTipoEndereco'] = params['id_tipo_endereco']
        if 'cep' in params:
            query_params['cep'] = params['cep']
        if 'logradouro' in params:
            query_params['logradouro'] = params['logradouro']
        if 'numero' in params:
            query_params['numero'] = params['numero']
        if 'complemento' in params:
            query_params['complemento'] = params['complemento']
        if 'ponto_referencia' in params:
            query_params['pontoReferencia'] = params['ponto_referencia']
        if 'bairro' in params:
            query_params['bairro'] = params['bairro']
        if 'cidade' in params:
            query_params['cidade'] = params['cidade']
        if 'uf' in params:
            query_params['uf'] = params['uf']
        if 'pais' in params:
            query_params['pais'] = params['pais']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='EnderecoResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def atribuir_assinatura_cliente_using_post(self, id, body, **kwargs):
        """
        Permite atribuir um documento para uma Conta
        Este m\u00C3\u00A9todo permite que seja atribu\u00C3\u00ADdo a uma determinada Conta um documento que esteja armazenado no PIER Cloud, informando qual o tipo do documento e o seu respectivo id.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.atribuir_assinatura_cliente_using_post(id, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o da Conta (required)
        :param AtribuirAssinaturaClientePersist body: C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Arquivo (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'body']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method atribuir_assinatura_cliente_using_post" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `atribuir_assinatura_cliente_using_post`")
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `atribuir_assinatura_cliente_using_post`")

        resource_path = '/api/contas/{id}/atribuir-assinatura-cliente'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='object',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def atualizar_using_post(self, id, **kwargs):
        """
        Atualiza conta integrada com o emissor
        Este recurso permite a atualiza\u00C3\u00A7\u00C3\u00A3o de uma conta integrada com o emissor.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.atualizar_using_post(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: C\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o da conta (id). (required)
        :param IntegracaoEmissorPersist body: Descri\u00C3\u00A7\u00C3\u00A3o do canal de entrada
        :return: IntegracaoEmissorResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'body']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method atualizar_using_post" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `atualizar_using_post`")

        resource_path = '/api/contas/{id}/atualizar-registro-integracao'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='IntegracaoEmissorResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def cadastrar_using_post(self, id, persist, **kwargs):
        """
        Realiza o cadastro de Adicionais para uma Conta
        Este m\u00C3\u00A9todo permite que sejam cadastrados um portador Adicional para uma determinada Conta.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.cadastrar_using_post(id, persist, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o da conta (id). (required)
        :param AdicionalPersist persist: persist (required)
        :return: AdicionalDetalheResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'persist']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cadastrar_using_post" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `cadastrar_using_post`")
        # verify the required parameter 'persist' is set
        if ('persist' not in params) or (params['persist'] is None):
            raise ValueError("Missing the required parameter `persist` when calling `cadastrar_using_post`")

        resource_path = '/api/contas/{id}/cadastrar-adicional'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'persist' in params:
            body_params = params['persist']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='AdicionalDetalheResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def consultar_using_get(self, id, id_pessoa, **kwargs):
        """
        Consulta Adicional de uma Conta
        Este m\u00C3\u00A9todo permite que seja consultado um portador Adicional de uma determinada Conta.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.consultar_using_get(id, id_pessoa, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o da conta (id). (required)
        :param int id_pessoa: C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o da pessoa (id). (required)
        :return: AdicionalDetalheResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'id_pessoa']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method consultar_using_get" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `consultar_using_get`")
        # verify the required parameter 'id_pessoa' is set
        if ('id_pessoa' not in params) or (params['id_pessoa'] is None):
            raise ValueError("Missing the required parameter `id_pessoa` when calling `consultar_using_get`")

        resource_path = '/api/contas/{id}/adicionais/{idPessoa}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'id_pessoa' in params:
            path_params['idPessoa'] = params['id_pessoa']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='AdicionalDetalheResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def consultar_using_get15(self, id, **kwargs):
        """
        Apresenta os dados de um determinado Endere\u00C3\u00A7o
        Este m\u00C3\u00A9todo permite consultar um determinado Endere\u00C3\u00A7o a partir do seu c\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o (id).

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.consultar_using_get15(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Endere\u00C3\u00A7o (id). (required)
        :return: EnderecoResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method consultar_using_get15" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `consultar_using_get15`")

        resource_path = '/api/enderecos/{id}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='EnderecoResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def consultar_using_get23(self, id, **kwargs):
        """
        Apresenta os detalhes de uma determinada Pessoa
        Este m\u00C3\u00A9todo permite a consulta dos detalhes de uma Pessoa existentes na base de dados do Emissor.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.consultar_using_get23(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: ID da Pessoa (required)
        :return: PessoaDetalheResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method consultar_using_get23" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `consultar_using_get23`")

        resource_path = '/api/pessoas-detalhes/{id}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='PessoaDetalheResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def consultar_using_get24(self, id, **kwargs):
        """
        Apresenta os dados de uma determinada Pessoa
        Este m\u00C3\u00A9todo permite que sejam listadas as Pessoas existentes na base de dados do Emissor.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.consultar_using_get24(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: ID da Pessoa (required)
        :return: PessoaResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method consultar_using_get24" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `consultar_using_get24`")

        resource_path = '/api/pessoas/{id}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='PessoaResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def consultar_using_get30(self, id, **kwargs):
        """
        Apresenta os dados de um determinado Telefone
        Este m\u00C3\u00A9todo permite consultar um determinado Telefone a partir do seu c\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o (id).

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.consultar_using_get30(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Telefone (id). (required)
        :return: TelefoneResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method consultar_using_get30" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `consultar_using_get30`")

        resource_path = '/api/telefones/{id}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='TelefoneResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def inativar_using_post(self, id, id_pessoa, **kwargs):
        """
        Inativa Adicional de uma Conta
        Este m\u00C3\u00A9todo permite que seja inativado um portador Adicional de uma determinada Conta.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.inativar_using_post(id, id_pessoa, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o da conta (id). (required)
        :param int id_pessoa: C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o da pessoa (id). (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'id_pessoa']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method inativar_using_post" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `inativar_using_post`")
        # verify the required parameter 'id_pessoa' is set
        if ('id_pessoa' not in params) or (params['id_pessoa'] is None):
            raise ValueError("Missing the required parameter `id_pessoa` when calling `inativar_using_post`")

        resource_path = '/api/contas/{id}/adicionais/{idPessoa}/inativar'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']
        if 'id_pessoa' in params:
            path_params['idPessoa'] = params['id_pessoa']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='str',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def listar_socios_using_get(self, id, **kwargs):
        """
        Listar s\u00C3\u00B3cios de uma pessoa jur\u00C3\u00ADdica
        Lista os s\u00C3\u00B3cios vinculados \u00C3\u00A0 uma Pessoa Jur\u00C3\u00ADdica cadastrada.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.listar_socios_using_get(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o da Pessoa Jur\u00C3\u00ADdica (required)
        :param list[str] sort: Tipo de ordena\u00C3\u00A7\u00C3\u00A3o dos registros.
        :param int page: P\u00C3\u00A1gina solicitada (Default = 0)
        :param int limit: Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 50, Max = 50)
        :return: PagePessoaResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'sort', 'page', 'limit']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method listar_socios_using_get" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `listar_socios_using_get`")

        resource_path = '/api/clientes-pessoas-juridicas/{id}/socios'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}
        if 'sort' in params:
            query_params['sort'] = params['sort']
        if 'page' in params:
            query_params['page'] = params['page']
        if 'limit' in params:
            query_params['limit'] = params['limit']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='PagePessoaResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def listar_using_get(self, id, **kwargs):
        """
        Lista os Adicionais de uma Conta
        Este m\u00C3\u00A9todo permite que sejam listados portadores Adicionais de uma determinada Conta.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.listar_using_get(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o da conta (id). (required)
        :param list[str] sort: Tipo de ordena\u00C3\u00A7\u00C3\u00A3o dos registros.
        :param int page: P\u00C3\u00A1gina solicitada (Default = 0)
        :param int limit: Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 50, Max = 50)
        :return: AdicionalResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'sort', 'page', 'limit']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method listar_using_get" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `listar_using_get`")

        resource_path = '/api/contas/{id}/adicionais'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}
        if 'sort' in params:
            query_params['sort'] = params['sort']
        if 'page' in params:
            query_params['page'] = params['page']
        if 'limit' in params:
            query_params['limit'] = params['limit']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='AdicionalResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def listar_using_get20(self, **kwargs):
        """
        Lista os Endere\u00C3\u00A7os cadastrados para o Emissor
        Este m\u00C3\u00A9todo permite que sejam listados os Endere\u00C3\u00A7os existentes na base de dados do Emissor.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.listar_using_get20(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param list[str] sort: Tipo de ordena\u00C3\u00A7\u00C3\u00A3o dos registros.
        :param int page: P\u00C3\u00A1gina solicitada (Default = 0)
        :param int limit: Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 50, Max = 50)
        :param int id: C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Endere\u00C3\u00A7o (id).
        :param int id_pessoa: C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o da Pessoa a qual o endere\u00C3\u00A7o pertence (id)
        :param int id_tipo_endereco: C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o da Tipo Endere\u00C3\u00A7o (id)
        :param str cep: Apresenta o C\u00C3\u00B3digo de Endere\u00C3\u00A7amento Postal (CEP)
        :param str logradouro: Apresenta o nome do Logradouro
        :param int numero: Apresenta o n\u00C3\u00BAmero do endere\u00C3\u00A7o
        :param str complemento: Apresenta descri\u00C3\u00A7oes complementares referente ao endere\u00C3\u00A7o
        :param str ponto_referencia: Apresenta a descri\u00C3\u00A7\u00C3\u00A3o de ponto de refer\u00C3\u00AAncia do endere\u00C3\u00A7o
        :param str bairro: Apresenta nome do bairro
        :param str cidade: Apresenta nome da cidade
        :param str uf: Apresenta sigla da Unidade Federativa
        :param str pais: Apresenta nome do Pais
        :param str data_inclusao: Apresenta a data em que fora cadastrado o Endere\u00C3\u00A7o
        :param str data_ultima_atualizacao: Data em que fora realizada a \u00C3\u00BAltima mudan\u00C3\u00A7a neste registro de endere\u00C3\u00A7o. Quando n\u00C3\u00A3o tiver ocorrido mudan\u00C3\u00A7a, conter\u00C3\u00A1 a mesma informa\u00C3\u00A7\u00C3\u00A3o que o campo dataInclusao
        :return: PageEnderecoResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sort', 'page', 'limit', 'id', 'id_pessoa', 'id_tipo_endereco', 'cep', 'logradouro', 'numero', 'complemento', 'ponto_referencia', 'bairro', 'cidade', 'uf', 'pais', 'data_inclusao', 'data_ultima_atualizacao']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method listar_using_get20" % key
                )
            params[key] = val
        del params['kwargs']


        resource_path = '/api/enderecos'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'sort' in params:
            query_params['sort'] = params['sort']
        if 'page' in params:
            query_params['page'] = params['page']
        if 'limit' in params:
            query_params['limit'] = params['limit']
        if 'id' in params:
            query_params['id'] = params['id']
        if 'id_pessoa' in params:
            query_params['idPessoa'] = params['id_pessoa']
        if 'id_tipo_endereco' in params:
            query_params['idTipoEndereco'] = params['id_tipo_endereco']
        if 'cep' in params:
            query_params['cep'] = params['cep']
        if 'logradouro' in params:
            query_params['logradouro'] = params['logradouro']
        if 'numero' in params:
            query_params['numero'] = params['numero']
        if 'complemento' in params:
            query_params['complemento'] = params['complemento']
        if 'ponto_referencia' in params:
            query_params['pontoReferencia'] = params['ponto_referencia']
        if 'bairro' in params:
            query_params['bairro'] = params['bairro']
        if 'cidade' in params:
            query_params['cidade'] = params['cidade']
        if 'uf' in params:
            query_params['uf'] = params['uf']
        if 'pais' in params:
            query_params['pais'] = params['pais']
        if 'data_inclusao' in params:
            query_params['dataInclusao'] = params['data_inclusao']
        if 'data_ultima_atualizacao' in params:
            query_params['dataUltimaAtualizacao'] = params['data_ultima_atualizacao']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='PageEnderecoResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def listar_using_get29(self, **kwargs):
        """
        Lista os Detalhes das Pessoas cadastradas no Emissor
        Este m\u00C3\u00A9todo permite que sejam listadas od detalhes das Pessoas existentes na base de dados do Emissor.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.listar_using_get29(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param list[str] sort: Tipo de ordena\u00C3\u00A7\u00C3\u00A3o dos registros.
        :param int page: P\u00C3\u00A1gina solicitada (Default = 0)
        :param int limit: Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 50, Max = 50)
        :param int id_pessoa: C\u00C3\u00B3digo identificador da pessoa
        :param str nome_mae: Apresenta o nome da m\u00C3\u00A3e da pessoa fisica
        :param int id_estado_civil: Id Estado civil da pessoa fisica
        :param str id_profissao: Profiss\u00C3\u00A3o da pessoa fisica
        :param int id_natureza_ocupacao: Id Natureza Ocupa\u00C3\u00A7\u00C3\u00A3o da pessoa fisica
        :param int id_nacionalidade: Id Nacionalidade da pessoa fisica
        :param int numero_banco: N\u00C3\u00BAmero do Banco.
        :param int numero_agencia: N\u00C3\u00BAmero da ag\u00C3\u00AAncia.
        :param str numero_conta_corrente: N\u00C3\u00BAmero da conta corrente.
        :param str email: Email da pessoa fisica
        :param str nome_empresa: Nome que deve ser impresso no cart\u00C3\u00A3o
        :return: PagePessoaDetalheResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sort', 'page', 'limit', 'id_pessoa', 'nome_mae', 'id_estado_civil', 'id_profissao', 'id_natureza_ocupacao', 'id_nacionalidade', 'numero_banco', 'numero_agencia', 'numero_conta_corrente', 'email', 'nome_empresa']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method listar_using_get29" % key
                )
            params[key] = val
        del params['kwargs']


        resource_path = '/api/pessoas-detalhes'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'sort' in params:
            query_params['sort'] = params['sort']
        if 'page' in params:
            query_params['page'] = params['page']
        if 'limit' in params:
            query_params['limit'] = params['limit']
        if 'id_pessoa' in params:
            query_params['idPessoa'] = params['id_pessoa']
        if 'nome_mae' in params:
            query_params['nomeMae'] = params['nome_mae']
        if 'id_estado_civil' in params:
            query_params['idEstadoCivil'] = params['id_estado_civil']
        if 'id_profissao' in params:
            query_params['idProfissao'] = params['id_profissao']
        if 'id_natureza_ocupacao' in params:
            query_params['idNaturezaOcupacao'] = params['id_natureza_ocupacao']
        if 'id_nacionalidade' in params:
            query_params['idNacionalidade'] = params['id_nacionalidade']
        if 'numero_banco' in params:
            query_params['numeroBanco'] = params['numero_banco']
        if 'numero_agencia' in params:
            query_params['numeroAgencia'] = params['numero_agencia']
        if 'numero_conta_corrente' in params:
            query_params['numeroContaCorrente'] = params['numero_conta_corrente']
        if 'email' in params:
            query_params['email'] = params['email']
        if 'nome_empresa' in params:
            query_params['nomeEmpresa'] = params['nome_empresa']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='PagePessoaDetalheResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def listar_using_get30(self, **kwargs):
        """
        Lista as Pessoas cadastradas no Emissor
        Este m\u00C3\u00A9todo permite que sejam listadas as Pessoas existentes na base de dados do Emissor.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.listar_using_get30(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param list[str] sort: Tipo de ordena\u00C3\u00A7\u00C3\u00A3o dos registros.
        :param int page: P\u00C3\u00A1gina solicitada (Default = 0)
        :param int limit: Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 50, Max = 50)
        :param int id: C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o da Pessoa (id).
        :param str nome: Apresenta o 'Nome Completo da PF' ou o 'Nome Completo da Raz\u00C3\u00A3o Social (Nome Empresarial)'.
        :param str tipo: C\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o do tipo da Pessoa, sendo: (\"PF\": Pessoa F\u00C3\u00ADsica), (\"PJ\": Pessoa Jur\u00C3\u00ADdica).
        :param str cpf: N\u00C3\u00BAmero do CPF, quando PF.
        :param str cnpj: N\u00C3\u00BAmero do CNPJ, quando PJ.
        :param str data_nascimento: Data de Nascimento da Pessoa, quando PF, ou a Data de Abertura da Empresa, quando PJ.
        :param str sexo: C\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o do sexo da Pessoa, quando PF, sendo: (\"M\": Masculino), (\"F\": Feminino), (\"O\": Outro), (\"N\": N\u00C3\u00A3o Especificado).
        :param str numero_identidade: N\u00C3\u00BAmero da Identidade
        :param str orgao_expedidor_identidade: Org\u00C3\u00A3o expedidor do RG.
        :param str unidade_federativa_identidade: Sigla da Unidade Federativa de onde foi expedido a Identidade
        :param str data_emissao_identidade: Data emiss\u00C3\u00A3o da identidade no formato aaaa-MM-dd
        :return: PagePessoaResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sort', 'page', 'limit', 'id', 'nome', 'tipo', 'cpf', 'cnpj', 'data_nascimento', 'sexo', 'numero_identidade', 'orgao_expedidor_identidade', 'unidade_federativa_identidade', 'data_emissao_identidade']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method listar_using_get30" % key
                )
            params[key] = val
        del params['kwargs']


        resource_path = '/api/pessoas'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'sort' in params:
            query_params['sort'] = params['sort']
        if 'page' in params:
            query_params['page'] = params['page']
        if 'limit' in params:
            query_params['limit'] = params['limit']
        if 'id' in params:
            query_params['id'] = params['id']
        if 'nome' in params:
            query_params['nome'] = params['nome']
        if 'tipo' in params:
            query_params['tipo'] = params['tipo']
        if 'cpf' in params:
            query_params['cpf'] = params['cpf']
        if 'cnpj' in params:
            query_params['cnpj'] = params['cnpj']
        if 'data_nascimento' in params:
            query_params['dataNascimento'] = params['data_nascimento']
        if 'sexo' in params:
            query_params['sexo'] = params['sexo']
        if 'numero_identidade' in params:
            query_params['numeroIdentidade'] = params['numero_identidade']
        if 'orgao_expedidor_identidade' in params:
            query_params['orgaoExpedidorIdentidade'] = params['orgao_expedidor_identidade']
        if 'unidade_federativa_identidade' in params:
            query_params['unidadeFederativaIdentidade'] = params['unidade_federativa_identidade']
        if 'data_emissao_identidade' in params:
            query_params['dataEmissaoIdentidade'] = params['data_emissao_identidade']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='PagePessoaResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def listar_using_get39(self, **kwargs):
        """
        Lista os Telefones cadastrados no Emissor
        Este m\u00C3\u00A9todo permite que sejam listados os Telefones existentes na base de dados do Emissor.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.listar_using_get39(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param list[str] sort: Tipo de ordena\u00C3\u00A7\u00C3\u00A3o dos registros.
        :param int page: P\u00C3\u00A1gina solicitada (Default = 0)
        :param int limit: Limite de elementos por solicita\u00C3\u00A7\u00C3\u00A3o (Default = 50, Max = 50)
        :param int id: C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Telefone (id).
        :param int id_tipo_telefone: C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Tipo do Telefone (id).
        :param int id_pessoa: C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o da Pessoa (id) a qual o telefone pertence.
        :param str ddd: C\u00C3\u00B3digo DDD do telefone (id).
        :param str telefone: N\u00C3\u00BAmero do telefone.
        :param str ramal: N\u00C3\u00BAmero do ramal.
        :param int status: Apresenta o Status do Telefone, onde: '0': Inativo e '1': Ativo
        :return: PageTelefoneResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sort', 'page', 'limit', 'id', 'id_tipo_telefone', 'id_pessoa', 'ddd', 'telefone', 'ramal', 'status']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method listar_using_get39" % key
                )
            params[key] = val
        del params['kwargs']


        resource_path = '/api/telefones'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'sort' in params:
            query_params['sort'] = params['sort']
        if 'page' in params:
            query_params['page'] = params['page']
        if 'limit' in params:
            query_params['limit'] = params['limit']
        if 'id' in params:
            query_params['id'] = params['id']
        if 'id_tipo_telefone' in params:
            query_params['idTipoTelefone'] = params['id_tipo_telefone']
        if 'id_pessoa' in params:
            query_params['idPessoa'] = params['id_pessoa']
        if 'ddd' in params:
            query_params['ddd'] = params['ddd']
        if 'telefone' in params:
            query_params['telefone'] = params['telefone']
        if 'ramal' in params:
            query_params['ramal'] = params['ramal']
        if 'status' in params:
            query_params['status'] = params['status']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='PageTelefoneResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def salvar_pessoa_fisica_aprovada_using_post(self, pessoa_persist, **kwargs):
        """
        Cadastro de Conta e Pessoa Fisica
        Permite realizar o cadastro de uma Conta para um cliente do tipo Pessoa F\u00C3\u00ADsica, recebendo nesta opera\u00C3\u00A7\u00C3\u00A3o todos os dados cadastrais que se fazem necess\u00C3\u00A1rios para isso. Uma vez criado, poder\u00C3\u00A1 ser acionado o m\u00C3\u00A9todo de 'Gera\u00C3\u00A7\u00C3\u00A3o de Cart\u00C3\u00A3o' para o cliente e seus adicionais.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.salvar_pessoa_fisica_aprovada_using_post(pessoa_persist, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param PessoaFisicaAprovadaPersist pessoa_persist: pessoaPersist (required)
        :return: PessoaFisicaAprovadaResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['pessoa_persist']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method salvar_pessoa_fisica_aprovada_using_post" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'pessoa_persist' is set
        if ('pessoa_persist' not in params) or (params['pessoa_persist'] is None):
            raise ValueError("Missing the required parameter `pessoa_persist` when calling `salvar_pessoa_fisica_aprovada_using_post`")

        resource_path = '/api/clientes-pessoas-fisicas'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'pessoa_persist' in params:
            body_params = params['pessoa_persist']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='PessoaFisicaAprovadaResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def salvar_pessoa_juridica_aprovada_using_post(self, pessoa_persist, **kwargs):
        """
        Cadastro de Conta e Pessoa Jur\u00C3\u00ADdica
        Cadastro de Conta e Pessoa Jur\u00C3\u00ADdica Permite realizar o cadastro de uma Conta para um cliente do tipo Pessoa Jur\u00C3\u00ADdica, recebendo nesta opera\u00C3\u00A7\u00C3\u00A3o todos os dados cadastrais que se fazem necess\u00C3\u00A1rios para isso, inclu\u00C3\u00ADndo o registro de cada um dos s\u00C3\u00B3cios. Uma vez criado, poder\u00C3\u00A1 ser acionado o m\u00C3\u00A9todo de 'Gera\u00C3\u00A7\u00C3\u00A3o de Cart\u00C3\u00A3o' para o cliente e cada um dos s\u00C3\u00B3cios vinculados.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.salvar_pessoa_juridica_aprovada_using_post(pessoa_persist, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param PessoaJuridicaAprovadaPersist pessoa_persist: pessoaPersist (required)
        :return: PessoaJuridicaAprovadaResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['pessoa_persist']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method salvar_pessoa_juridica_aprovada_using_post" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'pessoa_persist' is set
        if ('pessoa_persist' not in params) or (params['pessoa_persist'] is None):
            raise ValueError("Missing the required parameter `pessoa_persist` when calling `salvar_pessoa_juridica_aprovada_using_post`")

        resource_path = '/api/clientes-pessoas-juridicas'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'pessoa_persist' in params:
            body_params = params['pessoa_persist']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='PessoaJuridicaAprovadaResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def salvar_using_post12(self, **kwargs):
        """
        Realiza o cadastro de um novo Endere\u00C3\u00A7o
        Este m\u00C3\u00A9todo permite que seja cadastrado um novo Endere\u00C3\u00A7o na base de dados do Emissor.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.salvar_using_post12(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id_pessoa: C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o da Pessoa a qual o endere\u00C3\u00A7o pertence (id)
        :param int id_tipo_endereco: C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o da Tipo Endere\u00C3\u00A7o (id)
        :param str cep: Apresenta o C\u00C3\u00B3digo de Endere\u00C3\u00A7amento Postal (CEP) no formaro '58800000'
        :param str logradouro: Apresenta o nome do Logradouro
        :param int numero: Apresenta o n\u00C3\u00BAmero do endere\u00C3\u00A7o
        :param str complemento: Apresenta descri\u00C3\u00A7oes complementares referente ao endere\u00C3\u00A7o
        :param str ponto_referencia: Apresenta a descri\u00C3\u00A7\u00C3\u00A3o de ponto de refer\u00C3\u00AAncia do endere\u00C3\u00A7o
        :param str bairro: Apresenta nome do bairro
        :param str cidade: Apresenta nome da cidade
        :param str uf: Apresenta sigla da Unidade Federativa
        :param str pais: Apresenta nome do Pais
        :return: EnderecoResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id_pessoa', 'id_tipo_endereco', 'cep', 'logradouro', 'numero', 'complemento', 'ponto_referencia', 'bairro', 'cidade', 'uf', 'pais']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method salvar_using_post12" % key
                )
            params[key] = val
        del params['kwargs']


        resource_path = '/api/enderecos'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'id_pessoa' in params:
            query_params['idPessoa'] = params['id_pessoa']
        if 'id_tipo_endereco' in params:
            query_params['idTipoEndereco'] = params['id_tipo_endereco']
        if 'cep' in params:
            query_params['cep'] = params['cep']
        if 'logradouro' in params:
            query_params['logradouro'] = params['logradouro']
        if 'numero' in params:
            query_params['numero'] = params['numero']
        if 'complemento' in params:
            query_params['complemento'] = params['complemento']
        if 'ponto_referencia' in params:
            query_params['pontoReferencia'] = params['ponto_referencia']
        if 'bairro' in params:
            query_params['bairro'] = params['bairro']
        if 'cidade' in params:
            query_params['cidade'] = params['cidade']
        if 'uf' in params:
            query_params['uf'] = params['uf']
        if 'pais' in params:
            query_params['pais'] = params['pais']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='EnderecoResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def salvar_using_post14(self, id, **kwargs):
        """
        Inclui a conta como registro para integra\u00C3\u00A7\u00C3\u00A3o
        Este recurso permite incluir uma conta como registro para integra\u00C3\u00A7\u00C3\u00A3o.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.salvar_using_post14(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: C\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o da conta (id). (required)
        :param IntegracaoEmissorPersist body: Descri\u00C3\u00A7\u00C3\u00A3o do canal de entrada
        :return: IntegracaoEmissorResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'body']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method salvar_using_post14" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `salvar_using_post14`")

        resource_path = '/api/contas/{id}/incluir-registro-integracao'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='IntegracaoEmissorResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def salvar_using_post19(self, id_pessoa, **kwargs):
        """
        Salvar os detalhes de uma determinada Pessoa
        Este m\u00C3\u00A9todo permite que seja incluido na base do emissor os detalhes de uma determinada Pessoa.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.salvar_using_post19(id_pessoa, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id_pessoa: Apresenta o c\u00C3\u00B3digo identificador da pessoa (required)
        :param str nome_mae: Apresenta o nome da m\u00C3\u00A3e da pessoa fisica
        :param int id_estado_civil: Id Estado civil da pessoa fisica
        :param str id_profissao: Profiss\u00C3\u00A3o da pessoa fisica
        :param int id_natureza_ocupacao: Id Natureza Ocupa\u00C3\u00A7\u00C3\u00A3o da pessoa fisica
        :param int id_nacionalidade: Id Nacionalidade da pessoa fisica
        :param int numero_banco: N\u00C3\u00BAmero do banco.
        :param int numero_agencia: N\u00C3\u00BAmero da ag\u00C3\u00AAncia.
        :param str numero_conta_corrente: N\u00C3\u00BAmero da conta corrente.
        :param str email: Email da pessoa fisica
        :param str nome_empresa: Nome que deve ser impresso no cart\u00C3\u00A3o
        :return: PessoaDetalheResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id_pessoa', 'nome_mae', 'id_estado_civil', 'id_profissao', 'id_natureza_ocupacao', 'id_nacionalidade', 'numero_banco', 'numero_agencia', 'numero_conta_corrente', 'email', 'nome_empresa']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method salvar_using_post19" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'id_pessoa' is set
        if ('id_pessoa' not in params) or (params['id_pessoa'] is None):
            raise ValueError("Missing the required parameter `id_pessoa` when calling `salvar_using_post19`")

        resource_path = '/api/pessoas-detalhes'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'id_pessoa' in params:
            query_params['idPessoa'] = params['id_pessoa']
        if 'nome_mae' in params:
            query_params['nomeMae'] = params['nome_mae']
        if 'id_estado_civil' in params:
            query_params['idEstadoCivil'] = params['id_estado_civil']
        if 'id_profissao' in params:
            query_params['idProfissao'] = params['id_profissao']
        if 'id_natureza_ocupacao' in params:
            query_params['idNaturezaOcupacao'] = params['id_natureza_ocupacao']
        if 'id_nacionalidade' in params:
            query_params['idNacionalidade'] = params['id_nacionalidade']
        if 'numero_banco' in params:
            query_params['numeroBanco'] = params['numero_banco']
        if 'numero_agencia' in params:
            query_params['numeroAgencia'] = params['numero_agencia']
        if 'numero_conta_corrente' in params:
            query_params['numeroContaCorrente'] = params['numero_conta_corrente']
        if 'email' in params:
            query_params['email'] = params['email']
        if 'nome_empresa' in params:
            query_params['nomeEmpresa'] = params['nome_empresa']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='PessoaDetalheResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def salvar_using_post20(self, nome, tipo, data_nascimento, **kwargs):
        """
        Realiza o cadastro de um nova Pessoa
        Este m\u00C3\u00A9todo permite que seja cadastrado uma nova Pessoa na base de dados do Emissor.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.salvar_using_post20(nome, tipo, data_nascimento, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str nome: Apresenta o 'Nome Completo da PF' ou o 'Nome Completo da Raz\u00C3\u00A3o Social (Nome Empresarial)'. (required)
        :param str tipo: C\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o do tipo da Pessoa, sendo: (\"PF\": Pessoa F\u00C3\u00ADsica), (\"PJ\": Pessoa Jur\u00C3\u00ADdica). (required)
        :param str data_nascimento: Data de Nascimento da Pessoa, quando PF, ou a Data de Abertura da Empresa, quando PJ. Essa data deve ser informada no formato aaaa-MM-dd. (required)
        :param str cpf: N\u00C3\u00BAmero do CPF, quando PF.
        :param str cnpj: N\u00C3\u00BAmero do CNPJ, quando PJ.
        :param str sexo: C\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o do sexo da Pessoa, quando PF, sendo: (\"M\": Masculino), (\"F\": Feminino), (\"O\": Outro), (\"N\": N\u00C3\u00A3o Especificado).
        :param str numero_identidade: N\u00C3\u00BAmero da Identidade.
        :param str orgao_expedidor_identidade: Org\u00C3\u00A3o expedidor do Identidade.
        :param str unidade_federativa_identidade: Sigla da Unidade Federativa de onde foi expedido a Identidade
        :param str data_emissao_identidade: Data emiss\u00C3\u00A3o da Identidade.
        :return: PessoaResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['nome', 'tipo', 'data_nascimento', 'cpf', 'cnpj', 'sexo', 'numero_identidade', 'orgao_expedidor_identidade', 'unidade_federativa_identidade', 'data_emissao_identidade']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method salvar_using_post20" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'nome' is set
        if ('nome' not in params) or (params['nome'] is None):
            raise ValueError("Missing the required parameter `nome` when calling `salvar_using_post20`")
        # verify the required parameter 'tipo' is set
        if ('tipo' not in params) or (params['tipo'] is None):
            raise ValueError("Missing the required parameter `tipo` when calling `salvar_using_post20`")
        # verify the required parameter 'data_nascimento' is set
        if ('data_nascimento' not in params) or (params['data_nascimento'] is None):
            raise ValueError("Missing the required parameter `data_nascimento` when calling `salvar_using_post20`")

        resource_path = '/api/pessoas'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'nome' in params:
            query_params['nome'] = params['nome']
        if 'tipo' in params:
            query_params['tipo'] = params['tipo']
        if 'cpf' in params:
            query_params['cpf'] = params['cpf']
        if 'cnpj' in params:
            query_params['cnpj'] = params['cnpj']
        if 'data_nascimento' in params:
            query_params['dataNascimento'] = params['data_nascimento']
        if 'sexo' in params:
            query_params['sexo'] = params['sexo']
        if 'numero_identidade' in params:
            query_params['numeroIdentidade'] = params['numero_identidade']
        if 'orgao_expedidor_identidade' in params:
            query_params['orgaoExpedidorIdentidade'] = params['orgao_expedidor_identidade']
        if 'unidade_federativa_identidade' in params:
            query_params['unidadeFederativaIdentidade'] = params['unidade_federativa_identidade']
        if 'data_emissao_identidade' in params:
            query_params['dataEmissaoIdentidade'] = params['data_emissao_identidade']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='PessoaResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def salvar_using_post23(self, **kwargs):
        """
        Realiza o cadastro de um novo Telefone
        Este m\u00C3\u00A9todo permite que seja cadastrado um novo Telefone na base de dados do Emissor.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.salvar_using_post23(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id_tipo_telefone: C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Tipo do Telefone (id).
        :param int id_pessoa: C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o da Pessoa (id) a qual o telefone pertence.
        :param str ddd: C\u00C3\u00B3digo DDD do telefone (id).
        :param str telefone: N\u00C3\u00BAmero do telefone.
        :param str ramal: N\u00C3\u00BAmero do ramal.
        :return: TelefoneResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id_tipo_telefone', 'id_pessoa', 'ddd', 'telefone', 'ramal']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method salvar_using_post23" % key
                )
            params[key] = val
        del params['kwargs']


        resource_path = '/api/telefones'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'id_tipo_telefone' in params:
            query_params['idTipoTelefone'] = params['id_tipo_telefone']
        if 'id_pessoa' in params:
            query_params['idPessoa'] = params['id_pessoa']
        if 'ddd' in params:
            query_params['ddd'] = params['ddd']
        if 'telefone' in params:
            query_params['telefone'] = params['telefone']
        if 'ramal' in params:
            query_params['ramal'] = params['ramal']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='TelefoneResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response
