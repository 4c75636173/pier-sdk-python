# coding: utf-8

"""
AutorizacaoApi.py
Copyright 2016 SmartBear Software

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
"""

from __future__ import absolute_import

import sys
import os

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class AutorizacaoApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def autorizar_using_post(self, autorizacao_on_us_request, **kwargs):
        """
        Autoriza transa\u00C3\u00A7\u00C3\u00A3o financeira
        Este m\u00C3\u00A9todo faz uma autoriza\u00C3\u00A7\u00C3\u00A3o de transa\u00C3\u00A7\u00C3\u00A3o financeira.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.autorizar_using_post(autorizacao_on_us_request, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param AutorizacaoOnUsRequest autorizacao_on_us_request: autorizacaoOnUsRequest (required)
        :return: TransacaoOnUsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['autorizacao_on_us_request']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method autorizar_using_post" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'autorizacao_on_us_request' is set
        if ('autorizacao_on_us_request' not in params) or (params['autorizacao_on_us_request'] is None):
            raise ValueError("Missing the required parameter `autorizacao_on_us_request` when calling `autorizar_using_post`")

        resource_path = '/api/autorizar-transacao'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'autorizacao_on_us_request' in params:
            body_params = params['autorizacao_on_us_request']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='TransacaoOnUsResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def autorizar_using_post1(self, id, transacao_on_us_por_id_cartao_request, **kwargs):
        """
        Autoriza transa\u00C3\u00A7\u00C3\u00A3o financeira por idCartao
        Este m\u00C3\u00A9todo faz uma autoriza\u00C3\u00A7\u00C3\u00A3o de transa\u00C3\u00A7\u00C3\u00A3o financeira com o idCartao.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.autorizar_using_post1(id, transacao_on_us_por_id_cartao_request, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: Id Cartao (required)
        :param TransacaoOnUsPorIdCartaoRequest transacao_on_us_por_id_cartao_request: transacaoOnUsPorIdCartaoRequest (required)
        :return: TransacaoOnUsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'transacao_on_us_por_id_cartao_request']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method autorizar_using_post1" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `autorizar_using_post1`")
        # verify the required parameter 'transacao_on_us_por_id_cartao_request' is set
        if ('transacao_on_us_por_id_cartao_request' not in params) or (params['transacao_on_us_por_id_cartao_request'] is None):
            raise ValueError("Missing the required parameter `transacao_on_us_por_id_cartao_request` when calling `autorizar_using_post1`")

        resource_path = '/api/cartoes/{id}/autorizar-transacao'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'transacao_on_us_por_id_cartao_request' in params:
            body_params = params['transacao_on_us_por_id_cartao_request']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='TransacaoOnUsResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def cancelar_using_post2(self, cancelamento_request, **kwargs):
        """
        Cancela transa\u00C3\u00A7\u00C3\u00A3o financeira
        Este m\u00C3\u00A9todo permite que seja cancelada uma transa\u00C3\u00A7\u00C3\u00A3o.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.cancelar_using_post2(cancelamento_request, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param CancelamentoTransacaoOnUsRequest cancelamento_request: cancelamentoRequest (required)
        :return: TransacaoOnUsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cancelamento_request']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cancelar_using_post2" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'cancelamento_request' is set
        if ('cancelamento_request' not in params) or (params['cancelamento_request'] is None):
            raise ValueError("Missing the required parameter `cancelamento_request` when calling `cancelar_using_post2`")

        resource_path = '/api/cancelar-transacao'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'cancelamento_request' in params:
            body_params = params['cancelamento_request']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='TransacaoOnUsResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def cancelar_using_post3(self, id, cancelamento_request, **kwargs):
        """
        Cancela transa\u00C3\u00A7\u00C3\u00A3o financeira por idCartao
        Este m\u00C3\u00A9todo permite que seja cancelada uma transa\u00C3\u00A7\u00C3\u00A3o a partir do idCartao.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.cancelar_using_post3(id, cancelamento_request, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: Id Cartao (required)
        :param CancelamentoTransacaoPorIdCartaoRequest cancelamento_request: cancelamentoRequest (required)
        :return: TransacaoOnUsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'cancelamento_request']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cancelar_using_post3" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `cancelar_using_post3`")
        # verify the required parameter 'cancelamento_request' is set
        if ('cancelamento_request' not in params) or (params['cancelamento_request'] is None):
            raise ValueError("Missing the required parameter `cancelamento_request` when calling `cancelar_using_post3`")

        resource_path = '/api/cartoes/{id}/cancelar-transacao'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'cancelamento_request' in params:
            body_params = params['cancelamento_request']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='TransacaoOnUsResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def listar_codigos_processamento_autorizacao_using_get(self, **kwargs):
        """
        Retorna c\u00C3\u00B3digos de processamento de autoriza\u00C3\u00A7\u00C3\u00A3o
        Este m\u00C3\u00A9todo retorna a lista dos c\u00C3\u00B3digos de processamento para autoriza\u00C3\u00A7\u00C3\u00A3o de transa\u00C3\u00A7\u00C3\u00B5es financeiras.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.listar_codigos_processamento_autorizacao_using_get(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: list[object]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method listar_codigos_processamento_autorizacao_using_get" % key
                )
            params[key] = val
        del params['kwargs']


        resource_path = '/api/consultar-codigos-processamento-autorizacao'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='list[object]',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def simular_using_post(self, transacoes_request, **kwargs):
        """
        Simula planos de transa\u00C3\u00A7\u00C3\u00B5es
        Este m\u00C3\u00A9todo permite que seja simulada um plano de transa\u00C3\u00A7\u00C3\u00B5es.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.simular_using_post(transacoes_request, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param TransacaoOnUsRequest transacoes_request: transacoesRequest (required)
        :return: TransacaoOnUsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['transacoes_request']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method simular_using_post" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'transacoes_request' is set
        if ('transacoes_request' not in params) or (params['transacoes_request'] is None):
            raise ValueError("Missing the required parameter `transacoes_request` when calling `simular_using_post`")

        resource_path = '/api/simular-transacao'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'transacoes_request' in params:
            body_params = params['transacoes_request']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='TransacaoOnUsResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response
