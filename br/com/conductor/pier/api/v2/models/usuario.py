# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class Usuario(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        Usuario - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'int',
            'nome': 'str',
            'login': 'str',
            'id_emissor': 'int',
            'cpf': 'str',
            'email': 'str',
            'senha': 'str',
            'status': 'str',
            'data_criacao': 'datetime',
            'data_modificacao': 'datetime',
            'tentativas_incorretas': 'int'
        }

        self.attribute_map = {
            'id': 'id',
            'nome': 'nome',
            'login': 'login',
            'id_emissor': 'idEmissor',
            'cpf': 'cpf',
            'email': 'email',
            'senha': 'senha',
            'status': 'status',
            'data_criacao': 'dataCriacao',
            'data_modificacao': 'dataModificacao',
            'tentativas_incorretas': 'tentativasIncorretas'
        }

        self._id = None
        self._nome = None
        self._login = None
        self._id_emissor = None
        self._cpf = None
        self._email = None
        self._senha = None
        self._status = None
        self._data_criacao = None
        self._data_modificacao = None
        self._tentativas_incorretas = None

    @property
    def id(self):
        """
        Gets the id of this Usuario.
        Id do Usu\u00C3\u00A1rio

        :return: The id of this Usuario.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Usuario.
        Id do Usu\u00C3\u00A1rio

        :param id: The id of this Usuario.
        :type: int
        """
        self._id = id

    @property
    def nome(self):
        """
        Gets the nome of this Usuario.
        Nome do Usu\u00C3\u00A1rio

        :return: The nome of this Usuario.
        :rtype: str
        """
        return self._nome

    @nome.setter
    def nome(self, nome):
        """
        Sets the nome of this Usuario.
        Nome do Usu\u00C3\u00A1rio

        :param nome: The nome of this Usuario.
        :type: str
        """
        self._nome = nome

    @property
    def login(self):
        """
        Gets the login of this Usuario.
        Login do Usu\u00C3\u00A1rio

        :return: The login of this Usuario.
        :rtype: str
        """
        return self._login

    @login.setter
    def login(self, login):
        """
        Sets the login of this Usuario.
        Login do Usu\u00C3\u00A1rio

        :param login: The login of this Usuario.
        :type: str
        """
        self._login = login

    @property
    def id_emissor(self):
        """
        Gets the id_emissor of this Usuario.
        Id do emissor do usu\u00C3\u00A1rio

        :return: The id_emissor of this Usuario.
        :rtype: int
        """
        return self._id_emissor

    @id_emissor.setter
    def id_emissor(self, id_emissor):
        """
        Sets the id_emissor of this Usuario.
        Id do emissor do usu\u00C3\u00A1rio

        :param id_emissor: The id_emissor of this Usuario.
        :type: int
        """
        self._id_emissor = id_emissor

    @property
    def cpf(self):
        """
        Gets the cpf of this Usuario.
        CPF do Usu\u00C3\u00A1rio

        :return: The cpf of this Usuario.
        :rtype: str
        """
        return self._cpf

    @cpf.setter
    def cpf(self, cpf):
        """
        Sets the cpf of this Usuario.
        CPF do Usu\u00C3\u00A1rio

        :param cpf: The cpf of this Usuario.
        :type: str
        """
        self._cpf = cpf

    @property
    def email(self):
        """
        Gets the email of this Usuario.
        Email do Usu\u00C3\u00A1rio

        :return: The email of this Usuario.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """
        Sets the email of this Usuario.
        Email do Usu\u00C3\u00A1rio

        :param email: The email of this Usuario.
        :type: str
        """
        self._email = email

    @property
    def senha(self):
        """
        Gets the senha of this Usuario.
        Apresenta a senha do usu\u00C3\u00A1rio.

        :return: The senha of this Usuario.
        :rtype: str
        """
        return self._senha

    @senha.setter
    def senha(self, senha):
        """
        Sets the senha of this Usuario.
        Apresenta a senha do usu\u00C3\u00A1rio.

        :param senha: The senha of this Usuario.
        :type: str
        """
        self._senha = senha

    @property
    def status(self):
        """
        Gets the status of this Usuario.
        Status do Usu\u00C3\u00A1rio

        :return: The status of this Usuario.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this Usuario.
        Status do Usu\u00C3\u00A1rio

        :param status: The status of this Usuario.
        :type: str
        """
        allowed_values = ["ATIVO", "INATIVO"]
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status`, must be one of {0}"
                .format(allowed_values)
            )
        self._status = status

    @property
    def data_criacao(self):
        """
        Gets the data_criacao of this Usuario.
        Status do Usu\u00C3\u00A1rio

        :return: The data_criacao of this Usuario.
        :rtype: datetime
        """
        return self._data_criacao

    @data_criacao.setter
    def data_criacao(self, data_criacao):
        """
        Sets the data_criacao of this Usuario.
        Status do Usu\u00C3\u00A1rio

        :param data_criacao: The data_criacao of this Usuario.
        :type: datetime
        """
        self._data_criacao = data_criacao

    @property
    def data_modificacao(self):
        """
        Gets the data_modificacao of this Usuario.
        Status do Usu\u00C3\u00A1rio

        :return: The data_modificacao of this Usuario.
        :rtype: datetime
        """
        return self._data_modificacao

    @data_modificacao.setter
    def data_modificacao(self, data_modificacao):
        """
        Sets the data_modificacao of this Usuario.
        Status do Usu\u00C3\u00A1rio

        :param data_modificacao: The data_modificacao of this Usuario.
        :type: datetime
        """
        self._data_modificacao = data_modificacao

    @property
    def tentativas_incorretas(self):
        """
        Gets the tentativas_incorretas of this Usuario.
        N\u00C3\u00BAmero de tentativas de valida\u00C3\u00A7\u00C3\u00A3o incorretas

        :return: The tentativas_incorretas of this Usuario.
        :rtype: int
        """
        return self._tentativas_incorretas

    @tentativas_incorretas.setter
    def tentativas_incorretas(self, tentativas_incorretas):
        """
        Sets the tentativas_incorretas of this Usuario.
        N\u00C3\u00BAmero de tentativas de valida\u00C3\u00A7\u00C3\u00A3o incorretas

        :param tentativas_incorretas: The tentativas_incorretas of this Usuario.
        :type: int
        """
        self._tentativas_incorretas = tentativas_incorretas

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

