# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class UsuarioTokenResponse(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        UsuarioTokenResponse - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'ativo': 'bool',
            'cpf': 'str',
            'data_inclusao': 'str',
            'data_nascimento': 'str',
            'ddd': 'str',
            'email': 'str',
            'telefone': 'str',
            'token': 'str',
            'validade': 'str'
        }

        self.attribute_map = {
            'ativo': 'ativo',
            'cpf': 'cpf',
            'data_inclusao': 'dataInclusao',
            'data_nascimento': 'dataNascimento',
            'ddd': 'ddd',
            'email': 'email',
            'telefone': 'telefone',
            'token': 'token',
            'validade': 'validade'
        }

        self._ativo = None
        self._cpf = None
        self._data_inclusao = None
        self._data_nascimento = None
        self._ddd = None
        self._email = None
        self._telefone = None
        self._token = None
        self._validade = None

    @property
    def ativo(self):
        """
        Gets the ativo of this UsuarioTokenResponse.
        {{{usuario_token_resposta_ativo_descricao}}}

        :return: The ativo of this UsuarioTokenResponse.
        :rtype: bool
        """
        return self._ativo

    @ativo.setter
    def ativo(self, ativo):
        """
        Sets the ativo of this UsuarioTokenResponse.
        {{{usuario_token_resposta_ativo_descricao}}}

        :param ativo: The ativo of this UsuarioTokenResponse.
        :type: bool
        """
        self._ativo = ativo

    @property
    def cpf(self):
        """
        Gets the cpf of this UsuarioTokenResponse.
        {{{usuario_token_resposta_cpf_descricao}}}

        :return: The cpf of this UsuarioTokenResponse.
        :rtype: str
        """
        return self._cpf

    @cpf.setter
    def cpf(self, cpf):
        """
        Sets the cpf of this UsuarioTokenResponse.
        {{{usuario_token_resposta_cpf_descricao}}}

        :param cpf: The cpf of this UsuarioTokenResponse.
        :type: str
        """
        self._cpf = cpf

    @property
    def data_inclusao(self):
        """
        Gets the data_inclusao of this UsuarioTokenResponse.
        {{{usuario_token_resposta_data_inclusao_descricao}}}

        :return: The data_inclusao of this UsuarioTokenResponse.
        :rtype: str
        """
        return self._data_inclusao

    @data_inclusao.setter
    def data_inclusao(self, data_inclusao):
        """
        Sets the data_inclusao of this UsuarioTokenResponse.
        {{{usuario_token_resposta_data_inclusao_descricao}}}

        :param data_inclusao: The data_inclusao of this UsuarioTokenResponse.
        :type: str
        """
        self._data_inclusao = data_inclusao

    @property
    def data_nascimento(self):
        """
        Gets the data_nascimento of this UsuarioTokenResponse.
        {{{usuario_token_resposta_data_nascimento_descricao}}}

        :return: The data_nascimento of this UsuarioTokenResponse.
        :rtype: str
        """
        return self._data_nascimento

    @data_nascimento.setter
    def data_nascimento(self, data_nascimento):
        """
        Sets the data_nascimento of this UsuarioTokenResponse.
        {{{usuario_token_resposta_data_nascimento_descricao}}}

        :param data_nascimento: The data_nascimento of this UsuarioTokenResponse.
        :type: str
        """
        self._data_nascimento = data_nascimento

    @property
    def ddd(self):
        """
        Gets the ddd of this UsuarioTokenResponse.
        {{{usuario_token_resposta_ddd_descricao}}}

        :return: The ddd of this UsuarioTokenResponse.
        :rtype: str
        """
        return self._ddd

    @ddd.setter
    def ddd(self, ddd):
        """
        Sets the ddd of this UsuarioTokenResponse.
        {{{usuario_token_resposta_ddd_descricao}}}

        :param ddd: The ddd of this UsuarioTokenResponse.
        :type: str
        """
        self._ddd = ddd

    @property
    def email(self):
        """
        Gets the email of this UsuarioTokenResponse.
        {{{usuario_token_resposta_email_descricao}}}

        :return: The email of this UsuarioTokenResponse.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """
        Sets the email of this UsuarioTokenResponse.
        {{{usuario_token_resposta_email_descricao}}}

        :param email: The email of this UsuarioTokenResponse.
        :type: str
        """
        self._email = email

    @property
    def telefone(self):
        """
        Gets the telefone of this UsuarioTokenResponse.
        {{{usuario_token_resposta_telefone_descricao}}}

        :return: The telefone of this UsuarioTokenResponse.
        :rtype: str
        """
        return self._telefone

    @telefone.setter
    def telefone(self, telefone):
        """
        Sets the telefone of this UsuarioTokenResponse.
        {{{usuario_token_resposta_telefone_descricao}}}

        :param telefone: The telefone of this UsuarioTokenResponse.
        :type: str
        """
        self._telefone = telefone

    @property
    def token(self):
        """
        Gets the token of this UsuarioTokenResponse.
        {{{usuario_token_resposta_token_descricao}}}

        :return: The token of this UsuarioTokenResponse.
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """
        Sets the token of this UsuarioTokenResponse.
        {{{usuario_token_resposta_token_descricao}}}

        :param token: The token of this UsuarioTokenResponse.
        :type: str
        """
        self._token = token

    @property
    def validade(self):
        """
        Gets the validade of this UsuarioTokenResponse.
        {{{usuario_token_resposta_validade_descricao}}}

        :return: The validade of this UsuarioTokenResponse.
        :rtype: str
        """
        return self._validade

    @validade.setter
    def validade(self, validade):
        """
        Sets the validade of this UsuarioTokenResponse.
        {{{usuario_token_resposta_validade_descricao}}}

        :param validade: The validade of this UsuarioTokenResponse.
        :type: str
        """
        self._validade = validade

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

