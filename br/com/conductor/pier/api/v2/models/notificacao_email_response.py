# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class NotificacaoEmailResponse(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        NotificacaoEmailResponse - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'int',
            'id_template_notificacao': 'int',
            'id_documento': 'int',
            'destinatario': 'str',
            'remetente': 'str'
        }

        self.attribute_map = {
            'id': 'id',
            'id_template_notificacao': 'idTemplateNotificacao',
            'id_documento': 'idDocumento',
            'destinatario': 'destinatario',
            'remetente': 'remetente'
        }

        self._id = None
        self._id_template_notificacao = None
        self._id_documento = None
        self._destinatario = None
        self._remetente = None

    @property
    def id(self):
        """
        Gets the id of this NotificacaoEmailResponse.
        C\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o da notifica\u00C3\u00A7\u00C3\u00A3o gerada.

        :return: The id of this NotificacaoEmailResponse.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this NotificacaoEmailResponse.
        C\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o da notifica\u00C3\u00A7\u00C3\u00A3o gerada.

        :param id: The id of this NotificacaoEmailResponse.
        :type: int
        """
        self._id = id

    @property
    def id_template_notificacao(self):
        """
        Gets the id_template_notificacao of this NotificacaoEmailResponse.
        C\u00C3\u00B3digo identificador do template da notifica\u00C3\u00A7\u00C3\u00A3o.

        :return: The id_template_notificacao of this NotificacaoEmailResponse.
        :rtype: int
        """
        return self._id_template_notificacao

    @id_template_notificacao.setter
    def id_template_notificacao(self, id_template_notificacao):
        """
        Sets the id_template_notificacao of this NotificacaoEmailResponse.
        C\u00C3\u00B3digo identificador do template da notifica\u00C3\u00A7\u00C3\u00A3o.

        :param id_template_notificacao: The id_template_notificacao of this NotificacaoEmailResponse.
        :type: int
        """
        self._id_template_notificacao = id_template_notificacao

    @property
    def id_documento(self):
        """
        Gets the id_documento of this NotificacaoEmailResponse.
        C\u00C3\u00B3digo identificador do Documento.

        :return: The id_documento of this NotificacaoEmailResponse.
        :rtype: int
        """
        return self._id_documento

    @id_documento.setter
    def id_documento(self, id_documento):
        """
        Sets the id_documento of this NotificacaoEmailResponse.
        C\u00C3\u00B3digo identificador do Documento.

        :param id_documento: The id_documento of this NotificacaoEmailResponse.
        :type: int
        """
        self._id_documento = id_documento

    @property
    def destinatario(self):
        """
        Gets the destinatario of this NotificacaoEmailResponse.
        Email do destinat\u00C3\u00A1rio da notifica\u00C3\u00A7\u00C3\u00A3o.

        :return: The destinatario of this NotificacaoEmailResponse.
        :rtype: str
        """
        return self._destinatario

    @destinatario.setter
    def destinatario(self, destinatario):
        """
        Sets the destinatario of this NotificacaoEmailResponse.
        Email do destinat\u00C3\u00A1rio da notifica\u00C3\u00A7\u00C3\u00A3o.

        :param destinatario: The destinatario of this NotificacaoEmailResponse.
        :type: str
        """
        self._destinatario = destinatario

    @property
    def remetente(self):
        """
        Gets the remetente of this NotificacaoEmailResponse.
        Email do remetente da notifica\u00C3\u00A7\u00C3\u00A3o.

        :return: The remetente of this NotificacaoEmailResponse.
        :rtype: str
        """
        return self._remetente

    @remetente.setter
    def remetente(self, remetente):
        """
        Sets the remetente of this NotificacaoEmailResponse.
        Email do remetente da notifica\u00C3\u00A7\u00C3\u00A3o.

        :param remetente: The remetente of this NotificacaoEmailResponse.
        :type: str
        """
        self._remetente = remetente

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

