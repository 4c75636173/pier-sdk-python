# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class ReferenciaComercialAprovadoResponse(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        ReferenciaComercialAprovadoResponse - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'razao_social': 'str',
            'nome_contrato': 'str',
            'ddd': 'str',
            'telefone': 'str',
            'email': 'str'
        }

        self.attribute_map = {
            'razao_social': 'razaoSocial',
            'nome_contrato': 'nomeContrato',
            'ddd': 'ddd',
            'telefone': 'telefone',
            'email': 'email'
        }

        self._razao_social = None
        self._nome_contrato = None
        self._ddd = None
        self._telefone = None
        self._email = None

    @property
    def razao_social(self):
        """
        Gets the razao_social of this ReferenciaComercialAprovadoResponse.
        Apresenta o nome completo da raz\u00E3o social da refer\u00EAncia comercial (nome empresarial)

        :return: The razao_social of this ReferenciaComercialAprovadoResponse.
        :rtype: str
        """
        return self._razao_social

    @razao_social.setter
    def razao_social(self, razao_social):
        """
        Sets the razao_social of this ReferenciaComercialAprovadoResponse.
        Apresenta o nome completo da raz\u00E3o social da refer\u00EAncia comercial (nome empresarial)

        :param razao_social: The razao_social of this ReferenciaComercialAprovadoResponse.
        :type: str
        """
        self._razao_social = razao_social

    @property
    def nome_contrato(self):
        """
        Gets the nome_contrato of this ReferenciaComercialAprovadoResponse.
        Apresenta o nome do respons\u00E1vel pela refer\u00EAncia comercial

        :return: The nome_contrato of this ReferenciaComercialAprovadoResponse.
        :rtype: str
        """
        return self._nome_contrato

    @nome_contrato.setter
    def nome_contrato(self, nome_contrato):
        """
        Sets the nome_contrato of this ReferenciaComercialAprovadoResponse.
        Apresenta o nome do respons\u00E1vel pela refer\u00EAncia comercial

        :param nome_contrato: The nome_contrato of this ReferenciaComercialAprovadoResponse.
        :type: str
        """
        self._nome_contrato = nome_contrato

    @property
    def ddd(self):
        """
        Gets the ddd of this ReferenciaComercialAprovadoResponse.
        Apresenta o DDD do n\u00FAmero de contato da refer\u00EAncia comercial

        :return: The ddd of this ReferenciaComercialAprovadoResponse.
        :rtype: str
        """
        return self._ddd

    @ddd.setter
    def ddd(self, ddd):
        """
        Sets the ddd of this ReferenciaComercialAprovadoResponse.
        Apresenta o DDD do n\u00FAmero de contato da refer\u00EAncia comercial

        :param ddd: The ddd of this ReferenciaComercialAprovadoResponse.
        :type: str
        """
        self._ddd = ddd

    @property
    def telefone(self):
        """
        Gets the telefone of this ReferenciaComercialAprovadoResponse.
        Apresenta o n\u00FAmero de contato da refer\u00EAncia comercial

        :return: The telefone of this ReferenciaComercialAprovadoResponse.
        :rtype: str
        """
        return self._telefone

    @telefone.setter
    def telefone(self, telefone):
        """
        Sets the telefone of this ReferenciaComercialAprovadoResponse.
        Apresenta o n\u00FAmero de contato da refer\u00EAncia comercial

        :param telefone: The telefone of this ReferenciaComercialAprovadoResponse.
        :type: str
        """
        self._telefone = telefone

    @property
    def email(self):
        """
        Gets the email of this ReferenciaComercialAprovadoResponse.
        Apresenta o e-mail de contato da refer\u00EAncia comercial

        :return: The email of this ReferenciaComercialAprovadoResponse.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """
        Sets the email of this ReferenciaComercialAprovadoResponse.
        Apresenta o e-mail de contato da refer\u00EAncia comercial

        :param email: The email of this ReferenciaComercialAprovadoResponse.
        :type: str
        """
        self._email = email

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

