# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class CartaoMultiAppImpressaoResponse(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        CartaoMultiAppImpressaoResponse - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'cartao_pai': 'CartaoImpressaoResponse',
            'cartao': 'CartaoImpressaoResponse'
        }

        self.attribute_map = {
            'cartao_pai': 'cartaoPai',
            'cartao': 'cartao'
        }

        self._cartao_pai = None
        self._cartao = None

    @property
    def cartao_pai(self):
        """
        Gets the cartao_pai of this CartaoMultiAppImpressaoResponse.
        {{{cartao_impressao_multiapp_response_cartao_pai_value}}}

        :return: The cartao_pai of this CartaoMultiAppImpressaoResponse.
        :rtype: CartaoImpressaoResponse
        """
        return self._cartao_pai

    @cartao_pai.setter
    def cartao_pai(self, cartao_pai):
        """
        Sets the cartao_pai of this CartaoMultiAppImpressaoResponse.
        {{{cartao_impressao_multiapp_response_cartao_pai_value}}}

        :param cartao_pai: The cartao_pai of this CartaoMultiAppImpressaoResponse.
        :type: CartaoImpressaoResponse
        """
        self._cartao_pai = cartao_pai

    @property
    def cartao(self):
        """
        Gets the cartao of this CartaoMultiAppImpressaoResponse.
        {{{cartao_impressao_multiapp_response_cartao_filho_value}}}

        :return: The cartao of this CartaoMultiAppImpressaoResponse.
        :rtype: CartaoImpressaoResponse
        """
        return self._cartao

    @cartao.setter
    def cartao(self, cartao):
        """
        Sets the cartao of this CartaoMultiAppImpressaoResponse.
        {{{cartao_impressao_multiapp_response_cartao_filho_value}}}

        :param cartao: The cartao of this CartaoMultiAppImpressaoResponse.
        :type: CartaoImpressaoResponse
        """
        self._cartao = cartao

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

