# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class PessoaJuridicaAprovadaPersist(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        PessoaJuridicaAprovadaPersist - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'razao_social': 'str',
            'nome_fantasia': 'str',
            'cnpj': 'str',
            'inscricao_estadual': 'str',
            'data_abertura_empresa': 'str',
            'id_origem_comercial': 'int',
            'id_produto': 'int',
            'numero_agencia': 'int',
            'numero_conta_corrente': 'str',
            'email': 'str',
            'dia_vencimento': 'int',
            'nome_impresso': 'str',
            'valor_renda': 'float',
            'canal_entrada': 'str',
            'valor_pontuacao': 'int',
            'telefones': 'list[TelefonePessoaAprovadaPersist]',
            'enderecos': 'list[EnderecoAprovadoPersist]',
            'socios': 'list[PessoaPersist]',
            'referencias_comerciais': 'list[RefenciaComercialAprovadoPersist]',
            'limite_global': 'float',
            'limite_maximo': 'float',
            'limite_parcelas': 'float'
        }

        self.attribute_map = {
            'razao_social': 'razaoSocial',
            'nome_fantasia': 'nomeFantasia',
            'cnpj': 'cnpj',
            'inscricao_estadual': 'inscricaoEstadual',
            'data_abertura_empresa': 'dataAberturaEmpresa',
            'id_origem_comercial': 'idOrigemComercial',
            'id_produto': 'idProduto',
            'numero_agencia': 'numeroAgencia',
            'numero_conta_corrente': 'numeroContaCorrente',
            'email': 'email',
            'dia_vencimento': 'diaVencimento',
            'nome_impresso': 'nomeImpresso',
            'valor_renda': 'valorRenda',
            'canal_entrada': 'canalEntrada',
            'valor_pontuacao': 'valorPontuacao',
            'telefones': 'telefones',
            'enderecos': 'enderecos',
            'socios': 'socios',
            'referencias_comerciais': 'referenciasComerciais',
            'limite_global': 'limiteGlobal',
            'limite_maximo': 'limiteMaximo',
            'limite_parcelas': 'limiteParcelas'
        }

        self._razao_social = None
        self._nome_fantasia = None
        self._cnpj = None
        self._inscricao_estadual = None
        self._data_abertura_empresa = None
        self._id_origem_comercial = None
        self._id_produto = None
        self._numero_agencia = None
        self._numero_conta_corrente = None
        self._email = None
        self._dia_vencimento = None
        self._nome_impresso = None
        self._valor_renda = None
        self._canal_entrada = None
        self._valor_pontuacao = None
        self._telefones = None
        self._enderecos = None
        self._socios = None
        self._referencias_comerciais = None
        self._limite_global = None
        self._limite_maximo = None
        self._limite_parcelas = None

    @property
    def razao_social(self):
        """
        Gets the razao_social of this PessoaJuridicaAprovadaPersist.
        Apresenta o nome completo da raz\u00C3\u00A3o social (nome empresarial)'.

        :return: The razao_social of this PessoaJuridicaAprovadaPersist.
        :rtype: str
        """
        return self._razao_social

    @razao_social.setter
    def razao_social(self, razao_social):
        """
        Sets the razao_social of this PessoaJuridicaAprovadaPersist.
        Apresenta o nome completo da raz\u00C3\u00A3o social (nome empresarial)'.

        :param razao_social: The razao_social of this PessoaJuridicaAprovadaPersist.
        :type: str
        """
        self._razao_social = razao_social

    @property
    def nome_fantasia(self):
        """
        Gets the nome_fantasia of this PessoaJuridicaAprovadaPersist.
        Apresenta o nome fantasia da empresa.

        :return: The nome_fantasia of this PessoaJuridicaAprovadaPersist.
        :rtype: str
        """
        return self._nome_fantasia

    @nome_fantasia.setter
    def nome_fantasia(self, nome_fantasia):
        """
        Sets the nome_fantasia of this PessoaJuridicaAprovadaPersist.
        Apresenta o nome fantasia da empresa.

        :param nome_fantasia: The nome_fantasia of this PessoaJuridicaAprovadaPersist.
        :type: str
        """
        self._nome_fantasia = nome_fantasia

    @property
    def cnpj(self):
        """
        Gets the cnpj of this PessoaJuridicaAprovadaPersist.
        N\u00C3\u00BAmero do Cadastro Nacional de Pessoa Juridica (CNPJ)

        :return: The cnpj of this PessoaJuridicaAprovadaPersist.
        :rtype: str
        """
        return self._cnpj

    @cnpj.setter
    def cnpj(self, cnpj):
        """
        Sets the cnpj of this PessoaJuridicaAprovadaPersist.
        N\u00C3\u00BAmero do Cadastro Nacional de Pessoa Juridica (CNPJ)

        :param cnpj: The cnpj of this PessoaJuridicaAprovadaPersist.
        :type: str
        """
        self._cnpj = cnpj

    @property
    def inscricao_estadual(self):
        """
        Gets the inscricao_estadual of this PessoaJuridicaAprovadaPersist.
        N\u00C3\u00BAmero da Inscri\u00C3\u00A7\u00C3\u00A3o Estadual (IE).

        :return: The inscricao_estadual of this PessoaJuridicaAprovadaPersist.
        :rtype: str
        """
        return self._inscricao_estadual

    @inscricao_estadual.setter
    def inscricao_estadual(self, inscricao_estadual):
        """
        Sets the inscricao_estadual of this PessoaJuridicaAprovadaPersist.
        N\u00C3\u00BAmero da Inscri\u00C3\u00A7\u00C3\u00A3o Estadual (IE).

        :param inscricao_estadual: The inscricao_estadual of this PessoaJuridicaAprovadaPersist.
        :type: str
        """
        self._inscricao_estadual = inscricao_estadual

    @property
    def data_abertura_empresa(self):
        """
        Gets the data_abertura_empresa of this PessoaJuridicaAprovadaPersist.
        Data de abertura da empresa, essa data deve ser informada no formato: aaaa-MM-dd.

        :return: The data_abertura_empresa of this PessoaJuridicaAprovadaPersist.
        :rtype: str
        """
        return self._data_abertura_empresa

    @data_abertura_empresa.setter
    def data_abertura_empresa(self, data_abertura_empresa):
        """
        Sets the data_abertura_empresa of this PessoaJuridicaAprovadaPersist.
        Data de abertura da empresa, essa data deve ser informada no formato: aaaa-MM-dd.

        :param data_abertura_empresa: The data_abertura_empresa of this PessoaJuridicaAprovadaPersist.
        :type: str
        """
        self._data_abertura_empresa = data_abertura_empresa

    @property
    def id_origem_comercial(self):
        """
        Gets the id_origem_comercial of this PessoaJuridicaAprovadaPersist.
        Id da origem comercial

        :return: The id_origem_comercial of this PessoaJuridicaAprovadaPersist.
        :rtype: int
        """
        return self._id_origem_comercial

    @id_origem_comercial.setter
    def id_origem_comercial(self, id_origem_comercial):
        """
        Sets the id_origem_comercial of this PessoaJuridicaAprovadaPersist.
        Id da origem comercial

        :param id_origem_comercial: The id_origem_comercial of this PessoaJuridicaAprovadaPersist.
        :type: int
        """
        self._id_origem_comercial = id_origem_comercial

    @property
    def id_produto(self):
        """
        Gets the id_produto of this PessoaJuridicaAprovadaPersist.
        Id do produto

        :return: The id_produto of this PessoaJuridicaAprovadaPersist.
        :rtype: int
        """
        return self._id_produto

    @id_produto.setter
    def id_produto(self, id_produto):
        """
        Sets the id_produto of this PessoaJuridicaAprovadaPersist.
        Id do produto

        :param id_produto: The id_produto of this PessoaJuridicaAprovadaPersist.
        :type: int
        """
        self._id_produto = id_produto

    @property
    def numero_agencia(self):
        """
        Gets the numero_agencia of this PessoaJuridicaAprovadaPersist.
        N\u00C3\u00BAmero da ag\u00C3\u00AAncia.

        :return: The numero_agencia of this PessoaJuridicaAprovadaPersist.
        :rtype: int
        """
        return self._numero_agencia

    @numero_agencia.setter
    def numero_agencia(self, numero_agencia):
        """
        Sets the numero_agencia of this PessoaJuridicaAprovadaPersist.
        N\u00C3\u00BAmero da ag\u00C3\u00AAncia.

        :param numero_agencia: The numero_agencia of this PessoaJuridicaAprovadaPersist.
        :type: int
        """
        self._numero_agencia = numero_agencia

    @property
    def numero_conta_corrente(self):
        """
        Gets the numero_conta_corrente of this PessoaJuridicaAprovadaPersist.
        N\u00C3\u00BAmero da conta corrente.

        :return: The numero_conta_corrente of this PessoaJuridicaAprovadaPersist.
        :rtype: str
        """
        return self._numero_conta_corrente

    @numero_conta_corrente.setter
    def numero_conta_corrente(self, numero_conta_corrente):
        """
        Sets the numero_conta_corrente of this PessoaJuridicaAprovadaPersist.
        N\u00C3\u00BAmero da conta corrente.

        :param numero_conta_corrente: The numero_conta_corrente of this PessoaJuridicaAprovadaPersist.
        :type: str
        """
        self._numero_conta_corrente = numero_conta_corrente

    @property
    def email(self):
        """
        Gets the email of this PessoaJuridicaAprovadaPersist.
        Email da empresa

        :return: The email of this PessoaJuridicaAprovadaPersist.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """
        Sets the email of this PessoaJuridicaAprovadaPersist.
        Email da empresa

        :param email: The email of this PessoaJuridicaAprovadaPersist.
        :type: str
        """
        self._email = email

    @property
    def dia_vencimento(self):
        """
        Gets the dia_vencimento of this PessoaJuridicaAprovadaPersist.
        Dia vencimento

        :return: The dia_vencimento of this PessoaJuridicaAprovadaPersist.
        :rtype: int
        """
        return self._dia_vencimento

    @dia_vencimento.setter
    def dia_vencimento(self, dia_vencimento):
        """
        Sets the dia_vencimento of this PessoaJuridicaAprovadaPersist.
        Dia vencimento

        :param dia_vencimento: The dia_vencimento of this PessoaJuridicaAprovadaPersist.
        :type: int
        """
        self._dia_vencimento = dia_vencimento

    @property
    def nome_impresso(self):
        """
        Gets the nome_impresso of this PessoaJuridicaAprovadaPersist.
        Nome que deve ser impresso no cart\u00C3\u00A3o

        :return: The nome_impresso of this PessoaJuridicaAprovadaPersist.
        :rtype: str
        """
        return self._nome_impresso

    @nome_impresso.setter
    def nome_impresso(self, nome_impresso):
        """
        Sets the nome_impresso of this PessoaJuridicaAprovadaPersist.
        Nome que deve ser impresso no cart\u00C3\u00A3o

        :param nome_impresso: The nome_impresso of this PessoaJuridicaAprovadaPersist.
        :type: str
        """
        self._nome_impresso = nome_impresso

    @property
    def valor_renda(self):
        """
        Gets the valor_renda of this PessoaJuridicaAprovadaPersist.
        Apresenta o valor da renda compravada

        :return: The valor_renda of this PessoaJuridicaAprovadaPersist.
        :rtype: float
        """
        return self._valor_renda

    @valor_renda.setter
    def valor_renda(self, valor_renda):
        """
        Sets the valor_renda of this PessoaJuridicaAprovadaPersist.
        Apresenta o valor da renda compravada

        :param valor_renda: The valor_renda of this PessoaJuridicaAprovadaPersist.
        :type: float
        """
        self._valor_renda = valor_renda

    @property
    def canal_entrada(self):
        """
        Gets the canal_entrada of this PessoaJuridicaAprovadaPersist.
        Indica o canal pelo qual o cadastro do cliente foi realizado

        :return: The canal_entrada of this PessoaJuridicaAprovadaPersist.
        :rtype: str
        """
        return self._canal_entrada

    @canal_entrada.setter
    def canal_entrada(self, canal_entrada):
        """
        Sets the canal_entrada of this PessoaJuridicaAprovadaPersist.
        Indica o canal pelo qual o cadastro do cliente foi realizado

        :param canal_entrada: The canal_entrada of this PessoaJuridicaAprovadaPersist.
        :type: str
        """
        self._canal_entrada = canal_entrada

    @property
    def valor_pontuacao(self):
        """
        Gets the valor_pontuacao of this PessoaJuridicaAprovadaPersist.
        Indica o valor da pontua\u00C3\u00A7\u00C3\u00A3o atribuido ao cliente (caso n\u00C3\u00A3o informado ser\u00C3\u00A1 atribuido o valor = 0)

        :return: The valor_pontuacao of this PessoaJuridicaAprovadaPersist.
        :rtype: int
        """
        return self._valor_pontuacao

    @valor_pontuacao.setter
    def valor_pontuacao(self, valor_pontuacao):
        """
        Sets the valor_pontuacao of this PessoaJuridicaAprovadaPersist.
        Indica o valor da pontua\u00C3\u00A7\u00C3\u00A3o atribuido ao cliente (caso n\u00C3\u00A3o informado ser\u00C3\u00A1 atribuido o valor = 0)

        :param valor_pontuacao: The valor_pontuacao of this PessoaJuridicaAprovadaPersist.
        :type: int
        """
        self._valor_pontuacao = valor_pontuacao

    @property
    def telefones(self):
        """
        Gets the telefones of this PessoaJuridicaAprovadaPersist.
        Apresenta os telefones da empresa

        :return: The telefones of this PessoaJuridicaAprovadaPersist.
        :rtype: list[TelefonePessoaAprovadaPersist]
        """
        return self._telefones

    @telefones.setter
    def telefones(self, telefones):
        """
        Sets the telefones of this PessoaJuridicaAprovadaPersist.
        Apresenta os telefones da empresa

        :param telefones: The telefones of this PessoaJuridicaAprovadaPersist.
        :type: list[TelefonePessoaAprovadaPersist]
        """
        self._telefones = telefones

    @property
    def enderecos(self):
        """
        Gets the enderecos of this PessoaJuridicaAprovadaPersist.
        Pode ser informado os seguintes tipos de endere\u00C3\u00A7o: Residencial, Comercial, e Outros

        :return: The enderecos of this PessoaJuridicaAprovadaPersist.
        :rtype: list[EnderecoAprovadoPersist]
        """
        return self._enderecos

    @enderecos.setter
    def enderecos(self, enderecos):
        """
        Sets the enderecos of this PessoaJuridicaAprovadaPersist.
        Pode ser informado os seguintes tipos de endere\u00C3\u00A7o: Residencial, Comercial, e Outros

        :param enderecos: The enderecos of this PessoaJuridicaAprovadaPersist.
        :type: list[EnderecoAprovadoPersist]
        """
        self._enderecos = enderecos

    @property
    def socios(self):
        """
        Gets the socios of this PessoaJuridicaAprovadaPersist.
        Apresenta os dados dos s\u00C3\u00B3cios da empresa, caso exista

        :return: The socios of this PessoaJuridicaAprovadaPersist.
        :rtype: list[PessoaPersist]
        """
        return self._socios

    @socios.setter
    def socios(self, socios):
        """
        Sets the socios of this PessoaJuridicaAprovadaPersist.
        Apresenta os dados dos s\u00C3\u00B3cios da empresa, caso exista

        :param socios: The socios of this PessoaJuridicaAprovadaPersist.
        :type: list[PessoaPersist]
        """
        self._socios = socios

    @property
    def referencias_comerciais(self):
        """
        Gets the referencias_comerciais of this PessoaJuridicaAprovadaPersist.
        Apresenta os dados das refer\u00C3\u00AAncias comerciais

        :return: The referencias_comerciais of this PessoaJuridicaAprovadaPersist.
        :rtype: list[RefenciaComercialAprovadoPersist]
        """
        return self._referencias_comerciais

    @referencias_comerciais.setter
    def referencias_comerciais(self, referencias_comerciais):
        """
        Sets the referencias_comerciais of this PessoaJuridicaAprovadaPersist.
        Apresenta os dados das refer\u00C3\u00AAncias comerciais

        :param referencias_comerciais: The referencias_comerciais of this PessoaJuridicaAprovadaPersist.
        :type: list[RefenciaComercialAprovadoPersist]
        """
        self._referencias_comerciais = referencias_comerciais

    @property
    def limite_global(self):
        """
        Gets the limite_global of this PessoaJuridicaAprovadaPersist.
        Valor do Limite Global

        :return: The limite_global of this PessoaJuridicaAprovadaPersist.
        :rtype: float
        """
        return self._limite_global

    @limite_global.setter
    def limite_global(self, limite_global):
        """
        Sets the limite_global of this PessoaJuridicaAprovadaPersist.
        Valor do Limite Global

        :param limite_global: The limite_global of this PessoaJuridicaAprovadaPersist.
        :type: float
        """
        self._limite_global = limite_global

    @property
    def limite_maximo(self):
        """
        Gets the limite_maximo of this PessoaJuridicaAprovadaPersist.
        Valor m\u00C3\u00A1ximo do limite de cr\u00C3\u00A9dito para realizar transa\u00C3\u00A7\u00C3\u00B5es

        :return: The limite_maximo of this PessoaJuridicaAprovadaPersist.
        :rtype: float
        """
        return self._limite_maximo

    @limite_maximo.setter
    def limite_maximo(self, limite_maximo):
        """
        Sets the limite_maximo of this PessoaJuridicaAprovadaPersist.
        Valor m\u00C3\u00A1ximo do limite de cr\u00C3\u00A9dito para realizar transa\u00C3\u00A7\u00C3\u00B5es

        :param limite_maximo: The limite_maximo of this PessoaJuridicaAprovadaPersist.
        :type: float
        """
        self._limite_maximo = limite_maximo

    @property
    def limite_parcelas(self):
        """
        Gets the limite_parcelas of this PessoaJuridicaAprovadaPersist.
        Valor do limite de cr\u00C3\u00A9dito acumulado da soma das parcelas das compras

        :return: The limite_parcelas of this PessoaJuridicaAprovadaPersist.
        :rtype: float
        """
        return self._limite_parcelas

    @limite_parcelas.setter
    def limite_parcelas(self, limite_parcelas):
        """
        Sets the limite_parcelas of this PessoaJuridicaAprovadaPersist.
        Valor do limite de cr\u00C3\u00A9dito acumulado da soma das parcelas das compras

        :param limite_parcelas: The limite_parcelas of this PessoaJuridicaAprovadaPersist.
        :type: float
        """
        self._limite_parcelas = limite_parcelas

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

