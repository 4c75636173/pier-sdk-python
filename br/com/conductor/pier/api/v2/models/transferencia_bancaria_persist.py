# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class TransferenciaBancariaPersist(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        TransferenciaBancariaPersist - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'data_compra': 'date',
            'proximo_vencimento_padrao': 'date',
            'proximo_vencimento_real': 'date',
            'valor_compra': 'float',
            'nome_favorecido': 'str',
            'documento_favorecido': 'str',
            'banco': 'int',
            'numero_agencia': 'str',
            'digito_agencia': 'str',
            'numero_conta': 'str',
            'digito_conta': 'str',
            'flag_conta_poupanca': 'int'
        }

        self.attribute_map = {
            'data_compra': 'dataCompra',
            'proximo_vencimento_padrao': 'proximoVencimentoPadrao',
            'proximo_vencimento_real': 'proximoVencimentoReal',
            'valor_compra': 'valorCompra',
            'nome_favorecido': 'nomeFavorecido',
            'documento_favorecido': 'documentoFavorecido',
            'banco': 'banco',
            'numero_agencia': 'numeroAgencia',
            'digito_agencia': 'digitoAgencia',
            'numero_conta': 'numeroConta',
            'digito_conta': 'digitoConta',
            'flag_conta_poupanca': 'flagContaPoupanca'
        }

        self._data_compra = None
        self._proximo_vencimento_padrao = None
        self._proximo_vencimento_real = None
        self._valor_compra = None
        self._nome_favorecido = None
        self._documento_favorecido = None
        self._banco = None
        self._numero_agencia = None
        self._digito_agencia = None
        self._numero_conta = None
        self._digito_conta = None
        self._flag_conta_poupanca = None

    @property
    def data_compra(self):
        """
        Gets the data_compra of this TransferenciaBancariaPersist.
        Data da transfer\u00C3\u00AAncia

        :return: The data_compra of this TransferenciaBancariaPersist.
        :rtype: date
        """
        return self._data_compra

    @data_compra.setter
    def data_compra(self, data_compra):
        """
        Sets the data_compra of this TransferenciaBancariaPersist.
        Data da transfer\u00C3\u00AAncia

        :param data_compra: The data_compra of this TransferenciaBancariaPersist.
        :type: date
        """
        self._data_compra = data_compra

    @property
    def proximo_vencimento_padrao(self):
        """
        Gets the proximo_vencimento_padrao of this TransferenciaBancariaPersist.
        Dia do vencimento padr\u00C3\u00A3o da fatura

        :return: The proximo_vencimento_padrao of this TransferenciaBancariaPersist.
        :rtype: date
        """
        return self._proximo_vencimento_padrao

    @proximo_vencimento_padrao.setter
    def proximo_vencimento_padrao(self, proximo_vencimento_padrao):
        """
        Sets the proximo_vencimento_padrao of this TransferenciaBancariaPersist.
        Dia do vencimento padr\u00C3\u00A3o da fatura

        :param proximo_vencimento_padrao: The proximo_vencimento_padrao of this TransferenciaBancariaPersist.
        :type: date
        """
        self._proximo_vencimento_padrao = proximo_vencimento_padrao

    @property
    def proximo_vencimento_real(self):
        """
        Gets the proximo_vencimento_real of this TransferenciaBancariaPersist.
        Data do vencimento real da fatura

        :return: The proximo_vencimento_real of this TransferenciaBancariaPersist.
        :rtype: date
        """
        return self._proximo_vencimento_real

    @proximo_vencimento_real.setter
    def proximo_vencimento_real(self, proximo_vencimento_real):
        """
        Sets the proximo_vencimento_real of this TransferenciaBancariaPersist.
        Data do vencimento real da fatura

        :param proximo_vencimento_real: The proximo_vencimento_real of this TransferenciaBancariaPersist.
        :type: date
        """
        self._proximo_vencimento_real = proximo_vencimento_real

    @property
    def valor_compra(self):
        """
        Gets the valor_compra of this TransferenciaBancariaPersist.
        Valor da transfer\u00C3\u00AAncia

        :return: The valor_compra of this TransferenciaBancariaPersist.
        :rtype: float
        """
        return self._valor_compra

    @valor_compra.setter
    def valor_compra(self, valor_compra):
        """
        Sets the valor_compra of this TransferenciaBancariaPersist.
        Valor da transfer\u00C3\u00AAncia

        :param valor_compra: The valor_compra of this TransferenciaBancariaPersist.
        :type: float
        """
        self._valor_compra = valor_compra

    @property
    def nome_favorecido(self):
        """
        Gets the nome_favorecido of this TransferenciaBancariaPersist.
        Apresenta o 'Nome Completo da PF' ou o 'Nome Completo da Raz\u00C3\u00A3o Social (Nome Empresarial)'.

        :return: The nome_favorecido of this TransferenciaBancariaPersist.
        :rtype: str
        """
        return self._nome_favorecido

    @nome_favorecido.setter
    def nome_favorecido(self, nome_favorecido):
        """
        Sets the nome_favorecido of this TransferenciaBancariaPersist.
        Apresenta o 'Nome Completo da PF' ou o 'Nome Completo da Raz\u00C3\u00A3o Social (Nome Empresarial)'.

        :param nome_favorecido: The nome_favorecido of this TransferenciaBancariaPersist.
        :type: str
        """
        self._nome_favorecido = nome_favorecido

    @property
    def documento_favorecido(self):
        """
        Gets the documento_favorecido of this TransferenciaBancariaPersist.
        N\u00C3\u00BAmero do CPF ou CNPJ.

        :return: The documento_favorecido of this TransferenciaBancariaPersist.
        :rtype: str
        """
        return self._documento_favorecido

    @documento_favorecido.setter
    def documento_favorecido(self, documento_favorecido):
        """
        Sets the documento_favorecido of this TransferenciaBancariaPersist.
        N\u00C3\u00BAmero do CPF ou CNPJ.

        :param documento_favorecido: The documento_favorecido of this TransferenciaBancariaPersist.
        :type: str
        """
        self._documento_favorecido = documento_favorecido

    @property
    def banco(self):
        """
        Gets the banco of this TransferenciaBancariaPersist.
        C\u00C3\u00B3digo do banco

        :return: The banco of this TransferenciaBancariaPersist.
        :rtype: int
        """
        return self._banco

    @banco.setter
    def banco(self, banco):
        """
        Sets the banco of this TransferenciaBancariaPersist.
        C\u00C3\u00B3digo do banco

        :param banco: The banco of this TransferenciaBancariaPersist.
        :type: int
        """
        self._banco = banco

    @property
    def numero_agencia(self):
        """
        Gets the numero_agencia of this TransferenciaBancariaPersist.
        N\u00C3\u00BAmero da ag\u00C3\u00AAncia

        :return: The numero_agencia of this TransferenciaBancariaPersist.
        :rtype: str
        """
        return self._numero_agencia

    @numero_agencia.setter
    def numero_agencia(self, numero_agencia):
        """
        Sets the numero_agencia of this TransferenciaBancariaPersist.
        N\u00C3\u00BAmero da ag\u00C3\u00AAncia

        :param numero_agencia: The numero_agencia of this TransferenciaBancariaPersist.
        :type: str
        """
        self._numero_agencia = numero_agencia

    @property
    def digito_agencia(self):
        """
        Gets the digito_agencia of this TransferenciaBancariaPersist.
        D\u00C3\u00ADgito da ag\u00C3\u00AAncia

        :return: The digito_agencia of this TransferenciaBancariaPersist.
        :rtype: str
        """
        return self._digito_agencia

    @digito_agencia.setter
    def digito_agencia(self, digito_agencia):
        """
        Sets the digito_agencia of this TransferenciaBancariaPersist.
        D\u00C3\u00ADgito da ag\u00C3\u00AAncia

        :param digito_agencia: The digito_agencia of this TransferenciaBancariaPersist.
        :type: str
        """
        self._digito_agencia = digito_agencia

    @property
    def numero_conta(self):
        """
        Gets the numero_conta of this TransferenciaBancariaPersist.
        N\u00C3\u00BAmero da conta

        :return: The numero_conta of this TransferenciaBancariaPersist.
        :rtype: str
        """
        return self._numero_conta

    @numero_conta.setter
    def numero_conta(self, numero_conta):
        """
        Sets the numero_conta of this TransferenciaBancariaPersist.
        N\u00C3\u00BAmero da conta

        :param numero_conta: The numero_conta of this TransferenciaBancariaPersist.
        :type: str
        """
        self._numero_conta = numero_conta

    @property
    def digito_conta(self):
        """
        Gets the digito_conta of this TransferenciaBancariaPersist.
        D\u00C3\u00ADgito da conta

        :return: The digito_conta of this TransferenciaBancariaPersist.
        :rtype: str
        """
        return self._digito_conta

    @digito_conta.setter
    def digito_conta(self, digito_conta):
        """
        Sets the digito_conta of this TransferenciaBancariaPersist.
        D\u00C3\u00ADgito da conta

        :param digito_conta: The digito_conta of this TransferenciaBancariaPersist.
        :type: str
        """
        self._digito_conta = digito_conta

    @property
    def flag_conta_poupanca(self):
        """
        Gets the flag_conta_poupanca of this TransferenciaBancariaPersist.
        Sinaliza se conta banc\u00C3\u00A1ria \u00C3\u00A9 poupan\u00C3\u00A7a (1: Poupan\u00C3\u00A7a, 0: Conta corrente)

        :return: The flag_conta_poupanca of this TransferenciaBancariaPersist.
        :rtype: int
        """
        return self._flag_conta_poupanca

    @flag_conta_poupanca.setter
    def flag_conta_poupanca(self, flag_conta_poupanca):
        """
        Sets the flag_conta_poupanca of this TransferenciaBancariaPersist.
        Sinaliza se conta banc\u00C3\u00A1ria \u00C3\u00A9 poupan\u00C3\u00A7a (1: Poupan\u00C3\u00A7a, 0: Conta corrente)

        :param flag_conta_poupanca: The flag_conta_poupanca of this TransferenciaBancariaPersist.
        :type: int
        """
        self._flag_conta_poupanca = flag_conta_poupanca

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

