# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class StatusContaResponse(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        StatusContaResponse - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'int',
            'nome': 'str',
            'permite_alterar_vencimento': 'int',
            'permite_alterar_limite': 'int',
            'permite_emitir_nova_via_cartao': 'int',
            'permite_fazer_transferencia': 'int',
            'permite_receber_transferencia': 'int',
            'permite_criar_acordo_cobranca': 'int',
            'permite_atribuir_como_bloqueio': 'int',
            'permite_desbloquear': 'int',
            'permite_atribuir_como_cancelamento': 'int'
        }

        self.attribute_map = {
            'id': 'id',
            'nome': 'nome',
            'permite_alterar_vencimento': 'permiteAlterarVencimento',
            'permite_alterar_limite': 'permiteAlterarLimite',
            'permite_emitir_nova_via_cartao': 'permiteEmitirNovaViaCartao',
            'permite_fazer_transferencia': 'permiteFazerTransferencia',
            'permite_receber_transferencia': 'permiteReceberTransferencia',
            'permite_criar_acordo_cobranca': 'permiteCriarAcordoCobranca',
            'permite_atribuir_como_bloqueio': 'permiteAtribuirComoBloqueio',
            'permite_desbloquear': 'permiteDesbloquear',
            'permite_atribuir_como_cancelamento': 'permiteAtribuirComoCancelamento'
        }

        self._id = None
        self._nome = None
        self._permite_alterar_vencimento = None
        self._permite_alterar_limite = None
        self._permite_emitir_nova_via_cartao = None
        self._permite_fazer_transferencia = None
        self._permite_receber_transferencia = None
        self._permite_criar_acordo_cobranca = None
        self._permite_atribuir_como_bloqueio = None
        self._permite_desbloquear = None
        self._permite_atribuir_como_cancelamento = None

    @property
    def id(self):
        """
        Gets the id of this StatusContaResponse.
        {{{status_conta_response_id_value}}}

        :return: The id of this StatusContaResponse.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this StatusContaResponse.
        {{{status_conta_response_id_value}}}

        :param id: The id of this StatusContaResponse.
        :type: int
        """
        self._id = id

    @property
    def nome(self):
        """
        Gets the nome of this StatusContaResponse.
        {{{status_conta_response_nome_value}}}

        :return: The nome of this StatusContaResponse.
        :rtype: str
        """
        return self._nome

    @nome.setter
    def nome(self, nome):
        """
        Sets the nome of this StatusContaResponse.
        {{{status_conta_response_nome_value}}}

        :param nome: The nome of this StatusContaResponse.
        :type: str
        """
        self._nome = nome

    @property
    def permite_alterar_vencimento(self):
        """
        Gets the permite_alterar_vencimento of this StatusContaResponse.
        {{{status_conta_response_permite_alterar_vencimento_value}}}

        :return: The permite_alterar_vencimento of this StatusContaResponse.
        :rtype: int
        """
        return self._permite_alterar_vencimento

    @permite_alterar_vencimento.setter
    def permite_alterar_vencimento(self, permite_alterar_vencimento):
        """
        Sets the permite_alterar_vencimento of this StatusContaResponse.
        {{{status_conta_response_permite_alterar_vencimento_value}}}

        :param permite_alterar_vencimento: The permite_alterar_vencimento of this StatusContaResponse.
        :type: int
        """
        self._permite_alterar_vencimento = permite_alterar_vencimento

    @property
    def permite_alterar_limite(self):
        """
        Gets the permite_alterar_limite of this StatusContaResponse.
        {{{status_conta_response_permite_alterar_limite_value}}}

        :return: The permite_alterar_limite of this StatusContaResponse.
        :rtype: int
        """
        return self._permite_alterar_limite

    @permite_alterar_limite.setter
    def permite_alterar_limite(self, permite_alterar_limite):
        """
        Sets the permite_alterar_limite of this StatusContaResponse.
        {{{status_conta_response_permite_alterar_limite_value}}}

        :param permite_alterar_limite: The permite_alterar_limite of this StatusContaResponse.
        :type: int
        """
        self._permite_alterar_limite = permite_alterar_limite

    @property
    def permite_emitir_nova_via_cartao(self):
        """
        Gets the permite_emitir_nova_via_cartao of this StatusContaResponse.
        {{{status_conta_response_permite_emitir_nova_via_cartao_value}}}

        :return: The permite_emitir_nova_via_cartao of this StatusContaResponse.
        :rtype: int
        """
        return self._permite_emitir_nova_via_cartao

    @permite_emitir_nova_via_cartao.setter
    def permite_emitir_nova_via_cartao(self, permite_emitir_nova_via_cartao):
        """
        Sets the permite_emitir_nova_via_cartao of this StatusContaResponse.
        {{{status_conta_response_permite_emitir_nova_via_cartao_value}}}

        :param permite_emitir_nova_via_cartao: The permite_emitir_nova_via_cartao of this StatusContaResponse.
        :type: int
        """
        self._permite_emitir_nova_via_cartao = permite_emitir_nova_via_cartao

    @property
    def permite_fazer_transferencia(self):
        """
        Gets the permite_fazer_transferencia of this StatusContaResponse.
        {{{status_conta_response_permite_fazer_transferencia_value}}}

        :return: The permite_fazer_transferencia of this StatusContaResponse.
        :rtype: int
        """
        return self._permite_fazer_transferencia

    @permite_fazer_transferencia.setter
    def permite_fazer_transferencia(self, permite_fazer_transferencia):
        """
        Sets the permite_fazer_transferencia of this StatusContaResponse.
        {{{status_conta_response_permite_fazer_transferencia_value}}}

        :param permite_fazer_transferencia: The permite_fazer_transferencia of this StatusContaResponse.
        :type: int
        """
        self._permite_fazer_transferencia = permite_fazer_transferencia

    @property
    def permite_receber_transferencia(self):
        """
        Gets the permite_receber_transferencia of this StatusContaResponse.
        {{{status_conta_response_permite_receber_transferencia_value}}}

        :return: The permite_receber_transferencia of this StatusContaResponse.
        :rtype: int
        """
        return self._permite_receber_transferencia

    @permite_receber_transferencia.setter
    def permite_receber_transferencia(self, permite_receber_transferencia):
        """
        Sets the permite_receber_transferencia of this StatusContaResponse.
        {{{status_conta_response_permite_receber_transferencia_value}}}

        :param permite_receber_transferencia: The permite_receber_transferencia of this StatusContaResponse.
        :type: int
        """
        self._permite_receber_transferencia = permite_receber_transferencia

    @property
    def permite_criar_acordo_cobranca(self):
        """
        Gets the permite_criar_acordo_cobranca of this StatusContaResponse.
        {{{status_conta_response_permite_criar_acordo_cobranca_value}}}

        :return: The permite_criar_acordo_cobranca of this StatusContaResponse.
        :rtype: int
        """
        return self._permite_criar_acordo_cobranca

    @permite_criar_acordo_cobranca.setter
    def permite_criar_acordo_cobranca(self, permite_criar_acordo_cobranca):
        """
        Sets the permite_criar_acordo_cobranca of this StatusContaResponse.
        {{{status_conta_response_permite_criar_acordo_cobranca_value}}}

        :param permite_criar_acordo_cobranca: The permite_criar_acordo_cobranca of this StatusContaResponse.
        :type: int
        """
        self._permite_criar_acordo_cobranca = permite_criar_acordo_cobranca

    @property
    def permite_atribuir_como_bloqueio(self):
        """
        Gets the permite_atribuir_como_bloqueio of this StatusContaResponse.
        {{{status_conta_response_permite_atribuir_como_bloqueio_value}}}

        :return: The permite_atribuir_como_bloqueio of this StatusContaResponse.
        :rtype: int
        """
        return self._permite_atribuir_como_bloqueio

    @permite_atribuir_como_bloqueio.setter
    def permite_atribuir_como_bloqueio(self, permite_atribuir_como_bloqueio):
        """
        Sets the permite_atribuir_como_bloqueio of this StatusContaResponse.
        {{{status_conta_response_permite_atribuir_como_bloqueio_value}}}

        :param permite_atribuir_como_bloqueio: The permite_atribuir_como_bloqueio of this StatusContaResponse.
        :type: int
        """
        self._permite_atribuir_como_bloqueio = permite_atribuir_como_bloqueio

    @property
    def permite_desbloquear(self):
        """
        Gets the permite_desbloquear of this StatusContaResponse.
        {{{status_conta_response_permite_desbloquear_value}}}

        :return: The permite_desbloquear of this StatusContaResponse.
        :rtype: int
        """
        return self._permite_desbloquear

    @permite_desbloquear.setter
    def permite_desbloquear(self, permite_desbloquear):
        """
        Sets the permite_desbloquear of this StatusContaResponse.
        {{{status_conta_response_permite_desbloquear_value}}}

        :param permite_desbloquear: The permite_desbloquear of this StatusContaResponse.
        :type: int
        """
        self._permite_desbloquear = permite_desbloquear

    @property
    def permite_atribuir_como_cancelamento(self):
        """
        Gets the permite_atribuir_como_cancelamento of this StatusContaResponse.
        {{{status_conta_response_permite_atribuir_como_cancelamento_value}}}

        :return: The permite_atribuir_como_cancelamento of this StatusContaResponse.
        :rtype: int
        """
        return self._permite_atribuir_como_cancelamento

    @permite_atribuir_como_cancelamento.setter
    def permite_atribuir_como_cancelamento(self, permite_atribuir_como_cancelamento):
        """
        Sets the permite_atribuir_como_cancelamento of this StatusContaResponse.
        {{{status_conta_response_permite_atribuir_como_cancelamento_value}}}

        :param permite_atribuir_como_cancelamento: The permite_atribuir_como_cancelamento of this StatusContaResponse.
        :type: int
        """
        self._permite_atribuir_como_cancelamento = permite_atribuir_como_cancelamento

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

