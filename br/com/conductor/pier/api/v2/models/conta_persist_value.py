# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class ContaPersistValue(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        ContaPersistValue - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id_pessoa': 'int',
            'id_origem_comercial': 'int',
            'id_produto': 'int',
            'dia_vencimento': 'int',
            'valor_renda': 'float',
            'canal_entrada': 'str',
            'valor_pontuacao': 'int',
            'id_endereco_correspondencia': 'int',
            'limite_global': 'float',
            'limite_maximo': 'float',
            'limite_parcelas': 'float',
            'limite_consignado': 'float',
            'flag_fatura_por_email': 'int'
        }

        self.attribute_map = {
            'id_pessoa': 'idPessoa',
            'id_origem_comercial': 'idOrigemComercial',
            'id_produto': 'idProduto',
            'dia_vencimento': 'diaVencimento',
            'valor_renda': 'valorRenda',
            'canal_entrada': 'canalEntrada',
            'valor_pontuacao': 'valorPontuacao',
            'id_endereco_correspondencia': 'idEnderecoCorrespondencia',
            'limite_global': 'limiteGlobal',
            'limite_maximo': 'limiteMaximo',
            'limite_parcelas': 'limiteParcelas',
            'limite_consignado': 'limiteConsignado',
            'flag_fatura_por_email': 'flagFaturaPorEmail'
        }

        self._id_pessoa = None
        self._id_origem_comercial = None
        self._id_produto = None
        self._dia_vencimento = None
        self._valor_renda = None
        self._canal_entrada = None
        self._valor_pontuacao = None
        self._id_endereco_correspondencia = None
        self._limite_global = None
        self._limite_maximo = None
        self._limite_parcelas = None
        self._limite_consignado = None
        self._flag_fatura_por_email = None

    @property
    def id_pessoa(self):
        """
        Gets the id_pessoa of this ContaPersistValue.
        {{{conta_persist_id_pessoa_value}}}

        :return: The id_pessoa of this ContaPersistValue.
        :rtype: int
        """
        return self._id_pessoa

    @id_pessoa.setter
    def id_pessoa(self, id_pessoa):
        """
        Sets the id_pessoa of this ContaPersistValue.
        {{{conta_persist_id_pessoa_value}}}

        :param id_pessoa: The id_pessoa of this ContaPersistValue.
        :type: int
        """
        self._id_pessoa = id_pessoa

    @property
    def id_origem_comercial(self):
        """
        Gets the id_origem_comercial of this ContaPersistValue.
        {{{conta_persist_id_origem_comercial_value}}}

        :return: The id_origem_comercial of this ContaPersistValue.
        :rtype: int
        """
        return self._id_origem_comercial

    @id_origem_comercial.setter
    def id_origem_comercial(self, id_origem_comercial):
        """
        Sets the id_origem_comercial of this ContaPersistValue.
        {{{conta_persist_id_origem_comercial_value}}}

        :param id_origem_comercial: The id_origem_comercial of this ContaPersistValue.
        :type: int
        """
        self._id_origem_comercial = id_origem_comercial

    @property
    def id_produto(self):
        """
        Gets the id_produto of this ContaPersistValue.
        {{{conta_persist_id_produto_value}}}

        :return: The id_produto of this ContaPersistValue.
        :rtype: int
        """
        return self._id_produto

    @id_produto.setter
    def id_produto(self, id_produto):
        """
        Sets the id_produto of this ContaPersistValue.
        {{{conta_persist_id_produto_value}}}

        :param id_produto: The id_produto of this ContaPersistValue.
        :type: int
        """
        self._id_produto = id_produto

    @property
    def dia_vencimento(self):
        """
        Gets the dia_vencimento of this ContaPersistValue.
        {{{conta_persist_dia_vencimento_value}}}

        :return: The dia_vencimento of this ContaPersistValue.
        :rtype: int
        """
        return self._dia_vencimento

    @dia_vencimento.setter
    def dia_vencimento(self, dia_vencimento):
        """
        Sets the dia_vencimento of this ContaPersistValue.
        {{{conta_persist_dia_vencimento_value}}}

        :param dia_vencimento: The dia_vencimento of this ContaPersistValue.
        :type: int
        """
        self._dia_vencimento = dia_vencimento

    @property
    def valor_renda(self):
        """
        Gets the valor_renda of this ContaPersistValue.
        {{{conta_persist_valor_renda_value}}}

        :return: The valor_renda of this ContaPersistValue.
        :rtype: float
        """
        return self._valor_renda

    @valor_renda.setter
    def valor_renda(self, valor_renda):
        """
        Sets the valor_renda of this ContaPersistValue.
        {{{conta_persist_valor_renda_value}}}

        :param valor_renda: The valor_renda of this ContaPersistValue.
        :type: float
        """
        self._valor_renda = valor_renda

    @property
    def canal_entrada(self):
        """
        Gets the canal_entrada of this ContaPersistValue.
        {{{conta_persist_canal_entrada_value}}}

        :return: The canal_entrada of this ContaPersistValue.
        :rtype: str
        """
        return self._canal_entrada

    @canal_entrada.setter
    def canal_entrada(self, canal_entrada):
        """
        Sets the canal_entrada of this ContaPersistValue.
        {{{conta_persist_canal_entrada_value}}}

        :param canal_entrada: The canal_entrada of this ContaPersistValue.
        :type: str
        """
        self._canal_entrada = canal_entrada

    @property
    def valor_pontuacao(self):
        """
        Gets the valor_pontuacao of this ContaPersistValue.
        {{{conta_persist_valor_pontuacao_value}}}

        :return: The valor_pontuacao of this ContaPersistValue.
        :rtype: int
        """
        return self._valor_pontuacao

    @valor_pontuacao.setter
    def valor_pontuacao(self, valor_pontuacao):
        """
        Sets the valor_pontuacao of this ContaPersistValue.
        {{{conta_persist_valor_pontuacao_value}}}

        :param valor_pontuacao: The valor_pontuacao of this ContaPersistValue.
        :type: int
        """
        self._valor_pontuacao = valor_pontuacao

    @property
    def id_endereco_correspondencia(self):
        """
        Gets the id_endereco_correspondencia of this ContaPersistValue.
        {{{conta_persist_id_endereco_correspondencia_value}}}

        :return: The id_endereco_correspondencia of this ContaPersistValue.
        :rtype: int
        """
        return self._id_endereco_correspondencia

    @id_endereco_correspondencia.setter
    def id_endereco_correspondencia(self, id_endereco_correspondencia):
        """
        Sets the id_endereco_correspondencia of this ContaPersistValue.
        {{{conta_persist_id_endereco_correspondencia_value}}}

        :param id_endereco_correspondencia: The id_endereco_correspondencia of this ContaPersistValue.
        :type: int
        """
        self._id_endereco_correspondencia = id_endereco_correspondencia

    @property
    def limite_global(self):
        """
        Gets the limite_global of this ContaPersistValue.
        {{{conta_persist_limite_global_value}}}

        :return: The limite_global of this ContaPersistValue.
        :rtype: float
        """
        return self._limite_global

    @limite_global.setter
    def limite_global(self, limite_global):
        """
        Sets the limite_global of this ContaPersistValue.
        {{{conta_persist_limite_global_value}}}

        :param limite_global: The limite_global of this ContaPersistValue.
        :type: float
        """
        self._limite_global = limite_global

    @property
    def limite_maximo(self):
        """
        Gets the limite_maximo of this ContaPersistValue.
        {{{conta_persist_limite_maximo_value}}}

        :return: The limite_maximo of this ContaPersistValue.
        :rtype: float
        """
        return self._limite_maximo

    @limite_maximo.setter
    def limite_maximo(self, limite_maximo):
        """
        Sets the limite_maximo of this ContaPersistValue.
        {{{conta_persist_limite_maximo_value}}}

        :param limite_maximo: The limite_maximo of this ContaPersistValue.
        :type: float
        """
        self._limite_maximo = limite_maximo

    @property
    def limite_parcelas(self):
        """
        Gets the limite_parcelas of this ContaPersistValue.
        {{{conta_persist_limite_parcelas_value}}}

        :return: The limite_parcelas of this ContaPersistValue.
        :rtype: float
        """
        return self._limite_parcelas

    @limite_parcelas.setter
    def limite_parcelas(self, limite_parcelas):
        """
        Sets the limite_parcelas of this ContaPersistValue.
        {{{conta_persist_limite_parcelas_value}}}

        :param limite_parcelas: The limite_parcelas of this ContaPersistValue.
        :type: float
        """
        self._limite_parcelas = limite_parcelas

    @property
    def limite_consignado(self):
        """
        Gets the limite_consignado of this ContaPersistValue.
        {{{conta_persist_limite_consignado_value}}}

        :return: The limite_consignado of this ContaPersistValue.
        :rtype: float
        """
        return self._limite_consignado

    @limite_consignado.setter
    def limite_consignado(self, limite_consignado):
        """
        Sets the limite_consignado of this ContaPersistValue.
        {{{conta_persist_limite_consignado_value}}}

        :param limite_consignado: The limite_consignado of this ContaPersistValue.
        :type: float
        """
        self._limite_consignado = limite_consignado

    @property
    def flag_fatura_por_email(self):
        """
        Gets the flag_fatura_por_email of this ContaPersistValue.
        {{{conta_persist_flag_fatura_por_email_value}}}

        :return: The flag_fatura_por_email of this ContaPersistValue.
        :rtype: int
        """
        return self._flag_fatura_por_email

    @flag_fatura_por_email.setter
    def flag_fatura_por_email(self, flag_fatura_por_email):
        """
        Sets the flag_fatura_por_email of this ContaPersistValue.
        {{{conta_persist_flag_fatura_por_email_value}}}

        :param flag_fatura_por_email: The flag_fatura_por_email of this ContaPersistValue.
        :type: int
        """
        self._flag_fatura_por_email = flag_fatura_por_email

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

