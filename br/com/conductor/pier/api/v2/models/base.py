# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class Base(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        Base - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'int',
            'servidor': 'str',
            'usuario': 'str',
            'senha': 'str',
            'nome_base': 'str',
            'senha_criptografada': 'bool',
            'domain': 'str',
            'nome_base_controle_acesso': 'str',
            'id_emissor': 'int',
            'servidor_controle_acesso': 'str'
        }

        self.attribute_map = {
            'id': 'id',
            'servidor': 'servidor',
            'usuario': 'usuario',
            'senha': 'senha',
            'nome_base': 'nomeBase',
            'senha_criptografada': 'senhaCriptografada',
            'domain': 'domain',
            'nome_base_controle_acesso': 'nomeBaseControleAcesso',
            'id_emissor': 'idEmissor',
            'servidor_controle_acesso': 'servidorControleAcesso'
        }

        self._id = None
        self._servidor = None
        self._usuario = None
        self._senha = None
        self._nome_base = None
        self._senha_criptografada = None
        self._domain = None
        self._nome_base_controle_acesso = None
        self._id_emissor = None
        self._servidor_controle_acesso = None

    @property
    def id(self):
        """
        Gets the id of this Base.
        C\u00C3\u00B3digo identificador da base

        :return: The id of this Base.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Base.
        C\u00C3\u00B3digo identificador da base

        :param id: The id of this Base.
        :type: int
        """
        self._id = id

    @property
    def servidor(self):
        """
        Gets the servidor of this Base.
        IP do servidor

        :return: The servidor of this Base.
        :rtype: str
        """
        return self._servidor

    @servidor.setter
    def servidor(self, servidor):
        """
        Sets the servidor of this Base.
        IP do servidor

        :param servidor: The servidor of this Base.
        :type: str
        """
        self._servidor = servidor

    @property
    def usuario(self):
        """
        Gets the usuario of this Base.
        Nome do usu\u00C3\u00A1rio

        :return: The usuario of this Base.
        :rtype: str
        """
        return self._usuario

    @usuario.setter
    def usuario(self, usuario):
        """
        Sets the usuario of this Base.
        Nome do usu\u00C3\u00A1rio

        :param usuario: The usuario of this Base.
        :type: str
        """
        self._usuario = usuario

    @property
    def senha(self):
        """
        Gets the senha of this Base.
        Senha

        :return: The senha of this Base.
        :rtype: str
        """
        return self._senha

    @senha.setter
    def senha(self, senha):
        """
        Sets the senha of this Base.
        Senha

        :param senha: The senha of this Base.
        :type: str
        """
        self._senha = senha

    @property
    def nome_base(self):
        """
        Gets the nome_base of this Base.
        Nome da base

        :return: The nome_base of this Base.
        :rtype: str
        """
        return self._nome_base

    @nome_base.setter
    def nome_base(self, nome_base):
        """
        Sets the nome_base of this Base.
        Nome da base

        :param nome_base: The nome_base of this Base.
        :type: str
        """
        self._nome_base = nome_base

    @property
    def senha_criptografada(self):
        """
        Gets the senha_criptografada of this Base.
        senha Criptografada

        :return: The senha_criptografada of this Base.
        :rtype: bool
        """
        return self._senha_criptografada

    @senha_criptografada.setter
    def senha_criptografada(self, senha_criptografada):
        """
        Sets the senha_criptografada of this Base.
        senha Criptografada

        :param senha_criptografada: The senha_criptografada of this Base.
        :type: bool
        """
        self._senha_criptografada = senha_criptografada

    @property
    def domain(self):
        """
        Gets the domain of this Base.
        Dom\u00C3\u00ADnio da base

        :return: The domain of this Base.
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """
        Sets the domain of this Base.
        Dom\u00C3\u00ADnio da base

        :param domain: The domain of this Base.
        :type: str
        """
        self._domain = domain

    @property
    def nome_base_controle_acesso(self):
        """
        Gets the nome_base_controle_acesso of this Base.
        Nome da base de controle acesso

        :return: The nome_base_controle_acesso of this Base.
        :rtype: str
        """
        return self._nome_base_controle_acesso

    @nome_base_controle_acesso.setter
    def nome_base_controle_acesso(self, nome_base_controle_acesso):
        """
        Sets the nome_base_controle_acesso of this Base.
        Nome da base de controle acesso

        :param nome_base_controle_acesso: The nome_base_controle_acesso of this Base.
        :type: str
        """
        self._nome_base_controle_acesso = nome_base_controle_acesso

    @property
    def id_emissor(self):
        """
        Gets the id_emissor of this Base.
        C\u00C3\u00B3digo do identificador do emissor

        :return: The id_emissor of this Base.
        :rtype: int
        """
        return self._id_emissor

    @id_emissor.setter
    def id_emissor(self, id_emissor):
        """
        Sets the id_emissor of this Base.
        C\u00C3\u00B3digo do identificador do emissor

        :param id_emissor: The id_emissor of this Base.
        :type: int
        """
        self._id_emissor = id_emissor

    @property
    def servidor_controle_acesso(self):
        """
        Gets the servidor_controle_acesso of this Base.
        Servidor do controle de acesso

        :return: The servidor_controle_acesso of this Base.
        :rtype: str
        """
        return self._servidor_controle_acesso

    @servidor_controle_acesso.setter
    def servidor_controle_acesso(self, servidor_controle_acesso):
        """
        Sets the servidor_controle_acesso of this Base.
        Servidor do controle de acesso

        :param servidor_controle_acesso: The servidor_controle_acesso of this Base.
        :type: str
        """
        self._servidor_controle_acesso = servidor_controle_acesso

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

