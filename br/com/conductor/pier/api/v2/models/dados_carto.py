# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class DadosCarto(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        DadosCarto - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'numero_cartao': 'str',
            'data_validade': 'datetime',
            'cvv2': 'str',
            'nome_plastico': 'str',
            'id_conta': 'int',
            'id_cartao': 'int',
            'status': 'int',
            'status_descricao': 'str',
            'flag_provisorio': 'int'
        }

        self.attribute_map = {
            'numero_cartao': 'numeroCartao',
            'data_validade': 'dataValidade',
            'cvv2': 'cvv2',
            'nome_plastico': 'nomePlastico',
            'id_conta': 'idConta',
            'id_cartao': 'idCartao',
            'status': 'status',
            'status_descricao': 'statusDescricao',
            'flag_provisorio': 'flagProvisorio'
        }

        self._numero_cartao = None
        self._data_validade = None
        self._cvv2 = None
        self._nome_plastico = None
        self._id_conta = None
        self._id_cartao = None
        self._status = None
        self._status_descricao = None
        self._flag_provisorio = None

    @property
    def numero_cartao(self):
        """
        Gets the numero_cartao of this DadosCarto.
        N\u00C3\u00BAmero do cart\u00C3\u00A3o.

        :return: The numero_cartao of this DadosCarto.
        :rtype: str
        """
        return self._numero_cartao

    @numero_cartao.setter
    def numero_cartao(self, numero_cartao):
        """
        Sets the numero_cartao of this DadosCarto.
        N\u00C3\u00BAmero do cart\u00C3\u00A3o.

        :param numero_cartao: The numero_cartao of this DadosCarto.
        :type: str
        """
        self._numero_cartao = numero_cartao

    @property
    def data_validade(self):
        """
        Gets the data_validade of this DadosCarto.
        Data de validade.

        :return: The data_validade of this DadosCarto.
        :rtype: datetime
        """
        return self._data_validade

    @data_validade.setter
    def data_validade(self, data_validade):
        """
        Sets the data_validade of this DadosCarto.
        Data de validade.

        :param data_validade: The data_validade of this DadosCarto.
        :type: datetime
        """
        self._data_validade = data_validade

    @property
    def cvv2(self):
        """
        Gets the cvv2 of this DadosCarto.
        CVV2 do cart\u00C3\u00A3o.

        :return: The cvv2 of this DadosCarto.
        :rtype: str
        """
        return self._cvv2

    @cvv2.setter
    def cvv2(self, cvv2):
        """
        Sets the cvv2 of this DadosCarto.
        CVV2 do cart\u00C3\u00A3o.

        :param cvv2: The cvv2 of this DadosCarto.
        :type: str
        """
        self._cvv2 = cvv2

    @property
    def nome_plastico(self):
        """
        Gets the nome_plastico of this DadosCarto.
        Nome do portador.

        :return: The nome_plastico of this DadosCarto.
        :rtype: str
        """
        return self._nome_plastico

    @nome_plastico.setter
    def nome_plastico(self, nome_plastico):
        """
        Sets the nome_plastico of this DadosCarto.
        Nome do portador.

        :param nome_plastico: The nome_plastico of this DadosCarto.
        :type: str
        """
        self._nome_plastico = nome_plastico

    @property
    def id_conta(self):
        """
        Gets the id_conta of this DadosCarto.
        Identificador da conta do portador.

        :return: The id_conta of this DadosCarto.
        :rtype: int
        """
        return self._id_conta

    @id_conta.setter
    def id_conta(self, id_conta):
        """
        Sets the id_conta of this DadosCarto.
        Identificador da conta do portador.

        :param id_conta: The id_conta of this DadosCarto.
        :type: int
        """
        self._id_conta = id_conta

    @property
    def id_cartao(self):
        """
        Gets the id_cartao of this DadosCarto.
        Identificador da cart\u00C3\u00A3o do portador.

        :return: The id_cartao of this DadosCarto.
        :rtype: int
        """
        return self._id_cartao

    @id_cartao.setter
    def id_cartao(self, id_cartao):
        """
        Sets the id_cartao of this DadosCarto.
        Identificador da cart\u00C3\u00A3o do portador.

        :param id_cartao: The id_cartao of this DadosCarto.
        :type: int
        """
        self._id_cartao = id_cartao

    @property
    def status(self):
        """
        Gets the status of this DadosCarto.
        Status da conta do portador.

        :return: The status of this DadosCarto.
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this DadosCarto.
        Status da conta do portador.

        :param status: The status of this DadosCarto.
        :type: int
        """
        self._status = status

    @property
    def status_descricao(self):
        """
        Gets the status_descricao of this DadosCarto.
        Descri\u00C3\u00A7\u00C3\u00A3o do status da conta do portador.

        :return: The status_descricao of this DadosCarto.
        :rtype: str
        """
        return self._status_descricao

    @status_descricao.setter
    def status_descricao(self, status_descricao):
        """
        Sets the status_descricao of this DadosCarto.
        Descri\u00C3\u00A7\u00C3\u00A3o do status da conta do portador.

        :param status_descricao: The status_descricao of this DadosCarto.
        :type: str
        """
        self._status_descricao = status_descricao

    @property
    def flag_provisorio(self):
        """
        Gets the flag_provisorio of this DadosCarto.
        Flag de verifica\u00C3\u00A7\u00C3\u00A3o se o cart\u00C3\u00A3o \u00C3\u00A9 provis\u00C3\u00B3rio.

        :return: The flag_provisorio of this DadosCarto.
        :rtype: int
        """
        return self._flag_provisorio

    @flag_provisorio.setter
    def flag_provisorio(self, flag_provisorio):
        """
        Sets the flag_provisorio of this DadosCarto.
        Flag de verifica\u00C3\u00A7\u00C3\u00A3o se o cart\u00C3\u00A3o \u00C3\u00A9 provis\u00C3\u00B3rio.

        :param flag_provisorio: The flag_provisorio of this DadosCarto.
        :type: int
        """
        self._flag_provisorio = flag_provisorio

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

