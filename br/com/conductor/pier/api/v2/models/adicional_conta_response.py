# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class AdicionalContaResponse(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        AdicionalContaResponse - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id_conta': 'int',
            'id_pessoa': 'int',
            'nome': 'str',
            'nome_impresso': 'str',
            'numero_receita_federal': 'str',
            'id_estado_civil': 'int',
            'id_profissao': 'int',
            'id_nacionalidade': 'int',
            'id_parentesco': 'int',
            'email': 'str',
            'data_cadastro_portador': 'str'
        }

        self.attribute_map = {
            'id_conta': 'idConta',
            'id_pessoa': 'idPessoa',
            'nome': 'nome',
            'nome_impresso': 'nomeImpresso',
            'numero_receita_federal': 'numeroReceitaFederal',
            'id_estado_civil': 'idEstadoCivil',
            'id_profissao': 'idProfissao',
            'id_nacionalidade': 'idNacionalidade',
            'id_parentesco': 'idParentesco',
            'email': 'email',
            'data_cadastro_portador': 'dataCadastroPortador'
        }

        self._id_conta = None
        self._id_pessoa = None
        self._nome = None
        self._nome_impresso = None
        self._numero_receita_federal = None
        self._id_estado_civil = None
        self._id_profissao = None
        self._id_nacionalidade = None
        self._id_parentesco = None
        self._email = None
        self._data_cadastro_portador = None

    @property
    def id_conta(self):
        """
        Gets the id_conta of this AdicionalContaResponse.
        {{{adicional_conta_response_id_conta_value}}}

        :return: The id_conta of this AdicionalContaResponse.
        :rtype: int
        """
        return self._id_conta

    @id_conta.setter
    def id_conta(self, id_conta):
        """
        Sets the id_conta of this AdicionalContaResponse.
        {{{adicional_conta_response_id_conta_value}}}

        :param id_conta: The id_conta of this AdicionalContaResponse.
        :type: int
        """
        self._id_conta = id_conta

    @property
    def id_pessoa(self):
        """
        Gets the id_pessoa of this AdicionalContaResponse.
        {{{adicional_conta_response_id_pessoa_value}}}

        :return: The id_pessoa of this AdicionalContaResponse.
        :rtype: int
        """
        return self._id_pessoa

    @id_pessoa.setter
    def id_pessoa(self, id_pessoa):
        """
        Sets the id_pessoa of this AdicionalContaResponse.
        {{{adicional_conta_response_id_pessoa_value}}}

        :param id_pessoa: The id_pessoa of this AdicionalContaResponse.
        :type: int
        """
        self._id_pessoa = id_pessoa

    @property
    def nome(self):
        """
        Gets the nome of this AdicionalContaResponse.
        {{{adicional_conta_response_nome_value}}}

        :return: The nome of this AdicionalContaResponse.
        :rtype: str
        """
        return self._nome

    @nome.setter
    def nome(self, nome):
        """
        Sets the nome of this AdicionalContaResponse.
        {{{adicional_conta_response_nome_value}}}

        :param nome: The nome of this AdicionalContaResponse.
        :type: str
        """
        self._nome = nome

    @property
    def nome_impresso(self):
        """
        Gets the nome_impresso of this AdicionalContaResponse.
        {{{adicional_conta_response_nome_impresso_value}}}

        :return: The nome_impresso of this AdicionalContaResponse.
        :rtype: str
        """
        return self._nome_impresso

    @nome_impresso.setter
    def nome_impresso(self, nome_impresso):
        """
        Sets the nome_impresso of this AdicionalContaResponse.
        {{{adicional_conta_response_nome_impresso_value}}}

        :param nome_impresso: The nome_impresso of this AdicionalContaResponse.
        :type: str
        """
        self._nome_impresso = nome_impresso

    @property
    def numero_receita_federal(self):
        """
        Gets the numero_receita_federal of this AdicionalContaResponse.
        {{{adicional_conta_response_numero_receita_federal_value}}}

        :return: The numero_receita_federal of this AdicionalContaResponse.
        :rtype: str
        """
        return self._numero_receita_federal

    @numero_receita_federal.setter
    def numero_receita_federal(self, numero_receita_federal):
        """
        Sets the numero_receita_federal of this AdicionalContaResponse.
        {{{adicional_conta_response_numero_receita_federal_value}}}

        :param numero_receita_federal: The numero_receita_federal of this AdicionalContaResponse.
        :type: str
        """
        self._numero_receita_federal = numero_receita_federal

    @property
    def id_estado_civil(self):
        """
        Gets the id_estado_civil of this AdicionalContaResponse.
        {{{adicional_conta_response_id_estado_civil_value}}}

        :return: The id_estado_civil of this AdicionalContaResponse.
        :rtype: int
        """
        return self._id_estado_civil

    @id_estado_civil.setter
    def id_estado_civil(self, id_estado_civil):
        """
        Sets the id_estado_civil of this AdicionalContaResponse.
        {{{adicional_conta_response_id_estado_civil_value}}}

        :param id_estado_civil: The id_estado_civil of this AdicionalContaResponse.
        :type: int
        """
        self._id_estado_civil = id_estado_civil

    @property
    def id_profissao(self):
        """
        Gets the id_profissao of this AdicionalContaResponse.
        {{{adicional_conta_response_id_profissao_value}}}

        :return: The id_profissao of this AdicionalContaResponse.
        :rtype: int
        """
        return self._id_profissao

    @id_profissao.setter
    def id_profissao(self, id_profissao):
        """
        Sets the id_profissao of this AdicionalContaResponse.
        {{{adicional_conta_response_id_profissao_value}}}

        :param id_profissao: The id_profissao of this AdicionalContaResponse.
        :type: int
        """
        self._id_profissao = id_profissao

    @property
    def id_nacionalidade(self):
        """
        Gets the id_nacionalidade of this AdicionalContaResponse.
        {{{adicional_conta_response_id_nacionalidade_value}}}

        :return: The id_nacionalidade of this AdicionalContaResponse.
        :rtype: int
        """
        return self._id_nacionalidade

    @id_nacionalidade.setter
    def id_nacionalidade(self, id_nacionalidade):
        """
        Sets the id_nacionalidade of this AdicionalContaResponse.
        {{{adicional_conta_response_id_nacionalidade_value}}}

        :param id_nacionalidade: The id_nacionalidade of this AdicionalContaResponse.
        :type: int
        """
        self._id_nacionalidade = id_nacionalidade

    @property
    def id_parentesco(self):
        """
        Gets the id_parentesco of this AdicionalContaResponse.
        {{{adicional_conta_response_id_parentesco_value}}}

        :return: The id_parentesco of this AdicionalContaResponse.
        :rtype: int
        """
        return self._id_parentesco

    @id_parentesco.setter
    def id_parentesco(self, id_parentesco):
        """
        Sets the id_parentesco of this AdicionalContaResponse.
        {{{adicional_conta_response_id_parentesco_value}}}

        :param id_parentesco: The id_parentesco of this AdicionalContaResponse.
        :type: int
        """
        self._id_parentesco = id_parentesco

    @property
    def email(self):
        """
        Gets the email of this AdicionalContaResponse.
        {{{adicional_conta_response_email_value}}}

        :return: The email of this AdicionalContaResponse.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """
        Sets the email of this AdicionalContaResponse.
        {{{adicional_conta_response_email_value}}}

        :param email: The email of this AdicionalContaResponse.
        :type: str
        """
        self._email = email

    @property
    def data_cadastro_portador(self):
        """
        Gets the data_cadastro_portador of this AdicionalContaResponse.
        {{{adicional_conta_response_data_cadastro_portador_value}}}

        :return: The data_cadastro_portador of this AdicionalContaResponse.
        :rtype: str
        """
        return self._data_cadastro_portador

    @data_cadastro_portador.setter
    def data_cadastro_portador(self, data_cadastro_portador):
        """
        Sets the data_cadastro_portador of this AdicionalContaResponse.
        {{{adicional_conta_response_data_cadastro_portador_value}}}

        :param data_cadastro_portador: The data_cadastro_portador of this AdicionalContaResponse.
        :type: str
        """
        self._data_cadastro_portador = data_cadastro_portador

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

