# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class IntegracaoEmissorResponse(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        IntegracaoEmissorResponse - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'int',
            'id_conta': 'int',
            'id_arquivo': 'int',
            'status': 'str',
            'data_inclusao': 'str',
            'data_alteracao': 'str'
        }

        self.attribute_map = {
            'id': 'id',
            'id_conta': 'idConta',
            'id_arquivo': 'idArquivo',
            'status': 'status',
            'data_inclusao': 'dataInclusao',
            'data_alteracao': 'dataAlteracao'
        }

        self._id = None
        self._id_conta = None
        self._id_arquivo = None
        self._status = None
        self._data_inclusao = None
        self._data_alteracao = None

    @property
    def id(self):
        """
        Gets the id of this IntegracaoEmissorResponse.
        {{{integracao_emissor_response_id_value}}}

        :return: The id of this IntegracaoEmissorResponse.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this IntegracaoEmissorResponse.
        {{{integracao_emissor_response_id_value}}}

        :param id: The id of this IntegracaoEmissorResponse.
        :type: int
        """
        self._id = id

    @property
    def id_conta(self):
        """
        Gets the id_conta of this IntegracaoEmissorResponse.
        {{{integracao_emissor_response_id_conta_value}}}

        :return: The id_conta of this IntegracaoEmissorResponse.
        :rtype: int
        """
        return self._id_conta

    @id_conta.setter
    def id_conta(self, id_conta):
        """
        Sets the id_conta of this IntegracaoEmissorResponse.
        {{{integracao_emissor_response_id_conta_value}}}

        :param id_conta: The id_conta of this IntegracaoEmissorResponse.
        :type: int
        """
        self._id_conta = id_conta

    @property
    def id_arquivo(self):
        """
        Gets the id_arquivo of this IntegracaoEmissorResponse.
        {{{integracao_emissor_response_id_arquivo_value}}}

        :return: The id_arquivo of this IntegracaoEmissorResponse.
        :rtype: int
        """
        return self._id_arquivo

    @id_arquivo.setter
    def id_arquivo(self, id_arquivo):
        """
        Sets the id_arquivo of this IntegracaoEmissorResponse.
        {{{integracao_emissor_response_id_arquivo_value}}}

        :param id_arquivo: The id_arquivo of this IntegracaoEmissorResponse.
        :type: int
        """
        self._id_arquivo = id_arquivo

    @property
    def status(self):
        """
        Gets the status of this IntegracaoEmissorResponse.
        {{{integracao_emissor_response_status_value}}}

        :return: The status of this IntegracaoEmissorResponse.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this IntegracaoEmissorResponse.
        {{{integracao_emissor_response_status_value}}}

        :param status: The status of this IntegracaoEmissorResponse.
        :type: str
        """
        self._status = status

    @property
    def data_inclusao(self):
        """
        Gets the data_inclusao of this IntegracaoEmissorResponse.
        {{{integracao_emissor_response_data_inclusao_value}}}

        :return: The data_inclusao of this IntegracaoEmissorResponse.
        :rtype: str
        """
        return self._data_inclusao

    @data_inclusao.setter
    def data_inclusao(self, data_inclusao):
        """
        Sets the data_inclusao of this IntegracaoEmissorResponse.
        {{{integracao_emissor_response_data_inclusao_value}}}

        :param data_inclusao: The data_inclusao of this IntegracaoEmissorResponse.
        :type: str
        """
        self._data_inclusao = data_inclusao

    @property
    def data_alteracao(self):
        """
        Gets the data_alteracao of this IntegracaoEmissorResponse.
        {{{integracao_emissor_response_data_alteracao_value}}}

        :return: The data_alteracao of this IntegracaoEmissorResponse.
        :rtype: str
        """
        return self._data_alteracao

    @data_alteracao.setter
    def data_alteracao(self, data_alteracao):
        """
        Sets the data_alteracao of this IntegracaoEmissorResponse.
        {{{integracao_emissor_response_data_alteracao_value}}}

        :param data_alteracao: The data_alteracao of this IntegracaoEmissorResponse.
        :type: str
        """
        self._data_alteracao = data_alteracao

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

