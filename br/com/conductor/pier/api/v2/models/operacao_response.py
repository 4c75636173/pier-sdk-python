# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class OperacaoResponse(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        OperacaoResponse - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id_operacao': 'int',
            'codigo_processamento': 'str',
            'codigo_processamento_cancelamento': 'str',
            'nome_operacao': 'str',
            'flag_cobra_juros': 'bool',
            'flag_cobra_tarifa': 'bool',
            'carencia': 'int',
            'flag_permitir_parcelamento': 'bool'
        }

        self.attribute_map = {
            'id_operacao': 'idOperacao',
            'codigo_processamento': 'codigoProcessamento',
            'codigo_processamento_cancelamento': 'codigoProcessamentoCancelamento',
            'nome_operacao': 'nomeOperacao',
            'flag_cobra_juros': 'flagCobraJuros',
            'flag_cobra_tarifa': 'flagCobraTarifa',
            'carencia': 'carencia',
            'flag_permitir_parcelamento': 'flagPermitirParcelamento'
        }

        self._id_operacao = None
        self._codigo_processamento = None
        self._codigo_processamento_cancelamento = None
        self._nome_operacao = None
        self._flag_cobra_juros = None
        self._flag_cobra_tarifa = None
        self._carencia = None
        self._flag_permitir_parcelamento = None

    @property
    def id_operacao(self):
        """
        Gets the id_operacao of this OperacaoResponse.
        C\u00C3\u00B3digo que identifica a opera\u00C3\u00A7\u00C3\u00A3o

        :return: The id_operacao of this OperacaoResponse.
        :rtype: int
        """
        return self._id_operacao

    @id_operacao.setter
    def id_operacao(self, id_operacao):
        """
        Sets the id_operacao of this OperacaoResponse.
        C\u00C3\u00B3digo que identifica a opera\u00C3\u00A7\u00C3\u00A3o

        :param id_operacao: The id_operacao of this OperacaoResponse.
        :type: int
        """
        self._id_operacao = id_operacao

    @property
    def codigo_processamento(self):
        """
        Gets the codigo_processamento of this OperacaoResponse.
        C\u00C3\u00B3digo de processamento usado em transa\u00C3\u00A7\u00C3\u00B5es com o autorizador

        :return: The codigo_processamento of this OperacaoResponse.
        :rtype: str
        """
        return self._codigo_processamento

    @codigo_processamento.setter
    def codigo_processamento(self, codigo_processamento):
        """
        Sets the codigo_processamento of this OperacaoResponse.
        C\u00C3\u00B3digo de processamento usado em transa\u00C3\u00A7\u00C3\u00B5es com o autorizador

        :param codigo_processamento: The codigo_processamento of this OperacaoResponse.
        :type: str
        """
        self._codigo_processamento = codigo_processamento

    @property
    def codigo_processamento_cancelamento(self):
        """
        Gets the codigo_processamento_cancelamento of this OperacaoResponse.
        C\u00C3\u00B3digo de processamento usado para cancelar transa\u00C3\u00A7\u00C3\u00B5es no autorizador

        :return: The codigo_processamento_cancelamento of this OperacaoResponse.
        :rtype: str
        """
        return self._codigo_processamento_cancelamento

    @codigo_processamento_cancelamento.setter
    def codigo_processamento_cancelamento(self, codigo_processamento_cancelamento):
        """
        Sets the codigo_processamento_cancelamento of this OperacaoResponse.
        C\u00C3\u00B3digo de processamento usado para cancelar transa\u00C3\u00A7\u00C3\u00B5es no autorizador

        :param codigo_processamento_cancelamento: The codigo_processamento_cancelamento of this OperacaoResponse.
        :type: str
        """
        self._codigo_processamento_cancelamento = codigo_processamento_cancelamento

    @property
    def nome_operacao(self):
        """
        Gets the nome_operacao of this OperacaoResponse.
        Nome da opera\u00C3\u00A7\u00C3\u00A3o

        :return: The nome_operacao of this OperacaoResponse.
        :rtype: str
        """
        return self._nome_operacao

    @nome_operacao.setter
    def nome_operacao(self, nome_operacao):
        """
        Sets the nome_operacao of this OperacaoResponse.
        Nome da opera\u00C3\u00A7\u00C3\u00A3o

        :param nome_operacao: The nome_operacao of this OperacaoResponse.
        :type: str
        """
        self._nome_operacao = nome_operacao

    @property
    def flag_cobra_juros(self):
        """
        Gets the flag_cobra_juros of this OperacaoResponse.
        Flag indicativa para crobran\u00C3\u00A7a de juros

        :return: The flag_cobra_juros of this OperacaoResponse.
        :rtype: bool
        """
        return self._flag_cobra_juros

    @flag_cobra_juros.setter
    def flag_cobra_juros(self, flag_cobra_juros):
        """
        Sets the flag_cobra_juros of this OperacaoResponse.
        Flag indicativa para crobran\u00C3\u00A7a de juros

        :param flag_cobra_juros: The flag_cobra_juros of this OperacaoResponse.
        :type: bool
        """
        self._flag_cobra_juros = flag_cobra_juros

    @property
    def flag_cobra_tarifa(self):
        """
        Gets the flag_cobra_tarifa of this OperacaoResponse.
        Flag indicativa para crobran\u00C3\u00A7a de tarifas

        :return: The flag_cobra_tarifa of this OperacaoResponse.
        :rtype: bool
        """
        return self._flag_cobra_tarifa

    @flag_cobra_tarifa.setter
    def flag_cobra_tarifa(self, flag_cobra_tarifa):
        """
        Sets the flag_cobra_tarifa of this OperacaoResponse.
        Flag indicativa para crobran\u00C3\u00A7a de tarifas

        :param flag_cobra_tarifa: The flag_cobra_tarifa of this OperacaoResponse.
        :type: bool
        """
        self._flag_cobra_tarifa = flag_cobra_tarifa

    @property
    def carencia(self):
        """
        Gets the carencia of this OperacaoResponse.
        Quantidade de meses para car\u00C3\u00AAncia

        :return: The carencia of this OperacaoResponse.
        :rtype: int
        """
        return self._carencia

    @carencia.setter
    def carencia(self, carencia):
        """
        Sets the carencia of this OperacaoResponse.
        Quantidade de meses para car\u00C3\u00AAncia

        :param carencia: The carencia of this OperacaoResponse.
        :type: int
        """
        self._carencia = carencia

    @property
    def flag_permitir_parcelamento(self):
        """
        Gets the flag_permitir_parcelamento of this OperacaoResponse.
        Permitir transa\u00C3\u00A7\u00C3\u00B5es parceladas

        :return: The flag_permitir_parcelamento of this OperacaoResponse.
        :rtype: bool
        """
        return self._flag_permitir_parcelamento

    @flag_permitir_parcelamento.setter
    def flag_permitir_parcelamento(self, flag_permitir_parcelamento):
        """
        Sets the flag_permitir_parcelamento of this OperacaoResponse.
        Permitir transa\u00C3\u00A7\u00C3\u00B5es parceladas

        :param flag_permitir_parcelamento: The flag_permitir_parcelamento of this OperacaoResponse.
        :type: bool
        """
        self._flag_permitir_parcelamento = flag_permitir_parcelamento

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

