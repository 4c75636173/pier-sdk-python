# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class ParcelamentoTransferenciaResponse(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        ParcelamentoTransferenciaResponse - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'numero_parcela': 'str',
            'valor_primeira_parcela': 'float',
            'valor_demais_parcelas': 'float',
            'taxa_juros': 'float',
            'cet_anual': 'float'
        }

        self.attribute_map = {
            'numero_parcela': 'numeroParcela',
            'valor_primeira_parcela': 'valorPrimeiraParcela',
            'valor_demais_parcelas': 'valorDemaisParcelas',
            'taxa_juros': 'taxaJuros',
            'cet_anual': 'cetAnual'
        }

        self._numero_parcela = None
        self._valor_primeira_parcela = None
        self._valor_demais_parcelas = None
        self._taxa_juros = None
        self._cet_anual = None

    @property
    def numero_parcela(self):
        """
        Gets the numero_parcela of this ParcelamentoTransferenciaResponse.
        N\u00C3\u00BAmero de parcelas dispon\u00C3\u00ADveis.

        :return: The numero_parcela of this ParcelamentoTransferenciaResponse.
        :rtype: str
        """
        return self._numero_parcela

    @numero_parcela.setter
    def numero_parcela(self, numero_parcela):
        """
        Sets the numero_parcela of this ParcelamentoTransferenciaResponse.
        N\u00C3\u00BAmero de parcelas dispon\u00C3\u00ADveis.

        :param numero_parcela: The numero_parcela of this ParcelamentoTransferenciaResponse.
        :type: str
        """
        self._numero_parcela = numero_parcela

    @property
    def valor_primeira_parcela(self):
        """
        Gets the valor_primeira_parcela of this ParcelamentoTransferenciaResponse.
        Valor da primeira parcela.

        :return: The valor_primeira_parcela of this ParcelamentoTransferenciaResponse.
        :rtype: float
        """
        return self._valor_primeira_parcela

    @valor_primeira_parcela.setter
    def valor_primeira_parcela(self, valor_primeira_parcela):
        """
        Sets the valor_primeira_parcela of this ParcelamentoTransferenciaResponse.
        Valor da primeira parcela.

        :param valor_primeira_parcela: The valor_primeira_parcela of this ParcelamentoTransferenciaResponse.
        :type: float
        """
        self._valor_primeira_parcela = valor_primeira_parcela

    @property
    def valor_demais_parcelas(self):
        """
        Gets the valor_demais_parcelas of this ParcelamentoTransferenciaResponse.
        Valor das demais parcelas.

        :return: The valor_demais_parcelas of this ParcelamentoTransferenciaResponse.
        :rtype: float
        """
        return self._valor_demais_parcelas

    @valor_demais_parcelas.setter
    def valor_demais_parcelas(self, valor_demais_parcelas):
        """
        Sets the valor_demais_parcelas of this ParcelamentoTransferenciaResponse.
        Valor das demais parcelas.

        :param valor_demais_parcelas: The valor_demais_parcelas of this ParcelamentoTransferenciaResponse.
        :type: float
        """
        self._valor_demais_parcelas = valor_demais_parcelas

    @property
    def taxa_juros(self):
        """
        Gets the taxa_juros of this ParcelamentoTransferenciaResponse.
        Valor da taxa de juros.

        :return: The taxa_juros of this ParcelamentoTransferenciaResponse.
        :rtype: float
        """
        return self._taxa_juros

    @taxa_juros.setter
    def taxa_juros(self, taxa_juros):
        """
        Sets the taxa_juros of this ParcelamentoTransferenciaResponse.
        Valor da taxa de juros.

        :param taxa_juros: The taxa_juros of this ParcelamentoTransferenciaResponse.
        :type: float
        """
        self._taxa_juros = taxa_juros

    @property
    def cet_anual(self):
        """
        Gets the cet_anual of this ParcelamentoTransferenciaResponse.
        CET anual.

        :return: The cet_anual of this ParcelamentoTransferenciaResponse.
        :rtype: float
        """
        return self._cet_anual

    @cet_anual.setter
    def cet_anual(self, cet_anual):
        """
        Sets the cet_anual of this ParcelamentoTransferenciaResponse.
        CET anual.

        :param cet_anual: The cet_anual of this ParcelamentoTransferenciaResponse.
        :type: float
        """
        self._cet_anual = cet_anual

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

