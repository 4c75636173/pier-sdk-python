# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class AplicacaoMobileUpdateValue(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        AplicacaoMobileUpdateValue - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'token': 'str',
            'cor': 'str',
            'som': 'str',
            'icone': 'str',
            'certificado': 'str',
            'senha': 'str'
        }

        self.attribute_map = {
            'token': 'token',
            'cor': 'cor',
            'som': 'som',
            'icone': 'icone',
            'certificado': 'certificado',
            'senha': 'senha'
        }

        self._token = None
        self._cor = None
        self._som = None
        self._icone = None
        self._certificado = None
        self._senha = None

    @property
    def token(self):
        """
        Gets the token of this AplicacaoMobileUpdateValue.
        {{{aplicacao_mobile_update_token_value}}}

        :return: The token of this AplicacaoMobileUpdateValue.
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """
        Sets the token of this AplicacaoMobileUpdateValue.
        {{{aplicacao_mobile_update_token_value}}}

        :param token: The token of this AplicacaoMobileUpdateValue.
        :type: str
        """
        self._token = token

    @property
    def cor(self):
        """
        Gets the cor of this AplicacaoMobileUpdateValue.
        {{{aplicacao_mobile_update_cor_value}}}

        :return: The cor of this AplicacaoMobileUpdateValue.
        :rtype: str
        """
        return self._cor

    @cor.setter
    def cor(self, cor):
        """
        Sets the cor of this AplicacaoMobileUpdateValue.
        {{{aplicacao_mobile_update_cor_value}}}

        :param cor: The cor of this AplicacaoMobileUpdateValue.
        :type: str
        """
        self._cor = cor

    @property
    def som(self):
        """
        Gets the som of this AplicacaoMobileUpdateValue.
        {{{aplicacao_mobile_update_som_value}}}

        :return: The som of this AplicacaoMobileUpdateValue.
        :rtype: str
        """
        return self._som

    @som.setter
    def som(self, som):
        """
        Sets the som of this AplicacaoMobileUpdateValue.
        {{{aplicacao_mobile_update_som_value}}}

        :param som: The som of this AplicacaoMobileUpdateValue.
        :type: str
        """
        self._som = som

    @property
    def icone(self):
        """
        Gets the icone of this AplicacaoMobileUpdateValue.
        {{{aplicacao_mobile_update_icone_value}}}

        :return: The icone of this AplicacaoMobileUpdateValue.
        :rtype: str
        """
        return self._icone

    @icone.setter
    def icone(self, icone):
        """
        Sets the icone of this AplicacaoMobileUpdateValue.
        {{{aplicacao_mobile_update_icone_value}}}

        :param icone: The icone of this AplicacaoMobileUpdateValue.
        :type: str
        """
        self._icone = icone

    @property
    def certificado(self):
        """
        Gets the certificado of this AplicacaoMobileUpdateValue.
        {{{aplicacao_mobile_update_certificado_value}}}

        :return: The certificado of this AplicacaoMobileUpdateValue.
        :rtype: str
        """
        return self._certificado

    @certificado.setter
    def certificado(self, certificado):
        """
        Sets the certificado of this AplicacaoMobileUpdateValue.
        {{{aplicacao_mobile_update_certificado_value}}}

        :param certificado: The certificado of this AplicacaoMobileUpdateValue.
        :type: str
        """
        self._certificado = certificado

    @property
    def senha(self):
        """
        Gets the senha of this AplicacaoMobileUpdateValue.
        {{{aplicacao_mobile_update_senha_value}}}

        :return: The senha of this AplicacaoMobileUpdateValue.
        :rtype: str
        """
        return self._senha

    @senha.setter
    def senha(self, senha):
        """
        Sets the senha of this AplicacaoMobileUpdateValue.
        {{{aplicacao_mobile_update_senha_value}}}

        :param senha: The senha of this AplicacaoMobileUpdateValue.
        :type: str
        """
        self._senha = senha

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

