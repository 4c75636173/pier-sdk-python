# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class TemplateNotificacaoResponse(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        TemplateNotificacaoResponse - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'int',
            'id_configuracao_email': 'int',
            'tipo_layout': 'str',
            'tipo_notificacao': 'str',
            'assunto': 'str',
            'conteudo': 'str',
            'data_inclusao': 'str',
            'data_alteracao': 'str'
        }

        self.attribute_map = {
            'id': 'id',
            'id_configuracao_email': 'idConfiguracaoEmail',
            'tipo_layout': 'tipoLayout',
            'tipo_notificacao': 'tipoNotificacao',
            'assunto': 'assunto',
            'conteudo': 'conteudo',
            'data_inclusao': 'dataInclusao',
            'data_alteracao': 'dataAlteracao'
        }

        self._id = None
        self._id_configuracao_email = None
        self._tipo_layout = None
        self._tipo_notificacao = None
        self._assunto = None
        self._conteudo = None
        self._data_inclusao = None
        self._data_alteracao = None

    @property
    def id(self):
        """
        Gets the id of this TemplateNotificacaoResponse.
        C\u00C3\u00B3digo Identificador.

        :return: The id of this TemplateNotificacaoResponse.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this TemplateNotificacaoResponse.
        C\u00C3\u00B3digo Identificador.

        :param id: The id of this TemplateNotificacaoResponse.
        :type: int
        """
        self._id = id

    @property
    def id_configuracao_email(self):
        """
        Gets the id_configuracao_email of this TemplateNotificacaoResponse.
        C\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o da configra\u00C3\u00A7\u00C3\u00A3o de e-mail.

        :return: The id_configuracao_email of this TemplateNotificacaoResponse.
        :rtype: int
        """
        return self._id_configuracao_email

    @id_configuracao_email.setter
    def id_configuracao_email(self, id_configuracao_email):
        """
        Sets the id_configuracao_email of this TemplateNotificacaoResponse.
        C\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o da configra\u00C3\u00A7\u00C3\u00A3o de e-mail.

        :param id_configuracao_email: The id_configuracao_email of this TemplateNotificacaoResponse.
        :type: int
        """
        self._id_configuracao_email = id_configuracao_email

    @property
    def tipo_layout(self):
        """
        Gets the tipo_layout of this TemplateNotificacaoResponse.
        Tipo do layout de e-mail.

        :return: The tipo_layout of this TemplateNotificacaoResponse.
        :rtype: str
        """
        return self._tipo_layout

    @tipo_layout.setter
    def tipo_layout(self, tipo_layout):
        """
        Sets the tipo_layout of this TemplateNotificacaoResponse.
        Tipo do layout de e-mail.

        :param tipo_layout: The tipo_layout of this TemplateNotificacaoResponse.
        :type: str
        """
        allowed_values = ["RECUPERAR_SENHA", "FATURA_POR_EMAIL", "VALIDAR_DISPOSITIVO"]
        if tipo_layout not in allowed_values:
            raise ValueError(
                "Invalid value for `tipo_layout`, must be one of {0}"
                .format(allowed_values)
            )
        self._tipo_layout = tipo_layout

    @property
    def tipo_notificacao(self):
        """
        Gets the tipo_notificacao of this TemplateNotificacaoResponse.
        Tipo da notifica\u00C3\u00A7\u00C3\u00A3o.

        :return: The tipo_notificacao of this TemplateNotificacaoResponse.
        :rtype: str
        """
        return self._tipo_notificacao

    @tipo_notificacao.setter
    def tipo_notificacao(self, tipo_notificacao):
        """
        Sets the tipo_notificacao of this TemplateNotificacaoResponse.
        Tipo da notifica\u00C3\u00A7\u00C3\u00A3o.

        :param tipo_notificacao: The tipo_notificacao of this TemplateNotificacaoResponse.
        :type: str
        """
        allowed_values = ["SMS", "PUSH_APNS", "PUSH_FCM", "PUSH_GCM", "EMAIL"]
        if tipo_notificacao not in allowed_values:
            raise ValueError(
                "Invalid value for `tipo_notificacao`, must be one of {0}"
                .format(allowed_values)
            )
        self._tipo_notificacao = tipo_notificacao

    @property
    def assunto(self):
        """
        Gets the assunto of this TemplateNotificacaoResponse.
        Assunto do e-mail.

        :return: The assunto of this TemplateNotificacaoResponse.
        :rtype: str
        """
        return self._assunto

    @assunto.setter
    def assunto(self, assunto):
        """
        Sets the assunto of this TemplateNotificacaoResponse.
        Assunto do e-mail.

        :param assunto: The assunto of this TemplateNotificacaoResponse.
        :type: str
        """
        self._assunto = assunto

    @property
    def conteudo(self):
        """
        Gets the conteudo of this TemplateNotificacaoResponse.
        Conteudo do e-mail.

        :return: The conteudo of this TemplateNotificacaoResponse.
        :rtype: str
        """
        return self._conteudo

    @conteudo.setter
    def conteudo(self, conteudo):
        """
        Sets the conteudo of this TemplateNotificacaoResponse.
        Conteudo do e-mail.

        :param conteudo: The conteudo of this TemplateNotificacaoResponse.
        :type: str
        """
        self._conteudo = conteudo

    @property
    def data_inclusao(self):
        """
        Gets the data_inclusao of this TemplateNotificacaoResponse.
        Data da inclus\u00C3\u00A3o.

        :return: The data_inclusao of this TemplateNotificacaoResponse.
        :rtype: str
        """
        return self._data_inclusao

    @data_inclusao.setter
    def data_inclusao(self, data_inclusao):
        """
        Sets the data_inclusao of this TemplateNotificacaoResponse.
        Data da inclus\u00C3\u00A3o.

        :param data_inclusao: The data_inclusao of this TemplateNotificacaoResponse.
        :type: str
        """
        self._data_inclusao = data_inclusao

    @property
    def data_alteracao(self):
        """
        Gets the data_alteracao of this TemplateNotificacaoResponse.
        Data altera\u00C3\u00A7\u00C3\u00A3o.

        :return: The data_alteracao of this TemplateNotificacaoResponse.
        :rtype: str
        """
        return self._data_alteracao

    @data_alteracao.setter
    def data_alteracao(self, data_alteracao):
        """
        Sets the data_alteracao of this TemplateNotificacaoResponse.
        Data altera\u00C3\u00A7\u00C3\u00A3o.

        :param data_alteracao: The data_alteracao of this TemplateNotificacaoResponse.
        :type: str
        """
        self._data_alteracao = data_alteracao

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

