# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class PaisResponse(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        PaisResponse - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'int',
            'codigo': 'str',
            'sigla': 'str',
            'descricao': 'str',
            'continente': 'str'
        }

        self.attribute_map = {
            'id': 'id',
            'codigo': 'codigo',
            'sigla': 'sigla',
            'descricao': 'descricao',
            'continente': 'continente'
        }

        self._id = None
        self._codigo = None
        self._sigla = None
        self._descricao = None
        self._continente = None

    @property
    def id(self):
        """
        Gets the id of this PaisResponse.
        C\u00C3\u00B3digo identificador \u00C3\u00BAnico do pa\u00C3\u00ADs na base

        :return: The id of this PaisResponse.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this PaisResponse.
        C\u00C3\u00B3digo identificador \u00C3\u00BAnico do pa\u00C3\u00ADs na base

        :param id: The id of this PaisResponse.
        :type: int
        """
        self._id = id

    @property
    def codigo(self):
        """
        Gets the codigo of this PaisResponse.
        C\u00C3\u00B3digo identificador do pa\u00C3\u00ADs

        :return: The codigo of this PaisResponse.
        :rtype: str
        """
        return self._codigo

    @codigo.setter
    def codigo(self, codigo):
        """
        Sets the codigo of this PaisResponse.
        C\u00C3\u00B3digo identificador do pa\u00C3\u00ADs

        :param codigo: The codigo of this PaisResponse.
        :type: str
        """
        self._codigo = codigo

    @property
    def sigla(self):
        """
        Gets the sigla of this PaisResponse.
        Sigla do pa\u00C3\u00ADs

        :return: The sigla of this PaisResponse.
        :rtype: str
        """
        return self._sigla

    @sigla.setter
    def sigla(self, sigla):
        """
        Sets the sigla of this PaisResponse.
        Sigla do pa\u00C3\u00ADs

        :param sigla: The sigla of this PaisResponse.
        :type: str
        """
        self._sigla = sigla

    @property
    def descricao(self):
        """
        Gets the descricao of this PaisResponse.
        Nome do pa\u00C3\u00ADs

        :return: The descricao of this PaisResponse.
        :rtype: str
        """
        return self._descricao

    @descricao.setter
    def descricao(self, descricao):
        """
        Sets the descricao of this PaisResponse.
        Nome do pa\u00C3\u00ADs

        :param descricao: The descricao of this PaisResponse.
        :type: str
        """
        self._descricao = descricao

    @property
    def continente(self):
        """
        Gets the continente of this PaisResponse.
        Continente no qual o pa\u00C3\u00ADs faz parte

        :return: The continente of this PaisResponse.
        :rtype: str
        """
        return self._continente

    @continente.setter
    def continente(self, continente):
        """
        Sets the continente of this PaisResponse.
        Continente no qual o pa\u00C3\u00ADs faz parte

        :param continente: The continente of this PaisResponse.
        :type: str
        """
        allowed_values = ["AFRICA", "AMERICA_LATINA", "AMERICA_NORTE", "ASIA", "EUROPA", "OCEANIA"]
        if continente not in allowed_values:
            raise ValueError(
                "Invalid value for `continente`, must be one of {0}"
                .format(allowed_values)
            )
        self._continente = continente

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

