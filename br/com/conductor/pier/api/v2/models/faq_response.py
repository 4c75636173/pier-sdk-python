# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class FaqResponse(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        FaqResponse - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'int',
            'pergunta': 'str',
            'resposta': 'str',
            'relevancia': 'int',
            'plataforma': 'str',
            'categoria': 'str',
            'status': 'str'
        }

        self.attribute_map = {
            'id': 'id',
            'pergunta': 'pergunta',
            'resposta': 'resposta',
            'relevancia': 'relevancia',
            'plataforma': 'plataforma',
            'categoria': 'categoria',
            'status': 'status'
        }

        self._id = None
        self._pergunta = None
        self._resposta = None
        self._relevancia = None
        self._plataforma = None
        self._categoria = None
        self._status = None

    @property
    def id(self):
        """
        Gets the id of this FaqResponse.
        {{{faq_response_id_value}}}

        :return: The id of this FaqResponse.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this FaqResponse.
        {{{faq_response_id_value}}}

        :param id: The id of this FaqResponse.
        :type: int
        """
        self._id = id

    @property
    def pergunta(self):
        """
        Gets the pergunta of this FaqResponse.
        {{{faq_response_pergunta_value}}}

        :return: The pergunta of this FaqResponse.
        :rtype: str
        """
        return self._pergunta

    @pergunta.setter
    def pergunta(self, pergunta):
        """
        Sets the pergunta of this FaqResponse.
        {{{faq_response_pergunta_value}}}

        :param pergunta: The pergunta of this FaqResponse.
        :type: str
        """
        self._pergunta = pergunta

    @property
    def resposta(self):
        """
        Gets the resposta of this FaqResponse.
        {{{faq_response_resposta_value}}}

        :return: The resposta of this FaqResponse.
        :rtype: str
        """
        return self._resposta

    @resposta.setter
    def resposta(self, resposta):
        """
        Sets the resposta of this FaqResponse.
        {{{faq_response_resposta_value}}}

        :param resposta: The resposta of this FaqResponse.
        :type: str
        """
        self._resposta = resposta

    @property
    def relevancia(self):
        """
        Gets the relevancia of this FaqResponse.
        {{{faq_response_relevancia_value}}}

        :return: The relevancia of this FaqResponse.
        :rtype: int
        """
        return self._relevancia

    @relevancia.setter
    def relevancia(self, relevancia):
        """
        Sets the relevancia of this FaqResponse.
        {{{faq_response_relevancia_value}}}

        :param relevancia: The relevancia of this FaqResponse.
        :type: int
        """
        self._relevancia = relevancia

    @property
    def plataforma(self):
        """
        Gets the plataforma of this FaqResponse.
        {{{faq_response_plataforma_value}}}

        :return: The plataforma of this FaqResponse.
        :rtype: str
        """
        return self._plataforma

    @plataforma.setter
    def plataforma(self, plataforma):
        """
        Sets the plataforma of this FaqResponse.
        {{{faq_response_plataforma_value}}}

        :param plataforma: The plataforma of this FaqResponse.
        :type: str
        """
        self._plataforma = plataforma

    @property
    def categoria(self):
        """
        Gets the categoria of this FaqResponse.
        {{{faq_response_categoria_value}}}

        :return: The categoria of this FaqResponse.
        :rtype: str
        """
        return self._categoria

    @categoria.setter
    def categoria(self, categoria):
        """
        Sets the categoria of this FaqResponse.
        {{{faq_response_categoria_value}}}

        :param categoria: The categoria of this FaqResponse.
        :type: str
        """
        self._categoria = categoria

    @property
    def status(self):
        """
        Gets the status of this FaqResponse.
        {{{faq_response_status_value}}}

        :return: The status of this FaqResponse.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this FaqResponse.
        {{{faq_response_status_value}}}

        :param status: The status of this FaqResponse.
        :type: str
        """
        allowed_values = ["INATIVO", "ATIVO"]
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status`, must be one of {0}"
                .format(allowed_values)
            )
        self._status = status

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

