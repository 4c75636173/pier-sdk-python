# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class PlanoParcelamentoTransferenciaCreditoContaBancariaRequest(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        PlanoParcelamentoTransferenciaCreditoContaBancariaRequest - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id_cartao': 'int',
            'valor_transacao': 'float',
            'numero_meses_carencia': 'int'
        }

        self.attribute_map = {
            'id_cartao': 'idCartao',
            'valor_transacao': 'valorTransacao',
            'numero_meses_carencia': 'numeroMesesCarencia'
        }

        self._id_cartao = None
        self._valor_transacao = None
        self._numero_meses_carencia = None

    @property
    def id_cartao(self):
        """
        Gets the id_cartao of this PlanoParcelamentoTransferenciaCreditoContaBancariaRequest.
        C\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o do cart\u00C3\u00A3o.

        :return: The id_cartao of this PlanoParcelamentoTransferenciaCreditoContaBancariaRequest.
        :rtype: int
        """
        return self._id_cartao

    @id_cartao.setter
    def id_cartao(self, id_cartao):
        """
        Sets the id_cartao of this PlanoParcelamentoTransferenciaCreditoContaBancariaRequest.
        C\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o do cart\u00C3\u00A3o.

        :param id_cartao: The id_cartao of this PlanoParcelamentoTransferenciaCreditoContaBancariaRequest.
        :type: int
        """
        self._id_cartao = id_cartao

    @property
    def valor_transacao(self):
        """
        Gets the valor_transacao of this PlanoParcelamentoTransferenciaCreditoContaBancariaRequest.
        Valor da transa\u00C3\u00A7\u00C3\u00A3o com duas casas decimais para os centavos.

        :return: The valor_transacao of this PlanoParcelamentoTransferenciaCreditoContaBancariaRequest.
        :rtype: float
        """
        return self._valor_transacao

    @valor_transacao.setter
    def valor_transacao(self, valor_transacao):
        """
        Sets the valor_transacao of this PlanoParcelamentoTransferenciaCreditoContaBancariaRequest.
        Valor da transa\u00C3\u00A7\u00C3\u00A3o com duas casas decimais para os centavos.

        :param valor_transacao: The valor_transacao of this PlanoParcelamentoTransferenciaCreditoContaBancariaRequest.
        :type: float
        """
        self._valor_transacao = valor_transacao

    @property
    def numero_meses_carencia(self):
        """
        Gets the numero_meses_carencia of this PlanoParcelamentoTransferenciaCreditoContaBancariaRequest.
        Representa o N\u00C3\u00BAmero de Meses concedido como car\u00C3\u00AAncia.

        :return: The numero_meses_carencia of this PlanoParcelamentoTransferenciaCreditoContaBancariaRequest.
        :rtype: int
        """
        return self._numero_meses_carencia

    @numero_meses_carencia.setter
    def numero_meses_carencia(self, numero_meses_carencia):
        """
        Sets the numero_meses_carencia of this PlanoParcelamentoTransferenciaCreditoContaBancariaRequest.
        Representa o N\u00C3\u00BAmero de Meses concedido como car\u00C3\u00AAncia.

        :param numero_meses_carencia: The numero_meses_carencia of this PlanoParcelamentoTransferenciaCreditoContaBancariaRequest.
        :type: int
        """
        self._numero_meses_carencia = numero_meses_carencia

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

