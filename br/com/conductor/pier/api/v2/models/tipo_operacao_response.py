# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class TipoOperacaoResponse(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        TipoOperacaoResponse - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'int',
            'tipo_operacao': 'str',
            'nome': 'str',
            'descricao': 'str',
            'excedente_permitido': 'float',
            'tipo_excedente_permitido': 'str',
            'valor_minimo': 'float',
            'valor_maximo': 'float',
            'valor_tac': 'float',
            'flag_tira_tac': 'int',
            'id_produto': 'int',
            'id_estabelecimento': 'int',
            'tarifa': 'float',
            'remuneracao_emissor': 'float',
            'plano_maximo': 'int',
            'plano_minimo': 'int'
        }

        self.attribute_map = {
            'id': 'id',
            'tipo_operacao': 'tipoOperacao',
            'nome': 'nome',
            'descricao': 'descricao',
            'excedente_permitido': 'excedentePermitido',
            'tipo_excedente_permitido': 'tipoExcedentePermitido',
            'valor_minimo': 'valorMinimo',
            'valor_maximo': 'valorMaximo',
            'valor_tac': 'valorTAC',
            'flag_tira_tac': 'flagTiraTac',
            'id_produto': 'idProduto',
            'id_estabelecimento': 'idEstabelecimento',
            'tarifa': 'tarifa',
            'remuneracao_emissor': 'remuneracaoEmissor',
            'plano_maximo': 'planoMaximo',
            'plano_minimo': 'planoMinimo'
        }

        self._id = None
        self._tipo_operacao = None
        self._nome = None
        self._descricao = None
        self._excedente_permitido = None
        self._tipo_excedente_permitido = None
        self._valor_minimo = None
        self._valor_maximo = None
        self._valor_tac = None
        self._flag_tira_tac = None
        self._id_produto = None
        self._id_estabelecimento = None
        self._tarifa = None
        self._remuneracao_emissor = None
        self._plano_maximo = None
        self._plano_minimo = None

    @property
    def id(self):
        """
        Gets the id of this TipoOperacaoResponse.
        {{{tipo_operacao_response_id_value}}}

        :return: The id of this TipoOperacaoResponse.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this TipoOperacaoResponse.
        {{{tipo_operacao_response_id_value}}}

        :param id: The id of this TipoOperacaoResponse.
        :type: int
        """
        self._id = id

    @property
    def tipo_operacao(self):
        """
        Gets the tipo_operacao of this TipoOperacaoResponse.
        {{{tipo_operacao_response_tipo_operacao_value}}}

        :return: The tipo_operacao of this TipoOperacaoResponse.
        :rtype: str
        """
        return self._tipo_operacao

    @tipo_operacao.setter
    def tipo_operacao(self, tipo_operacao):
        """
        Sets the tipo_operacao of this TipoOperacaoResponse.
        {{{tipo_operacao_response_tipo_operacao_value}}}

        :param tipo_operacao: The tipo_operacao of this TipoOperacaoResponse.
        :type: str
        """
        self._tipo_operacao = tipo_operacao

    @property
    def nome(self):
        """
        Gets the nome of this TipoOperacaoResponse.
        {{{tipo_operacao_response_nome_value}}}

        :return: The nome of this TipoOperacaoResponse.
        :rtype: str
        """
        return self._nome

    @nome.setter
    def nome(self, nome):
        """
        Sets the nome of this TipoOperacaoResponse.
        {{{tipo_operacao_response_nome_value}}}

        :param nome: The nome of this TipoOperacaoResponse.
        :type: str
        """
        self._nome = nome

    @property
    def descricao(self):
        """
        Gets the descricao of this TipoOperacaoResponse.
        {{{tipo_operacao_response_descricao_value}}}

        :return: The descricao of this TipoOperacaoResponse.
        :rtype: str
        """
        return self._descricao

    @descricao.setter
    def descricao(self, descricao):
        """
        Sets the descricao of this TipoOperacaoResponse.
        {{{tipo_operacao_response_descricao_value}}}

        :param descricao: The descricao of this TipoOperacaoResponse.
        :type: str
        """
        self._descricao = descricao

    @property
    def excedente_permitido(self):
        """
        Gets the excedente_permitido of this TipoOperacaoResponse.
        {{{tipo_operacao_response_excedente_permitido_value}}}

        :return: The excedente_permitido of this TipoOperacaoResponse.
        :rtype: float
        """
        return self._excedente_permitido

    @excedente_permitido.setter
    def excedente_permitido(self, excedente_permitido):
        """
        Sets the excedente_permitido of this TipoOperacaoResponse.
        {{{tipo_operacao_response_excedente_permitido_value}}}

        :param excedente_permitido: The excedente_permitido of this TipoOperacaoResponse.
        :type: float
        """
        self._excedente_permitido = excedente_permitido

    @property
    def tipo_excedente_permitido(self):
        """
        Gets the tipo_excedente_permitido of this TipoOperacaoResponse.
        {{{tipo_operacao_response_tipo_excedente_permitido_value}}}

        :return: The tipo_excedente_permitido of this TipoOperacaoResponse.
        :rtype: str
        """
        return self._tipo_excedente_permitido

    @tipo_excedente_permitido.setter
    def tipo_excedente_permitido(self, tipo_excedente_permitido):
        """
        Sets the tipo_excedente_permitido of this TipoOperacaoResponse.
        {{{tipo_operacao_response_tipo_excedente_permitido_value}}}

        :param tipo_excedente_permitido: The tipo_excedente_permitido of this TipoOperacaoResponse.
        :type: str
        """
        self._tipo_excedente_permitido = tipo_excedente_permitido

    @property
    def valor_minimo(self):
        """
        Gets the valor_minimo of this TipoOperacaoResponse.
        {{{tipo_operacao_response_valor_minimo_value}}}

        :return: The valor_minimo of this TipoOperacaoResponse.
        :rtype: float
        """
        return self._valor_minimo

    @valor_minimo.setter
    def valor_minimo(self, valor_minimo):
        """
        Sets the valor_minimo of this TipoOperacaoResponse.
        {{{tipo_operacao_response_valor_minimo_value}}}

        :param valor_minimo: The valor_minimo of this TipoOperacaoResponse.
        :type: float
        """
        self._valor_minimo = valor_minimo

    @property
    def valor_maximo(self):
        """
        Gets the valor_maximo of this TipoOperacaoResponse.
        {{{tipo_operacao_response_valor_maximo_value}}}

        :return: The valor_maximo of this TipoOperacaoResponse.
        :rtype: float
        """
        return self._valor_maximo

    @valor_maximo.setter
    def valor_maximo(self, valor_maximo):
        """
        Sets the valor_maximo of this TipoOperacaoResponse.
        {{{tipo_operacao_response_valor_maximo_value}}}

        :param valor_maximo: The valor_maximo of this TipoOperacaoResponse.
        :type: float
        """
        self._valor_maximo = valor_maximo

    @property
    def valor_tac(self):
        """
        Gets the valor_tac of this TipoOperacaoResponse.
        {{{tipo_operacao_response_valor_t_a_c_value}}}

        :return: The valor_tac of this TipoOperacaoResponse.
        :rtype: float
        """
        return self._valor_tac

    @valor_tac.setter
    def valor_tac(self, valor_tac):
        """
        Sets the valor_tac of this TipoOperacaoResponse.
        {{{tipo_operacao_response_valor_t_a_c_value}}}

        :param valor_tac: The valor_tac of this TipoOperacaoResponse.
        :type: float
        """
        self._valor_tac = valor_tac

    @property
    def flag_tira_tac(self):
        """
        Gets the flag_tira_tac of this TipoOperacaoResponse.
        {{{tipo_operacao_response_flag_tira_tac_value}}}

        :return: The flag_tira_tac of this TipoOperacaoResponse.
        :rtype: int
        """
        return self._flag_tira_tac

    @flag_tira_tac.setter
    def flag_tira_tac(self, flag_tira_tac):
        """
        Sets the flag_tira_tac of this TipoOperacaoResponse.
        {{{tipo_operacao_response_flag_tira_tac_value}}}

        :param flag_tira_tac: The flag_tira_tac of this TipoOperacaoResponse.
        :type: int
        """
        self._flag_tira_tac = flag_tira_tac

    @property
    def id_produto(self):
        """
        Gets the id_produto of this TipoOperacaoResponse.
        {{{tipo_operacao_response_id_produto_value}}}

        :return: The id_produto of this TipoOperacaoResponse.
        :rtype: int
        """
        return self._id_produto

    @id_produto.setter
    def id_produto(self, id_produto):
        """
        Sets the id_produto of this TipoOperacaoResponse.
        {{{tipo_operacao_response_id_produto_value}}}

        :param id_produto: The id_produto of this TipoOperacaoResponse.
        :type: int
        """
        self._id_produto = id_produto

    @property
    def id_estabelecimento(self):
        """
        Gets the id_estabelecimento of this TipoOperacaoResponse.
        {{{tipo_operacao_response_id_estabelecimento_value}}}

        :return: The id_estabelecimento of this TipoOperacaoResponse.
        :rtype: int
        """
        return self._id_estabelecimento

    @id_estabelecimento.setter
    def id_estabelecimento(self, id_estabelecimento):
        """
        Sets the id_estabelecimento of this TipoOperacaoResponse.
        {{{tipo_operacao_response_id_estabelecimento_value}}}

        :param id_estabelecimento: The id_estabelecimento of this TipoOperacaoResponse.
        :type: int
        """
        self._id_estabelecimento = id_estabelecimento

    @property
    def tarifa(self):
        """
        Gets the tarifa of this TipoOperacaoResponse.
        {{{tipo_operacao_response_tarifa_value}}}

        :return: The tarifa of this TipoOperacaoResponse.
        :rtype: float
        """
        return self._tarifa

    @tarifa.setter
    def tarifa(self, tarifa):
        """
        Sets the tarifa of this TipoOperacaoResponse.
        {{{tipo_operacao_response_tarifa_value}}}

        :param tarifa: The tarifa of this TipoOperacaoResponse.
        :type: float
        """
        self._tarifa = tarifa

    @property
    def remuneracao_emissor(self):
        """
        Gets the remuneracao_emissor of this TipoOperacaoResponse.
        {{{tipo_operacao_response_remuneracao_emissor_value}}}

        :return: The remuneracao_emissor of this TipoOperacaoResponse.
        :rtype: float
        """
        return self._remuneracao_emissor

    @remuneracao_emissor.setter
    def remuneracao_emissor(self, remuneracao_emissor):
        """
        Sets the remuneracao_emissor of this TipoOperacaoResponse.
        {{{tipo_operacao_response_remuneracao_emissor_value}}}

        :param remuneracao_emissor: The remuneracao_emissor of this TipoOperacaoResponse.
        :type: float
        """
        self._remuneracao_emissor = remuneracao_emissor

    @property
    def plano_maximo(self):
        """
        Gets the plano_maximo of this TipoOperacaoResponse.
        {{{tipo_operacao_response_plano_maximo_value}}}

        :return: The plano_maximo of this TipoOperacaoResponse.
        :rtype: int
        """
        return self._plano_maximo

    @plano_maximo.setter
    def plano_maximo(self, plano_maximo):
        """
        Sets the plano_maximo of this TipoOperacaoResponse.
        {{{tipo_operacao_response_plano_maximo_value}}}

        :param plano_maximo: The plano_maximo of this TipoOperacaoResponse.
        :type: int
        """
        self._plano_maximo = plano_maximo

    @property
    def plano_minimo(self):
        """
        Gets the plano_minimo of this TipoOperacaoResponse.
        {{{tipo_operacao_response_plano_minimo_value}}}

        :return: The plano_minimo of this TipoOperacaoResponse.
        :rtype: int
        """
        return self._plano_minimo

    @plano_minimo.setter
    def plano_minimo(self, plano_minimo):
        """
        Sets the plano_minimo of this TipoOperacaoResponse.
        {{{tipo_operacao_response_plano_minimo_value}}}

        :param plano_minimo: The plano_minimo of this TipoOperacaoResponse.
        :type: int
        """
        self._plano_minimo = plano_minimo

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

