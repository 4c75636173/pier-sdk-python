# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class CartaoPayPersist(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        CartaoPayPersist - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'numero_cartao': 'str',
            'data_validade': 'str',
            'cvv': 'str',
            'numero_receita_federal': 'str',
            'nome_impresso': 'str',
            'chave_publica_device': 'str'
        }

        self.attribute_map = {
            'numero_cartao': 'numeroCartao',
            'data_validade': 'dataValidade',
            'cvv': 'cvv',
            'numero_receita_federal': 'numeroReceitaFederal',
            'nome_impresso': 'nomeImpresso',
            'chave_publica_device': 'chavePublicaDevice'
        }

        self._numero_cartao = None
        self._data_validade = None
        self._cvv = None
        self._numero_receita_federal = None
        self._nome_impresso = None
        self._chave_publica_device = None

    @property
    def numero_cartao(self):
        """
        Gets the numero_cartao of this CartaoPayPersist.
        N\u00C3\u00BAmero do cart\u00C3\u00A3o criptografado

        :return: The numero_cartao of this CartaoPayPersist.
        :rtype: str
        """
        return self._numero_cartao

    @numero_cartao.setter
    def numero_cartao(self, numero_cartao):
        """
        Sets the numero_cartao of this CartaoPayPersist.
        N\u00C3\u00BAmero do cart\u00C3\u00A3o criptografado

        :param numero_cartao: The numero_cartao of this CartaoPayPersist.
        :type: str
        """
        self._numero_cartao = numero_cartao

    @property
    def data_validade(self):
        """
        Gets the data_validade of this CartaoPayPersist.
        Data de validade do cart\u00C3\u00A3o

        :return: The data_validade of this CartaoPayPersist.
        :rtype: str
        """
        return self._data_validade

    @data_validade.setter
    def data_validade(self, data_validade):
        """
        Sets the data_validade of this CartaoPayPersist.
        Data de validade do cart\u00C3\u00A3o

        :param data_validade: The data_validade of this CartaoPayPersist.
        :type: str
        """
        self._data_validade = data_validade

    @property
    def cvv(self):
        """
        Gets the cvv of this CartaoPayPersist.
        CVV do cart\u00C3\u00A3o criptografado

        :return: The cvv of this CartaoPayPersist.
        :rtype: str
        """
        return self._cvv

    @cvv.setter
    def cvv(self, cvv):
        """
        Sets the cvv of this CartaoPayPersist.
        CVV do cart\u00C3\u00A3o criptografado

        :param cvv: The cvv of this CartaoPayPersist.
        :type: str
        """
        self._cvv = cvv

    @property
    def numero_receita_federal(self):
        """
        Gets the numero_receita_federal of this CartaoPayPersist.
        CPF do portador do cart\u00C3\u00A3o criptografado

        :return: The numero_receita_federal of this CartaoPayPersist.
        :rtype: str
        """
        return self._numero_receita_federal

    @numero_receita_federal.setter
    def numero_receita_federal(self, numero_receita_federal):
        """
        Sets the numero_receita_federal of this CartaoPayPersist.
        CPF do portador do cart\u00C3\u00A3o criptografado

        :param numero_receita_federal: The numero_receita_federal of this CartaoPayPersist.
        :type: str
        """
        self._numero_receita_federal = numero_receita_federal

    @property
    def nome_impresso(self):
        """
        Gets the nome_impresso of this CartaoPayPersist.
        Nome impresso no cart\u00C3\u00A3o criptografado

        :return: The nome_impresso of this CartaoPayPersist.
        :rtype: str
        """
        return self._nome_impresso

    @nome_impresso.setter
    def nome_impresso(self, nome_impresso):
        """
        Sets the nome_impresso of this CartaoPayPersist.
        Nome impresso no cart\u00C3\u00A3o criptografado

        :param nome_impresso: The nome_impresso of this CartaoPayPersist.
        :type: str
        """
        self._nome_impresso = nome_impresso

    @property
    def chave_publica_device(self):
        """
        Gets the chave_publica_device of this CartaoPayPersist.
        Chave p\u00C3\u00BAblica do dispositivo criptografada

        :return: The chave_publica_device of this CartaoPayPersist.
        :rtype: str
        """
        return self._chave_publica_device

    @chave_publica_device.setter
    def chave_publica_device(self, chave_publica_device):
        """
        Sets the chave_publica_device of this CartaoPayPersist.
        Chave p\u00C3\u00BAblica do dispositivo criptografada

        :param chave_publica_device: The chave_publica_device of this CartaoPayPersist.
        :type: str
        """
        self._chave_publica_device = chave_publica_device

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

