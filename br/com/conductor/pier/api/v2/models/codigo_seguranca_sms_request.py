# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class CodigoSegurancaSMSRequest(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        CodigoSegurancaSMSRequest - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'ddd': 'str',
            'telefone': 'str',
            'codigo_seguranca': 'str'
        }

        self.attribute_map = {
            'ddd': 'ddd',
            'telefone': 'telefone',
            'codigo_seguranca': 'codigoSeguranca'
        }

        self._ddd = None
        self._telefone = None
        self._codigo_seguranca = None

    @property
    def ddd(self):
        """
        Gets the ddd of this CodigoSegurancaSMSRequest.
        C\u00F3digo DDD do telefone (id).

        :return: The ddd of this CodigoSegurancaSMSRequest.
        :rtype: str
        """
        return self._ddd

    @ddd.setter
    def ddd(self, ddd):
        """
        Sets the ddd of this CodigoSegurancaSMSRequest.
        C\u00F3digo DDD do telefone (id).

        :param ddd: The ddd of this CodigoSegurancaSMSRequest.
        :type: str
        """
        self._ddd = ddd

    @property
    def telefone(self):
        """
        Gets the telefone of this CodigoSegurancaSMSRequest.
        N\u00FAmero do telefone.

        :return: The telefone of this CodigoSegurancaSMSRequest.
        :rtype: str
        """
        return self._telefone

    @telefone.setter
    def telefone(self, telefone):
        """
        Sets the telefone of this CodigoSegurancaSMSRequest.
        N\u00FAmero do telefone.

        :param telefone: The telefone of this CodigoSegurancaSMSRequest.
        :type: str
        """
        self._telefone = telefone

    @property
    def codigo_seguranca(self):
        """
        Gets the codigo_seguranca of this CodigoSegurancaSMSRequest.
        Token para valida\u00E7\u00E3o.

        :return: The codigo_seguranca of this CodigoSegurancaSMSRequest.
        :rtype: str
        """
        return self._codigo_seguranca

    @codigo_seguranca.setter
    def codigo_seguranca(self, codigo_seguranca):
        """
        Sets the codigo_seguranca of this CodigoSegurancaSMSRequest.
        Token para valida\u00E7\u00E3o.

        :param codigo_seguranca: The codigo_seguranca of this CodigoSegurancaSMSRequest.
        :type: str
        """
        self._codigo_seguranca = codigo_seguranca

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

