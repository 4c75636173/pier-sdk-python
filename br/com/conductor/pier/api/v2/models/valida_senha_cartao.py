# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class ValidaSenhaCartao(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        ValidaSenhaCartao - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'mensagem': 'str',
            'id_status_cartao': 'int',
            'status_cartao': 'str',
            'quantidade_tentativas': 'int',
            'quantidade_maxima_tentativas': 'int'
        }

        self.attribute_map = {
            'mensagem': 'mensagem',
            'id_status_cartao': 'idStatusCartao',
            'status_cartao': 'statusCartao',
            'quantidade_tentativas': 'quantidadeTentativas',
            'quantidade_maxima_tentativas': 'quantidadeMaximaTentativas'
        }

        self._mensagem = None
        self._id_status_cartao = None
        self._status_cartao = None
        self._quantidade_tentativas = None
        self._quantidade_maxima_tentativas = None

    @property
    def mensagem(self):
        """
        Gets the mensagem of this ValidaSenhaCartao.
        Mensagem

        :return: The mensagem of this ValidaSenhaCartao.
        :rtype: str
        """
        return self._mensagem

    @mensagem.setter
    def mensagem(self, mensagem):
        """
        Sets the mensagem of this ValidaSenhaCartao.
        Mensagem

        :param mensagem: The mensagem of this ValidaSenhaCartao.
        :type: str
        """
        self._mensagem = mensagem

    @property
    def id_status_cartao(self):
        """
        Gets the id_status_cartao of this ValidaSenhaCartao.
        Descri\u00C3\u00A7\u00C3\u00A3o do status do cart\u00C3\u00A3o

        :return: The id_status_cartao of this ValidaSenhaCartao.
        :rtype: int
        """
        return self._id_status_cartao

    @id_status_cartao.setter
    def id_status_cartao(self, id_status_cartao):
        """
        Sets the id_status_cartao of this ValidaSenhaCartao.
        Descri\u00C3\u00A7\u00C3\u00A3o do status do cart\u00C3\u00A3o

        :param id_status_cartao: The id_status_cartao of this ValidaSenhaCartao.
        :type: int
        """
        self._id_status_cartao = id_status_cartao

    @property
    def status_cartao(self):
        """
        Gets the status_cartao of this ValidaSenhaCartao.
        Descri\u00C3\u00A7\u00C3\u00A3o do status do cart\u00C3\u00A3o

        :return: The status_cartao of this ValidaSenhaCartao.
        :rtype: str
        """
        return self._status_cartao

    @status_cartao.setter
    def status_cartao(self, status_cartao):
        """
        Sets the status_cartao of this ValidaSenhaCartao.
        Descri\u00C3\u00A7\u00C3\u00A3o do status do cart\u00C3\u00A3o

        :param status_cartao: The status_cartao of this ValidaSenhaCartao.
        :type: str
        """
        self._status_cartao = status_cartao

    @property
    def quantidade_tentativas(self):
        """
        Gets the quantidade_tentativas of this ValidaSenhaCartao.
        Quantidade tentativas

        :return: The quantidade_tentativas of this ValidaSenhaCartao.
        :rtype: int
        """
        return self._quantidade_tentativas

    @quantidade_tentativas.setter
    def quantidade_tentativas(self, quantidade_tentativas):
        """
        Sets the quantidade_tentativas of this ValidaSenhaCartao.
        Quantidade tentativas

        :param quantidade_tentativas: The quantidade_tentativas of this ValidaSenhaCartao.
        :type: int
        """
        self._quantidade_tentativas = quantidade_tentativas

    @property
    def quantidade_maxima_tentativas(self):
        """
        Gets the quantidade_maxima_tentativas of this ValidaSenhaCartao.
        Quantidade m\u00C3\u00A1xima tentativas permitidas

        :return: The quantidade_maxima_tentativas of this ValidaSenhaCartao.
        :rtype: int
        """
        return self._quantidade_maxima_tentativas

    @quantidade_maxima_tentativas.setter
    def quantidade_maxima_tentativas(self, quantidade_maxima_tentativas):
        """
        Sets the quantidade_maxima_tentativas of this ValidaSenhaCartao.
        Quantidade m\u00C3\u00A1xima tentativas permitidas

        :param quantidade_maxima_tentativas: The quantidade_maxima_tentativas of this ValidaSenhaCartao.
        :type: int
        """
        self._quantidade_maxima_tentativas = quantidade_maxima_tentativas

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

