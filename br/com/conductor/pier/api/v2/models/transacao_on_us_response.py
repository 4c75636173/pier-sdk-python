# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class TransacaoOnUsResponse(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        TransacaoOnUsResponse - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'nsu_origem': 'str',
            'nsu_autorizacao': 'str',
            'plano_de_parcelamento': 'list[MapOfstringAndstring]',
            'codigo_autorizacao': 'str',
            'numero_mascarado_cartao': 'str',
            'nome_portador_cartao': 'str',
            'terminal_requisitante': 'str'
        }

        self.attribute_map = {
            'nsu_origem': 'nsuOrigem',
            'nsu_autorizacao': 'nsuAutorizacao',
            'plano_de_parcelamento': 'planoDeParcelamento',
            'codigo_autorizacao': 'codigoAutorizacao',
            'numero_mascarado_cartao': 'numeroMascaradoCartao',
            'nome_portador_cartao': 'nomePortadorCartao',
            'terminal_requisitante': 'terminalRequisitante'
        }

        self._nsu_origem = None
        self._nsu_autorizacao = None
        self._plano_de_parcelamento = None
        self._codigo_autorizacao = None
        self._numero_mascarado_cartao = None
        self._nome_portador_cartao = None
        self._terminal_requisitante = None

    @property
    def nsu_origem(self):
        """
        Gets the nsu_origem of this TransacaoOnUsResponse.
        N\u00FAmero Sequencial \u00DAnico que identifica a transa\u00E7\u00E3o no sistema que a originou.

        :return: The nsu_origem of this TransacaoOnUsResponse.
        :rtype: str
        """
        return self._nsu_origem

    @nsu_origem.setter
    def nsu_origem(self, nsu_origem):
        """
        Sets the nsu_origem of this TransacaoOnUsResponse.
        N\u00FAmero Sequencial \u00DAnico que identifica a transa\u00E7\u00E3o no sistema que a originou.

        :param nsu_origem: The nsu_origem of this TransacaoOnUsResponse.
        :type: str
        """
        self._nsu_origem = nsu_origem

    @property
    def nsu_autorizacao(self):
        """
        Gets the nsu_autorizacao of this TransacaoOnUsResponse.
        N\u00FAmero Sequencial \u00DAnico gerado pelo Autorizador a cada Transa\u00E7\u00E3o.

        :return: The nsu_autorizacao of this TransacaoOnUsResponse.
        :rtype: str
        """
        return self._nsu_autorizacao

    @nsu_autorizacao.setter
    def nsu_autorizacao(self, nsu_autorizacao):
        """
        Sets the nsu_autorizacao of this TransacaoOnUsResponse.
        N\u00FAmero Sequencial \u00DAnico gerado pelo Autorizador a cada Transa\u00E7\u00E3o.

        :param nsu_autorizacao: The nsu_autorizacao of this TransacaoOnUsResponse.
        :type: str
        """
        self._nsu_autorizacao = nsu_autorizacao

    @property
    def plano_de_parcelamento(self):
        """
        Gets the plano_de_parcelamento of this TransacaoOnUsResponse.
        Descri\u00E7\u00E3o do Plano de Parcelamento atribu\u00EDdo a Transa\u00E7\u00E3o.

        :return: The plano_de_parcelamento of this TransacaoOnUsResponse.
        :rtype: list[MapOfstringAndstring]
        """
        return self._plano_de_parcelamento

    @plano_de_parcelamento.setter
    def plano_de_parcelamento(self, plano_de_parcelamento):
        """
        Sets the plano_de_parcelamento of this TransacaoOnUsResponse.
        Descri\u00E7\u00E3o do Plano de Parcelamento atribu\u00EDdo a Transa\u00E7\u00E3o.

        :param plano_de_parcelamento: The plano_de_parcelamento of this TransacaoOnUsResponse.
        :type: list[MapOfstringAndstring]
        """
        self._plano_de_parcelamento = plano_de_parcelamento

    @property
    def codigo_autorizacao(self):
        """
        Gets the codigo_autorizacao of this TransacaoOnUsResponse.
        C\u00F3digo de Autoriza\u00E7\u00E3o gerado pelo Autorizador.

        :return: The codigo_autorizacao of this TransacaoOnUsResponse.
        :rtype: str
        """
        return self._codigo_autorizacao

    @codigo_autorizacao.setter
    def codigo_autorizacao(self, codigo_autorizacao):
        """
        Sets the codigo_autorizacao of this TransacaoOnUsResponse.
        C\u00F3digo de Autoriza\u00E7\u00E3o gerado pelo Autorizador.

        :param codigo_autorizacao: The codigo_autorizacao of this TransacaoOnUsResponse.
        :type: str
        """
        self._codigo_autorizacao = codigo_autorizacao

    @property
    def numero_mascarado_cartao(self):
        """
        Gets the numero_mascarado_cartao of this TransacaoOnUsResponse.
        N\u00FAmero do Cart\u00E3o que originou a transa\u00E7\u00E3o em formato mascarado.

        :return: The numero_mascarado_cartao of this TransacaoOnUsResponse.
        :rtype: str
        """
        return self._numero_mascarado_cartao

    @numero_mascarado_cartao.setter
    def numero_mascarado_cartao(self, numero_mascarado_cartao):
        """
        Sets the numero_mascarado_cartao of this TransacaoOnUsResponse.
        N\u00FAmero do Cart\u00E3o que originou a transa\u00E7\u00E3o em formato mascarado.

        :param numero_mascarado_cartao: The numero_mascarado_cartao of this TransacaoOnUsResponse.
        :type: str
        """
        self._numero_mascarado_cartao = numero_mascarado_cartao

    @property
    def nome_portador_cartao(self):
        """
        Gets the nome_portador_cartao of this TransacaoOnUsResponse.
        Nome do Portador do Cart\u00E3o que originou a transa\u00E7\u00E3o.

        :return: The nome_portador_cartao of this TransacaoOnUsResponse.
        :rtype: str
        """
        return self._nome_portador_cartao

    @nome_portador_cartao.setter
    def nome_portador_cartao(self, nome_portador_cartao):
        """
        Sets the nome_portador_cartao of this TransacaoOnUsResponse.
        Nome do Portador do Cart\u00E3o que originou a transa\u00E7\u00E3o.

        :param nome_portador_cartao: The nome_portador_cartao of this TransacaoOnUsResponse.
        :type: str
        """
        self._nome_portador_cartao = nome_portador_cartao

    @property
    def terminal_requisitante(self):
        """
        Gets the terminal_requisitante of this TransacaoOnUsResponse.
        Apresenta a identifica\u00E7\u00E3o do terminal requisitante

        :return: The terminal_requisitante of this TransacaoOnUsResponse.
        :rtype: str
        """
        return self._terminal_requisitante

    @terminal_requisitante.setter
    def terminal_requisitante(self, terminal_requisitante):
        """
        Sets the terminal_requisitante of this TransacaoOnUsResponse.
        Apresenta a identifica\u00E7\u00E3o do terminal requisitante

        :param terminal_requisitante: The terminal_requisitante of this TransacaoOnUsResponse.
        :type: str
        """
        self._terminal_requisitante = terminal_requisitante

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

