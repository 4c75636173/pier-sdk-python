# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class ParametroEmissorResponse(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        ParametroEmissorResponse - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'codigo': 'str',
            'data_validade': 'str',
            'descricao': 'str',
            'tipo': 'str',
            'valor_parametro': 'str'
        }

        self.attribute_map = {
            'codigo': 'codigo',
            'data_validade': 'dataValidade',
            'descricao': 'descricao',
            'tipo': 'tipo',
            'valor_parametro': 'valorParametro'
        }

        self._codigo = None
        self._data_validade = None
        self._descricao = None
        self._tipo = None
        self._valor_parametro = None

    @property
    def codigo(self):
        """
        Gets the codigo of this ParametroEmissorResponse.
        {{{parametro_emissor_resposta_codigo_descricao}}}

        :return: The codigo of this ParametroEmissorResponse.
        :rtype: str
        """
        return self._codigo

    @codigo.setter
    def codigo(self, codigo):
        """
        Sets the codigo of this ParametroEmissorResponse.
        {{{parametro_emissor_resposta_codigo_descricao}}}

        :param codigo: The codigo of this ParametroEmissorResponse.
        :type: str
        """
        self._codigo = codigo

    @property
    def data_validade(self):
        """
        Gets the data_validade of this ParametroEmissorResponse.
        {{{parametro_emissor_resposta_data_validade_descricao}}}

        :return: The data_validade of this ParametroEmissorResponse.
        :rtype: str
        """
        return self._data_validade

    @data_validade.setter
    def data_validade(self, data_validade):
        """
        Sets the data_validade of this ParametroEmissorResponse.
        {{{parametro_emissor_resposta_data_validade_descricao}}}

        :param data_validade: The data_validade of this ParametroEmissorResponse.
        :type: str
        """
        self._data_validade = data_validade

    @property
    def descricao(self):
        """
        Gets the descricao of this ParametroEmissorResponse.
        {{{parametro_emissor_resposta_descricao_descricao}}}

        :return: The descricao of this ParametroEmissorResponse.
        :rtype: str
        """
        return self._descricao

    @descricao.setter
    def descricao(self, descricao):
        """
        Sets the descricao of this ParametroEmissorResponse.
        {{{parametro_emissor_resposta_descricao_descricao}}}

        :param descricao: The descricao of this ParametroEmissorResponse.
        :type: str
        """
        self._descricao = descricao

    @property
    def tipo(self):
        """
        Gets the tipo of this ParametroEmissorResponse.
        {{{parametro_emissor_resposta_tipo_descricao}}}

        :return: The tipo of this ParametroEmissorResponse.
        :rtype: str
        """
        return self._tipo

    @tipo.setter
    def tipo(self, tipo):
        """
        Sets the tipo of this ParametroEmissorResponse.
        {{{parametro_emissor_resposta_tipo_descricao}}}

        :param tipo: The tipo of this ParametroEmissorResponse.
        :type: str
        """
        self._tipo = tipo

    @property
    def valor_parametro(self):
        """
        Gets the valor_parametro of this ParametroEmissorResponse.
        {{{parametro_emissor_resposta_valor_parametro_descricao}}}

        :return: The valor_parametro of this ParametroEmissorResponse.
        :rtype: str
        """
        return self._valor_parametro

    @valor_parametro.setter
    def valor_parametro(self, valor_parametro):
        """
        Sets the valor_parametro of this ParametroEmissorResponse.
        {{{parametro_emissor_resposta_valor_parametro_descricao}}}

        :param valor_parametro: The valor_parametro of this ParametroEmissorResponse.
        :type: str
        """
        self._valor_parametro = valor_parametro

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

