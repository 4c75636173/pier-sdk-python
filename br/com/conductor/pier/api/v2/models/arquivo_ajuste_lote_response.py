# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class ArquivoAjusteLoteResponse(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        ArquivoAjusteLoteResponse - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'data_processamento': 'datetime',
            'id': 'int',
            'length': 'int',
            'lines': 'int',
            'name': 'str',
            'status': 'str',
            'src_name': 'str'
        }

        self.attribute_map = {
            'data_processamento': 'dataProcessamento',
            'id': 'id',
            'length': 'length',
            'lines': 'lines',
            'name': 'name',
            'status': 'status',
            'src_name': 'srcName'
        }

        self._data_processamento = None
        self._id = None
        self._length = None
        self._lines = None
        self._name = None
        self._status = None
        self._src_name = None

    @property
    def data_processamento(self):
        """
        Gets the data_processamento of this ArquivoAjusteLoteResponse.


        :return: The data_processamento of this ArquivoAjusteLoteResponse.
        :rtype: datetime
        """
        return self._data_processamento

    @data_processamento.setter
    def data_processamento(self, data_processamento):
        """
        Sets the data_processamento of this ArquivoAjusteLoteResponse.


        :param data_processamento: The data_processamento of this ArquivoAjusteLoteResponse.
        :type: datetime
        """
        self._data_processamento = data_processamento

    @property
    def id(self):
        """
        Gets the id of this ArquivoAjusteLoteResponse.
        {{{arquivo_ajuste_lote_response_id_value}}}

        :return: The id of this ArquivoAjusteLoteResponse.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this ArquivoAjusteLoteResponse.
        {{{arquivo_ajuste_lote_response_id_value}}}

        :param id: The id of this ArquivoAjusteLoteResponse.
        :type: int
        """
        self._id = id

    @property
    def length(self):
        """
        Gets the length of this ArquivoAjusteLoteResponse.
        {{{arquivo_ajuste_lote_response_length_value}}}

        :return: The length of this ArquivoAjusteLoteResponse.
        :rtype: int
        """
        return self._length

    @length.setter
    def length(self, length):
        """
        Sets the length of this ArquivoAjusteLoteResponse.
        {{{arquivo_ajuste_lote_response_length_value}}}

        :param length: The length of this ArquivoAjusteLoteResponse.
        :type: int
        """
        self._length = length

    @property
    def lines(self):
        """
        Gets the lines of this ArquivoAjusteLoteResponse.
        {{{arquivo_ajuste_lote_response_lines_value}}}

        :return: The lines of this ArquivoAjusteLoteResponse.
        :rtype: int
        """
        return self._lines

    @lines.setter
    def lines(self, lines):
        """
        Sets the lines of this ArquivoAjusteLoteResponse.
        {{{arquivo_ajuste_lote_response_lines_value}}}

        :param lines: The lines of this ArquivoAjusteLoteResponse.
        :type: int
        """
        self._lines = lines

    @property
    def name(self):
        """
        Gets the name of this ArquivoAjusteLoteResponse.
        {{{arquivo_ajuste_lote_response_name_value}}}

        :return: The name of this ArquivoAjusteLoteResponse.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this ArquivoAjusteLoteResponse.
        {{{arquivo_ajuste_lote_response_name_value}}}

        :param name: The name of this ArquivoAjusteLoteResponse.
        :type: str
        """
        self._name = name

    @property
    def status(self):
        """
        Gets the status of this ArquivoAjusteLoteResponse.
        {{{arquivo_ajuste_lote_response_status_value}}}

        :return: The status of this ArquivoAjusteLoteResponse.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this ArquivoAjusteLoteResponse.
        {{{arquivo_ajuste_lote_response_status_value}}}

        :param status: The status of this ArquivoAjusteLoteResponse.
        :type: str
        """
        self._status = status

    @property
    def src_name(self):
        """
        Gets the src_name of this ArquivoAjusteLoteResponse.
        {{{arquivo_ajuste_lote_response_srcName_value}}}

        :return: The src_name of this ArquivoAjusteLoteResponse.
        :rtype: str
        """
        return self._src_name

    @src_name.setter
    def src_name(self, src_name):
        """
        Sets the src_name of this ArquivoAjusteLoteResponse.
        {{{arquivo_ajuste_lote_response_srcName_value}}}

        :param src_name: The src_name of this ArquivoAjusteLoteResponse.
        :type: str
        """
        self._src_name = src_name

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

