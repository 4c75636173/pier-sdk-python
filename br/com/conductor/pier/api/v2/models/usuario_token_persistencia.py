# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class UsuarioTokenPersistencia(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        UsuarioTokenPersistencia - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'cpf': 'str',
            'email': 'str',
            'ddd': 'str',
            'telefone': 'str',
            'data_nascimento': 'str',
            'envia_sms': 'bool',
            'id_template_email': 'int',
            'id_template_sms': 'int',
            'nsu': 'int'
        }

        self.attribute_map = {
            'cpf': 'cpf',
            'email': 'email',
            'ddd': 'ddd',
            'telefone': 'telefone',
            'data_nascimento': 'dataNascimento',
            'envia_sms': 'enviaSMS',
            'id_template_email': 'idTemplateEmail',
            'id_template_sms': 'idTemplateSMS',
            'nsu': 'nsu'
        }

        self._cpf = None
        self._email = None
        self._ddd = None
        self._telefone = None
        self._data_nascimento = None
        self._envia_sms = None
        self._id_template_email = None
        self._id_template_sms = None
        self._nsu = None

    @property
    def cpf(self):
        """
        Gets the cpf of this UsuarioTokenPersistencia.
        {{{usuario_token_persistencia_cpf_descricao}}}

        :return: The cpf of this UsuarioTokenPersistencia.
        :rtype: str
        """
        return self._cpf

    @cpf.setter
    def cpf(self, cpf):
        """
        Sets the cpf of this UsuarioTokenPersistencia.
        {{{usuario_token_persistencia_cpf_descricao}}}

        :param cpf: The cpf of this UsuarioTokenPersistencia.
        :type: str
        """
        self._cpf = cpf

    @property
    def email(self):
        """
        Gets the email of this UsuarioTokenPersistencia.
        {{{usuario_token_persistencia_email_descricao}}}

        :return: The email of this UsuarioTokenPersistencia.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """
        Sets the email of this UsuarioTokenPersistencia.
        {{{usuario_token_persistencia_email_descricao}}}

        :param email: The email of this UsuarioTokenPersistencia.
        :type: str
        """
        self._email = email

    @property
    def ddd(self):
        """
        Gets the ddd of this UsuarioTokenPersistencia.
        {{{usuario_token_persistencia_ddd_descricao}}}

        :return: The ddd of this UsuarioTokenPersistencia.
        :rtype: str
        """
        return self._ddd

    @ddd.setter
    def ddd(self, ddd):
        """
        Sets the ddd of this UsuarioTokenPersistencia.
        {{{usuario_token_persistencia_ddd_descricao}}}

        :param ddd: The ddd of this UsuarioTokenPersistencia.
        :type: str
        """
        self._ddd = ddd

    @property
    def telefone(self):
        """
        Gets the telefone of this UsuarioTokenPersistencia.
        {{{usuario_token_persistencia_telefone_descricao}}}

        :return: The telefone of this UsuarioTokenPersistencia.
        :rtype: str
        """
        return self._telefone

    @telefone.setter
    def telefone(self, telefone):
        """
        Sets the telefone of this UsuarioTokenPersistencia.
        {{{usuario_token_persistencia_telefone_descricao}}}

        :param telefone: The telefone of this UsuarioTokenPersistencia.
        :type: str
        """
        self._telefone = telefone

    @property
    def data_nascimento(self):
        """
        Gets the data_nascimento of this UsuarioTokenPersistencia.
        {{{usuario_token_persistencia_data_nascimento_descricao}}}

        :return: The data_nascimento of this UsuarioTokenPersistencia.
        :rtype: str
        """
        return self._data_nascimento

    @data_nascimento.setter
    def data_nascimento(self, data_nascimento):
        """
        Sets the data_nascimento of this UsuarioTokenPersistencia.
        {{{usuario_token_persistencia_data_nascimento_descricao}}}

        :param data_nascimento: The data_nascimento of this UsuarioTokenPersistencia.
        :type: str
        """
        self._data_nascimento = data_nascimento

    @property
    def envia_sms(self):
        """
        Gets the envia_sms of this UsuarioTokenPersistencia.
        {{{usuario_token_persistencia_envia_sms_descricao}}}

        :return: The envia_sms of this UsuarioTokenPersistencia.
        :rtype: bool
        """
        return self._envia_sms

    @envia_sms.setter
    def envia_sms(self, envia_sms):
        """
        Sets the envia_sms of this UsuarioTokenPersistencia.
        {{{usuario_token_persistencia_envia_sms_descricao}}}

        :param envia_sms: The envia_sms of this UsuarioTokenPersistencia.
        :type: bool
        """
        self._envia_sms = envia_sms

    @property
    def id_template_email(self):
        """
        Gets the id_template_email of this UsuarioTokenPersistencia.
        {{{usuario_token_persistencia_id_template_email_descricao}}}

        :return: The id_template_email of this UsuarioTokenPersistencia.
        :rtype: int
        """
        return self._id_template_email

    @id_template_email.setter
    def id_template_email(self, id_template_email):
        """
        Sets the id_template_email of this UsuarioTokenPersistencia.
        {{{usuario_token_persistencia_id_template_email_descricao}}}

        :param id_template_email: The id_template_email of this UsuarioTokenPersistencia.
        :type: int
        """
        self._id_template_email = id_template_email

    @property
    def id_template_sms(self):
        """
        Gets the id_template_sms of this UsuarioTokenPersistencia.
        {{{usuario_token_persistencia_id_template_sms_descricao}}}

        :return: The id_template_sms of this UsuarioTokenPersistencia.
        :rtype: int
        """
        return self._id_template_sms

    @id_template_sms.setter
    def id_template_sms(self, id_template_sms):
        """
        Sets the id_template_sms of this UsuarioTokenPersistencia.
        {{{usuario_token_persistencia_id_template_sms_descricao}}}

        :param id_template_sms: The id_template_sms of this UsuarioTokenPersistencia.
        :type: int
        """
        self._id_template_sms = id_template_sms

    @property
    def nsu(self):
        """
        Gets the nsu of this UsuarioTokenPersistencia.
        {{{usuario_token_persistencia_nsu_descricao}}}

        :return: The nsu of this UsuarioTokenPersistencia.
        :rtype: int
        """
        return self._nsu

    @nsu.setter
    def nsu(self, nsu):
        """
        Sets the nsu of this UsuarioTokenPersistencia.
        {{{usuario_token_persistencia_nsu_descricao}}}

        :param nsu: The nsu of this UsuarioTokenPersistencia.
        :type: int
        """
        self._nsu = nsu

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

