# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class ParametroProdutoResponse(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        ParametroProdutoResponse - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id_produto': 'int',
            'tipo_origem_transacao': 'str',
            'descricao': 'str',
            'valor_parametro': 'float',
            'data_validade': 'str'
        }

        self.attribute_map = {
            'id_produto': 'idProduto',
            'tipo_origem_transacao': 'tipoOrigemTransacao',
            'descricao': 'descricao',
            'valor_parametro': 'valorParametro',
            'data_validade': 'dataValidade'
        }

        self._id_produto = None
        self._tipo_origem_transacao = None
        self._descricao = None
        self._valor_parametro = None
        self._data_validade = None

    @property
    def id_produto(self):
        """
        Gets the id_produto of this ParametroProdutoResponse.
        C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Produto (id).

        :return: The id_produto of this ParametroProdutoResponse.
        :rtype: int
        """
        return self._id_produto

    @id_produto.setter
    def id_produto(self, id_produto):
        """
        Sets the id_produto of this ParametroProdutoResponse.
        C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Produto (id).

        :param id_produto: The id_produto of this ParametroProdutoResponse.
        :type: int
        """
        self._id_produto = id_produto

    @property
    def tipo_origem_transacao(self):
        """
        Gets the tipo_origem_transacao of this ParametroProdutoResponse.
        Tipo da Transa\u00C3\u00A7\u00C3\u00A3o (ON_US ou OFF_US).

        :return: The tipo_origem_transacao of this ParametroProdutoResponse.
        :rtype: str
        """
        return self._tipo_origem_transacao

    @tipo_origem_transacao.setter
    def tipo_origem_transacao(self, tipo_origem_transacao):
        """
        Sets the tipo_origem_transacao of this ParametroProdutoResponse.
        Tipo da Transa\u00C3\u00A7\u00C3\u00A3o (ON_US ou OFF_US).

        :param tipo_origem_transacao: The tipo_origem_transacao of this ParametroProdutoResponse.
        :type: str
        """
        allowed_values = ["ON_US", "OFF_US"]
        if tipo_origem_transacao not in allowed_values:
            raise ValueError(
                "Invalid value for `tipo_origem_transacao`, must be one of {0}"
                .format(allowed_values)
            )
        self._tipo_origem_transacao = tipo_origem_transacao

    @property
    def descricao(self):
        """
        Gets the descricao of this ParametroProdutoResponse.
        Descri\u00C3\u00A7\u00C3\u00A3o do Tipo da Transa\u00C3\u00A7\u00C3\u00A3o.

        :return: The descricao of this ParametroProdutoResponse.
        :rtype: str
        """
        return self._descricao

    @descricao.setter
    def descricao(self, descricao):
        """
        Sets the descricao of this ParametroProdutoResponse.
        Descri\u00C3\u00A7\u00C3\u00A3o do Tipo da Transa\u00C3\u00A7\u00C3\u00A3o.

        :param descricao: The descricao of this ParametroProdutoResponse.
        :type: str
        """
        self._descricao = descricao

    @property
    def valor_parametro(self):
        """
        Gets the valor_parametro of this ParametroProdutoResponse.
        Valor do Par\u00C3\u00A2metro.

        :return: The valor_parametro of this ParametroProdutoResponse.
        :rtype: float
        """
        return self._valor_parametro

    @valor_parametro.setter
    def valor_parametro(self, valor_parametro):
        """
        Sets the valor_parametro of this ParametroProdutoResponse.
        Valor do Par\u00C3\u00A2metro.

        :param valor_parametro: The valor_parametro of this ParametroProdutoResponse.
        :type: float
        """
        self._valor_parametro = valor_parametro

    @property
    def data_validade(self):
        """
        Gets the data_validade of this ParametroProdutoResponse.
        Data de Validade do Par\u00C3\u00A2metro do Produto.

        :return: The data_validade of this ParametroProdutoResponse.
        :rtype: str
        """
        return self._data_validade

    @data_validade.setter
    def data_validade(self, data_validade):
        """
        Sets the data_validade of this ParametroProdutoResponse.
        Data de Validade do Par\u00C3\u00A2metro do Produto.

        :param data_validade: The data_validade of this ParametroProdutoResponse.
        :type: str
        """
        self._data_validade = data_validade

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

