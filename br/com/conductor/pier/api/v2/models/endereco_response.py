# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class EnderecoResponse(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        EnderecoResponse - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'int',
            'id_pessoa': 'int',
            'id_tipo_endereco': 'int',
            'cep': 'str',
            'logradouro': 'str',
            'numero': 'int',
            'complemento': 'str',
            'ponto_referencia': 'str',
            'bairro': 'str',
            'cidade': 'str',
            'uf': 'str',
            'pais': 'str',
            'data_inclusao': 'str',
            'data_ultima_atualizacao': 'str',
            'flag_correspondencia': 'bool'
        }

        self.attribute_map = {
            'id': 'id',
            'id_pessoa': 'idPessoa',
            'id_tipo_endereco': 'idTipoEndereco',
            'cep': 'cep',
            'logradouro': 'logradouro',
            'numero': 'numero',
            'complemento': 'complemento',
            'ponto_referencia': 'pontoReferencia',
            'bairro': 'bairro',
            'cidade': 'cidade',
            'uf': 'uf',
            'pais': 'pais',
            'data_inclusao': 'dataInclusao',
            'data_ultima_atualizacao': 'dataUltimaAtualizacao',
            'flag_correspondencia': 'flagCorrespondencia'
        }

        self._id = None
        self._id_pessoa = None
        self._id_tipo_endereco = None
        self._cep = None
        self._logradouro = None
        self._numero = None
        self._complemento = None
        self._ponto_referencia = None
        self._bairro = None
        self._cidade = None
        self._uf = None
        self._pais = None
        self._data_inclusao = None
        self._data_ultima_atualizacao = None
        self._flag_correspondencia = None

    @property
    def id(self):
        """
        Gets the id of this EnderecoResponse.
        {{{endereco_response_id_value}}}

        :return: The id of this EnderecoResponse.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this EnderecoResponse.
        {{{endereco_response_id_value}}}

        :param id: The id of this EnderecoResponse.
        :type: int
        """
        self._id = id

    @property
    def id_pessoa(self):
        """
        Gets the id_pessoa of this EnderecoResponse.
        {{{endereco_response_id_pessoa_value}}}

        :return: The id_pessoa of this EnderecoResponse.
        :rtype: int
        """
        return self._id_pessoa

    @id_pessoa.setter
    def id_pessoa(self, id_pessoa):
        """
        Sets the id_pessoa of this EnderecoResponse.
        {{{endereco_response_id_pessoa_value}}}

        :param id_pessoa: The id_pessoa of this EnderecoResponse.
        :type: int
        """
        self._id_pessoa = id_pessoa

    @property
    def id_tipo_endereco(self):
        """
        Gets the id_tipo_endereco of this EnderecoResponse.
        {{{endereco_response_id_tipo_endereco_value}}}

        :return: The id_tipo_endereco of this EnderecoResponse.
        :rtype: int
        """
        return self._id_tipo_endereco

    @id_tipo_endereco.setter
    def id_tipo_endereco(self, id_tipo_endereco):
        """
        Sets the id_tipo_endereco of this EnderecoResponse.
        {{{endereco_response_id_tipo_endereco_value}}}

        :param id_tipo_endereco: The id_tipo_endereco of this EnderecoResponse.
        :type: int
        """
        self._id_tipo_endereco = id_tipo_endereco

    @property
    def cep(self):
        """
        Gets the cep of this EnderecoResponse.
        {{{endereco_response_cep_value}}}

        :return: The cep of this EnderecoResponse.
        :rtype: str
        """
        return self._cep

    @cep.setter
    def cep(self, cep):
        """
        Sets the cep of this EnderecoResponse.
        {{{endereco_response_cep_value}}}

        :param cep: The cep of this EnderecoResponse.
        :type: str
        """
        self._cep = cep

    @property
    def logradouro(self):
        """
        Gets the logradouro of this EnderecoResponse.
        {{{endereco_response_logradouro_value}}}

        :return: The logradouro of this EnderecoResponse.
        :rtype: str
        """
        return self._logradouro

    @logradouro.setter
    def logradouro(self, logradouro):
        """
        Sets the logradouro of this EnderecoResponse.
        {{{endereco_response_logradouro_value}}}

        :param logradouro: The logradouro of this EnderecoResponse.
        :type: str
        """
        self._logradouro = logradouro

    @property
    def numero(self):
        """
        Gets the numero of this EnderecoResponse.
        {{{endereco_response_numero_value}}}

        :return: The numero of this EnderecoResponse.
        :rtype: int
        """
        return self._numero

    @numero.setter
    def numero(self, numero):
        """
        Sets the numero of this EnderecoResponse.
        {{{endereco_response_numero_value}}}

        :param numero: The numero of this EnderecoResponse.
        :type: int
        """
        self._numero = numero

    @property
    def complemento(self):
        """
        Gets the complemento of this EnderecoResponse.
        {{{endereco_response_complemento_value}}}

        :return: The complemento of this EnderecoResponse.
        :rtype: str
        """
        return self._complemento

    @complemento.setter
    def complemento(self, complemento):
        """
        Sets the complemento of this EnderecoResponse.
        {{{endereco_response_complemento_value}}}

        :param complemento: The complemento of this EnderecoResponse.
        :type: str
        """
        self._complemento = complemento

    @property
    def ponto_referencia(self):
        """
        Gets the ponto_referencia of this EnderecoResponse.
        {{{endereco_response_ponto_referencia_value}}}

        :return: The ponto_referencia of this EnderecoResponse.
        :rtype: str
        """
        return self._ponto_referencia

    @ponto_referencia.setter
    def ponto_referencia(self, ponto_referencia):
        """
        Sets the ponto_referencia of this EnderecoResponse.
        {{{endereco_response_ponto_referencia_value}}}

        :param ponto_referencia: The ponto_referencia of this EnderecoResponse.
        :type: str
        """
        self._ponto_referencia = ponto_referencia

    @property
    def bairro(self):
        """
        Gets the bairro of this EnderecoResponse.
        {{{endereco_response_bairro_value}}}

        :return: The bairro of this EnderecoResponse.
        :rtype: str
        """
        return self._bairro

    @bairro.setter
    def bairro(self, bairro):
        """
        Sets the bairro of this EnderecoResponse.
        {{{endereco_response_bairro_value}}}

        :param bairro: The bairro of this EnderecoResponse.
        :type: str
        """
        self._bairro = bairro

    @property
    def cidade(self):
        """
        Gets the cidade of this EnderecoResponse.
        {{{endereco_response_cidade_value}}}

        :return: The cidade of this EnderecoResponse.
        :rtype: str
        """
        return self._cidade

    @cidade.setter
    def cidade(self, cidade):
        """
        Sets the cidade of this EnderecoResponse.
        {{{endereco_response_cidade_value}}}

        :param cidade: The cidade of this EnderecoResponse.
        :type: str
        """
        self._cidade = cidade

    @property
    def uf(self):
        """
        Gets the uf of this EnderecoResponse.
        {{{endereco_response_uf_value}}}

        :return: The uf of this EnderecoResponse.
        :rtype: str
        """
        return self._uf

    @uf.setter
    def uf(self, uf):
        """
        Sets the uf of this EnderecoResponse.
        {{{endereco_response_uf_value}}}

        :param uf: The uf of this EnderecoResponse.
        :type: str
        """
        self._uf = uf

    @property
    def pais(self):
        """
        Gets the pais of this EnderecoResponse.
        {{{endereco_response_pais_value}}}

        :return: The pais of this EnderecoResponse.
        :rtype: str
        """
        return self._pais

    @pais.setter
    def pais(self, pais):
        """
        Sets the pais of this EnderecoResponse.
        {{{endereco_response_pais_value}}}

        :param pais: The pais of this EnderecoResponse.
        :type: str
        """
        self._pais = pais

    @property
    def data_inclusao(self):
        """
        Gets the data_inclusao of this EnderecoResponse.
        {{{endereco_response_data_inclusao_value}}}

        :return: The data_inclusao of this EnderecoResponse.
        :rtype: str
        """
        return self._data_inclusao

    @data_inclusao.setter
    def data_inclusao(self, data_inclusao):
        """
        Sets the data_inclusao of this EnderecoResponse.
        {{{endereco_response_data_inclusao_value}}}

        :param data_inclusao: The data_inclusao of this EnderecoResponse.
        :type: str
        """
        self._data_inclusao = data_inclusao

    @property
    def data_ultima_atualizacao(self):
        """
        Gets the data_ultima_atualizacao of this EnderecoResponse.
        {{{endereco_response_data_ultima_atualizacao_value}}}

        :return: The data_ultima_atualizacao of this EnderecoResponse.
        :rtype: str
        """
        return self._data_ultima_atualizacao

    @data_ultima_atualizacao.setter
    def data_ultima_atualizacao(self, data_ultima_atualizacao):
        """
        Sets the data_ultima_atualizacao of this EnderecoResponse.
        {{{endereco_response_data_ultima_atualizacao_value}}}

        :param data_ultima_atualizacao: The data_ultima_atualizacao of this EnderecoResponse.
        :type: str
        """
        self._data_ultima_atualizacao = data_ultima_atualizacao

    @property
    def flag_correspondencia(self):
        """
        Gets the flag_correspondencia of this EnderecoResponse.
        {{{endereco_response_flag_correspondencia_value}}}

        :return: The flag_correspondencia of this EnderecoResponse.
        :rtype: bool
        """
        return self._flag_correspondencia

    @flag_correspondencia.setter
    def flag_correspondencia(self, flag_correspondencia):
        """
        Sets the flag_correspondencia of this EnderecoResponse.
        {{{endereco_response_flag_correspondencia_value}}}

        :param flag_correspondencia: The flag_correspondencia of this EnderecoResponse.
        :type: bool
        """
        self._flag_correspondencia = flag_correspondencia

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

