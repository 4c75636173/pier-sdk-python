# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class Endereco(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        Endereco - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'int',
            'id_pessoa': 'int',
            'id_tipo_endereco': 'int',
            'cep': 'str',
            'logradouro': 'str',
            'numero': 'int',
            'complemento': 'str',
            'ponto_referencia': 'str',
            'bairro': 'str',
            'cidade': 'str',
            'uf': 'str',
            'pais': 'str',
            'data_inclusao': 'str',
            'data_ultima_atualizacao': 'str'
        }

        self.attribute_map = {
            'id': 'id',
            'id_pessoa': 'idPessoa',
            'id_tipo_endereco': 'idTipoEndereco',
            'cep': 'cep',
            'logradouro': 'logradouro',
            'numero': 'numero',
            'complemento': 'complemento',
            'ponto_referencia': 'pontoReferencia',
            'bairro': 'bairro',
            'cidade': 'cidade',
            'uf': 'uf',
            'pais': 'pais',
            'data_inclusao': 'dataInclusao',
            'data_ultima_atualizacao': 'dataUltimaAtualizacao'
        }

        self._id = None
        self._id_pessoa = None
        self._id_tipo_endereco = None
        self._cep = None
        self._logradouro = None
        self._numero = None
        self._complemento = None
        self._ponto_referencia = None
        self._bairro = None
        self._cidade = None
        self._uf = None
        self._pais = None
        self._data_inclusao = None
        self._data_ultima_atualizacao = None

    @property
    def id(self):
        """
        Gets the id of this Endereco.
        C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Endere\u00C3\u00A7o (id).

        :return: The id of this Endereco.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Endereco.
        C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Endere\u00C3\u00A7o (id).

        :param id: The id of this Endereco.
        :type: int
        """
        self._id = id

    @property
    def id_pessoa(self):
        """
        Gets the id_pessoa of this Endereco.
        C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o da Pessoa a qual o endere\u00C3\u00A7o pertence (id)

        :return: The id_pessoa of this Endereco.
        :rtype: int
        """
        return self._id_pessoa

    @id_pessoa.setter
    def id_pessoa(self, id_pessoa):
        """
        Sets the id_pessoa of this Endereco.
        C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o da Pessoa a qual o endere\u00C3\u00A7o pertence (id)

        :param id_pessoa: The id_pessoa of this Endereco.
        :type: int
        """
        self._id_pessoa = id_pessoa

    @property
    def id_tipo_endereco(self):
        """
        Gets the id_tipo_endereco of this Endereco.
        C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o da Tipo Endere\u00C3\u00A7o (id)

        :return: The id_tipo_endereco of this Endereco.
        :rtype: int
        """
        return self._id_tipo_endereco

    @id_tipo_endereco.setter
    def id_tipo_endereco(self, id_tipo_endereco):
        """
        Sets the id_tipo_endereco of this Endereco.
        C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o da Tipo Endere\u00C3\u00A7o (id)

        :param id_tipo_endereco: The id_tipo_endereco of this Endereco.
        :type: int
        """
        self._id_tipo_endereco = id_tipo_endereco

    @property
    def cep(self):
        """
        Gets the cep of this Endereco.
        Apresenta o C\u00C3\u00B3digo de Endere\u00C3\u00A7amento Postal (CEP) no formaro '58800000'

        :return: The cep of this Endereco.
        :rtype: str
        """
        return self._cep

    @cep.setter
    def cep(self, cep):
        """
        Sets the cep of this Endereco.
        Apresenta o C\u00C3\u00B3digo de Endere\u00C3\u00A7amento Postal (CEP) no formaro '58800000'

        :param cep: The cep of this Endereco.
        :type: str
        """
        self._cep = cep

    @property
    def logradouro(self):
        """
        Gets the logradouro of this Endereco.
        Apresenta o nome do Logradouro

        :return: The logradouro of this Endereco.
        :rtype: str
        """
        return self._logradouro

    @logradouro.setter
    def logradouro(self, logradouro):
        """
        Sets the logradouro of this Endereco.
        Apresenta o nome do Logradouro

        :param logradouro: The logradouro of this Endereco.
        :type: str
        """
        self._logradouro = logradouro

    @property
    def numero(self):
        """
        Gets the numero of this Endereco.
        Apresenta o n\u00C3\u00BAmero do endere\u00C3\u00A7o

        :return: The numero of this Endereco.
        :rtype: int
        """
        return self._numero

    @numero.setter
    def numero(self, numero):
        """
        Sets the numero of this Endereco.
        Apresenta o n\u00C3\u00BAmero do endere\u00C3\u00A7o

        :param numero: The numero of this Endereco.
        :type: int
        """
        self._numero = numero

    @property
    def complemento(self):
        """
        Gets the complemento of this Endereco.
        Apresenta descri\u00C3\u00A7oes complementares referente ao endere\u00C3\u00A7o

        :return: The complemento of this Endereco.
        :rtype: str
        """
        return self._complemento

    @complemento.setter
    def complemento(self, complemento):
        """
        Sets the complemento of this Endereco.
        Apresenta descri\u00C3\u00A7oes complementares referente ao endere\u00C3\u00A7o

        :param complemento: The complemento of this Endereco.
        :type: str
        """
        self._complemento = complemento

    @property
    def ponto_referencia(self):
        """
        Gets the ponto_referencia of this Endereco.
        Apresenta a descri\u00C3\u00A7\u00C3\u00A3o de ponto de refer\u00C3\u00AAncia do endere\u00C3\u00A7o

        :return: The ponto_referencia of this Endereco.
        :rtype: str
        """
        return self._ponto_referencia

    @ponto_referencia.setter
    def ponto_referencia(self, ponto_referencia):
        """
        Sets the ponto_referencia of this Endereco.
        Apresenta a descri\u00C3\u00A7\u00C3\u00A3o de ponto de refer\u00C3\u00AAncia do endere\u00C3\u00A7o

        :param ponto_referencia: The ponto_referencia of this Endereco.
        :type: str
        """
        self._ponto_referencia = ponto_referencia

    @property
    def bairro(self):
        """
        Gets the bairro of this Endereco.
        Apresenta nome do bairro

        :return: The bairro of this Endereco.
        :rtype: str
        """
        return self._bairro

    @bairro.setter
    def bairro(self, bairro):
        """
        Sets the bairro of this Endereco.
        Apresenta nome do bairro

        :param bairro: The bairro of this Endereco.
        :type: str
        """
        self._bairro = bairro

    @property
    def cidade(self):
        """
        Gets the cidade of this Endereco.
        Apresenta nome da cidade

        :return: The cidade of this Endereco.
        :rtype: str
        """
        return self._cidade

    @cidade.setter
    def cidade(self, cidade):
        """
        Sets the cidade of this Endereco.
        Apresenta nome da cidade

        :param cidade: The cidade of this Endereco.
        :type: str
        """
        self._cidade = cidade

    @property
    def uf(self):
        """
        Gets the uf of this Endereco.
        Apresenta sigla da Unidade Federativa

        :return: The uf of this Endereco.
        :rtype: str
        """
        return self._uf

    @uf.setter
    def uf(self, uf):
        """
        Sets the uf of this Endereco.
        Apresenta sigla da Unidade Federativa

        :param uf: The uf of this Endereco.
        :type: str
        """
        self._uf = uf

    @property
    def pais(self):
        """
        Gets the pais of this Endereco.
        Apresenta nome do Pais

        :return: The pais of this Endereco.
        :rtype: str
        """
        return self._pais

    @pais.setter
    def pais(self, pais):
        """
        Sets the pais of this Endereco.
        Apresenta nome do Pais

        :param pais: The pais of this Endereco.
        :type: str
        """
        self._pais = pais

    @property
    def data_inclusao(self):
        """
        Gets the data_inclusao of this Endereco.
        Apresenta a data em que fora cadastrado o Endere\u00C3\u00A7o

        :return: The data_inclusao of this Endereco.
        :rtype: str
        """
        return self._data_inclusao

    @data_inclusao.setter
    def data_inclusao(self, data_inclusao):
        """
        Sets the data_inclusao of this Endereco.
        Apresenta a data em que fora cadastrado o Endere\u00C3\u00A7o

        :param data_inclusao: The data_inclusao of this Endereco.
        :type: str
        """
        self._data_inclusao = data_inclusao

    @property
    def data_ultima_atualizacao(self):
        """
        Gets the data_ultima_atualizacao of this Endereco.
        Data em que fora realizada a \u00C3\u00BAltima mudan\u00C3\u00A7a neste registro de endere\u00C3\u00A7o. Quando n\u00C3\u00A3o tiver ocorrido mudan\u00C3\u00A7a, conter\u00C3\u00A1 a mesma informa\u00C3\u00A7\u00C3\u00A3o que o campo dataInclusao

        :return: The data_ultima_atualizacao of this Endereco.
        :rtype: str
        """
        return self._data_ultima_atualizacao

    @data_ultima_atualizacao.setter
    def data_ultima_atualizacao(self, data_ultima_atualizacao):
        """
        Sets the data_ultima_atualizacao of this Endereco.
        Data em que fora realizada a \u00C3\u00BAltima mudan\u00C3\u00A7a neste registro de endere\u00C3\u00A7o. Quando n\u00C3\u00A3o tiver ocorrido mudan\u00C3\u00A7a, conter\u00C3\u00A1 a mesma informa\u00C3\u00A7\u00C3\u00A3o que o campo dataInclusao

        :param data_ultima_atualizacao: The data_ultima_atualizacao of this Endereco.
        :type: str
        """
        self._data_ultima_atualizacao = data_ultima_atualizacao

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

