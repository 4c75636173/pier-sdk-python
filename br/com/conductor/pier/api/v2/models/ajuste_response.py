# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class AjusteResponse(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        AjusteResponse - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id_ajuste': 'int',
            'id_tipo_ajuste': 'int',
            'id_conta': 'int',
            'data_ajuste': 'str',
            'valor': 'float'
        }

        self.attribute_map = {
            'id_ajuste': 'idAjuste',
            'id_tipo_ajuste': 'idTipoAjuste',
            'id_conta': 'idConta',
            'data_ajuste': 'dataAjuste',
            'valor': 'valor'
        }

        self._id_ajuste = None
        self._id_tipo_ajuste = None
        self._id_conta = None
        self._data_ajuste = None
        self._valor = None

    @property
    def id_ajuste(self):
        """
        Gets the id_ajuste of this AjusteResponse.
        C\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o do ajuste (id)

        :return: The id_ajuste of this AjusteResponse.
        :rtype: int
        """
        return self._id_ajuste

    @id_ajuste.setter
    def id_ajuste(self, id_ajuste):
        """
        Sets the id_ajuste of this AjusteResponse.
        C\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o do ajuste (id)

        :param id_ajuste: The id_ajuste of this AjusteResponse.
        :type: int
        """
        self._id_ajuste = id_ajuste

    @property
    def id_tipo_ajuste(self):
        """
        Gets the id_tipo_ajuste of this AjusteResponse.
        C\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o do tipo do ajuste

        :return: The id_tipo_ajuste of this AjusteResponse.
        :rtype: int
        """
        return self._id_tipo_ajuste

    @id_tipo_ajuste.setter
    def id_tipo_ajuste(self, id_tipo_ajuste):
        """
        Sets the id_tipo_ajuste of this AjusteResponse.
        C\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o do tipo do ajuste

        :param id_tipo_ajuste: The id_tipo_ajuste of this AjusteResponse.
        :type: int
        """
        self._id_tipo_ajuste = id_tipo_ajuste

    @property
    def id_conta(self):
        """
        Gets the id_conta of this AjusteResponse.
        C\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o da conta (idConta)

        :return: The id_conta of this AjusteResponse.
        :rtype: int
        """
        return self._id_conta

    @id_conta.setter
    def id_conta(self, id_conta):
        """
        Sets the id_conta of this AjusteResponse.
        C\u00C3\u00B3digo de identifica\u00C3\u00A7\u00C3\u00A3o da conta (idConta)

        :param id_conta: The id_conta of this AjusteResponse.
        :type: int
        """
        self._id_conta = id_conta

    @property
    def data_ajuste(self):
        """
        Gets the data_ajuste of this AjusteResponse.
        Data do ajuste

        :return: The data_ajuste of this AjusteResponse.
        :rtype: str
        """
        return self._data_ajuste

    @data_ajuste.setter
    def data_ajuste(self, data_ajuste):
        """
        Sets the data_ajuste of this AjusteResponse.
        Data do ajuste

        :param data_ajuste: The data_ajuste of this AjusteResponse.
        :type: str
        """
        self._data_ajuste = data_ajuste

    @property
    def valor(self):
        """
        Gets the valor of this AjusteResponse.
        Valor do ajuste

        :return: The valor of this AjusteResponse.
        :rtype: float
        """
        return self._valor

    @valor.setter
    def valor(self, valor):
        """
        Sets the valor of this AjusteResponse.
        Valor do ajuste

        :param valor: The valor of this AjusteResponse.
        :type: float
        """
        self._valor = valor

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

