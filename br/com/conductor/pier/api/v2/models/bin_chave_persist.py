# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class BinChavePersist(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        BinChavePersist - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'chave': 'str',
            'check_value': 'str',
            'flag_descriptografado': 'bool',
            'id_bin': 'int',
            'id_tipo_chave': 'int',
            'label': 'str',
            'validade': 'str'
        }

        self.attribute_map = {
            'chave': 'chave',
            'check_value': 'checkValue',
            'flag_descriptografado': 'flagDescriptografado',
            'id_bin': 'idBin',
            'id_tipo_chave': 'idTipoChave',
            'label': 'label',
            'validade': 'validade'
        }

        self._chave = None
        self._check_value = None
        self._flag_descriptografado = None
        self._id_bin = None
        self._id_tipo_chave = None
        self._label = None
        self._validade = None

    @property
    def chave(self):
        """
        Gets the chave of this BinChavePersist.


        :return: The chave of this BinChavePersist.
        :rtype: str
        """
        return self._chave

    @chave.setter
    def chave(self, chave):
        """
        Sets the chave of this BinChavePersist.


        :param chave: The chave of this BinChavePersist.
        :type: str
        """
        self._chave = chave

    @property
    def check_value(self):
        """
        Gets the check_value of this BinChavePersist.


        :return: The check_value of this BinChavePersist.
        :rtype: str
        """
        return self._check_value

    @check_value.setter
    def check_value(self, check_value):
        """
        Sets the check_value of this BinChavePersist.


        :param check_value: The check_value of this BinChavePersist.
        :type: str
        """
        self._check_value = check_value

    @property
    def flag_descriptografado(self):
        """
        Gets the flag_descriptografado of this BinChavePersist.


        :return: The flag_descriptografado of this BinChavePersist.
        :rtype: bool
        """
        return self._flag_descriptografado

    @flag_descriptografado.setter
    def flag_descriptografado(self, flag_descriptografado):
        """
        Sets the flag_descriptografado of this BinChavePersist.


        :param flag_descriptografado: The flag_descriptografado of this BinChavePersist.
        :type: bool
        """
        self._flag_descriptografado = flag_descriptografado

    @property
    def id_bin(self):
        """
        Gets the id_bin of this BinChavePersist.


        :return: The id_bin of this BinChavePersist.
        :rtype: int
        """
        return self._id_bin

    @id_bin.setter
    def id_bin(self, id_bin):
        """
        Sets the id_bin of this BinChavePersist.


        :param id_bin: The id_bin of this BinChavePersist.
        :type: int
        """
        self._id_bin = id_bin

    @property
    def id_tipo_chave(self):
        """
        Gets the id_tipo_chave of this BinChavePersist.


        :return: The id_tipo_chave of this BinChavePersist.
        :rtype: int
        """
        return self._id_tipo_chave

    @id_tipo_chave.setter
    def id_tipo_chave(self, id_tipo_chave):
        """
        Sets the id_tipo_chave of this BinChavePersist.


        :param id_tipo_chave: The id_tipo_chave of this BinChavePersist.
        :type: int
        """
        self._id_tipo_chave = id_tipo_chave

    @property
    def label(self):
        """
        Gets the label of this BinChavePersist.


        :return: The label of this BinChavePersist.
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """
        Sets the label of this BinChavePersist.


        :param label: The label of this BinChavePersist.
        :type: str
        """
        self._label = label

    @property
    def validade(self):
        """
        Gets the validade of this BinChavePersist.


        :return: The validade of this BinChavePersist.
        :rtype: str
        """
        return self._validade

    @validade.setter
    def validade(self, validade):
        """
        Sets the validade of this BinChavePersist.


        :param validade: The validade of this BinChavePersist.
        :type: str
        """
        self._validade = validade

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

