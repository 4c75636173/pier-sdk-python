# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class PlanoParcelamentoTransferenciaResponse(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        PlanoParcelamentoTransferenciaResponse - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'codigo_especial': 'int',
            'vencimento_primeira_parcela': 'str',
            'flag_juros': 'int',
            'numero_meses_carencia': 'int',
            'parcelas': 'list[ParcelamentoTransferenciaResponse]'
        }

        self.attribute_map = {
            'codigo_especial': 'codigoEspecial',
            'vencimento_primeira_parcela': 'vencimentoPrimeiraParcela',
            'flag_juros': 'flagJuros',
            'numero_meses_carencia': 'numeroMesesCarencia',
            'parcelas': 'parcelas'
        }

        self._codigo_especial = None
        self._vencimento_primeira_parcela = None
        self._flag_juros = None
        self._numero_meses_carencia = None
        self._parcelas = None

    @property
    def codigo_especial(self):
        """
        Gets the codigo_especial of this PlanoParcelamentoTransferenciaResponse.
        C\u00C3\u00B3digo de processamento da transa\u00C3\u00A7\u00C3\u00A3o.

        :return: The codigo_especial of this PlanoParcelamentoTransferenciaResponse.
        :rtype: int
        """
        return self._codigo_especial

    @codigo_especial.setter
    def codigo_especial(self, codigo_especial):
        """
        Sets the codigo_especial of this PlanoParcelamentoTransferenciaResponse.
        C\u00C3\u00B3digo de processamento da transa\u00C3\u00A7\u00C3\u00A3o.

        :param codigo_especial: The codigo_especial of this PlanoParcelamentoTransferenciaResponse.
        :type: int
        """
        self._codigo_especial = codigo_especial

    @property
    def vencimento_primeira_parcela(self):
        """
        Gets the vencimento_primeira_parcela of this PlanoParcelamentoTransferenciaResponse.
        Data de vencimento da primeira parcela.

        :return: The vencimento_primeira_parcela of this PlanoParcelamentoTransferenciaResponse.
        :rtype: str
        """
        return self._vencimento_primeira_parcela

    @vencimento_primeira_parcela.setter
    def vencimento_primeira_parcela(self, vencimento_primeira_parcela):
        """
        Sets the vencimento_primeira_parcela of this PlanoParcelamentoTransferenciaResponse.
        Data de vencimento da primeira parcela.

        :param vencimento_primeira_parcela: The vencimento_primeira_parcela of this PlanoParcelamentoTransferenciaResponse.
        :type: str
        """
        self._vencimento_primeira_parcela = vencimento_primeira_parcela

    @property
    def flag_juros(self):
        """
        Gets the flag_juros of this PlanoParcelamentoTransferenciaResponse.
        Flag indicativa para juros.

        :return: The flag_juros of this PlanoParcelamentoTransferenciaResponse.
        :rtype: int
        """
        return self._flag_juros

    @flag_juros.setter
    def flag_juros(self, flag_juros):
        """
        Sets the flag_juros of this PlanoParcelamentoTransferenciaResponse.
        Flag indicativa para juros.

        :param flag_juros: The flag_juros of this PlanoParcelamentoTransferenciaResponse.
        :type: int
        """
        self._flag_juros = flag_juros

    @property
    def numero_meses_carencia(self):
        """
        Gets the numero_meses_carencia of this PlanoParcelamentoTransferenciaResponse.
        N\u00C3\u00BAmero de meses para car\u00C3\u00AAncia.

        :return: The numero_meses_carencia of this PlanoParcelamentoTransferenciaResponse.
        :rtype: int
        """
        return self._numero_meses_carencia

    @numero_meses_carencia.setter
    def numero_meses_carencia(self, numero_meses_carencia):
        """
        Sets the numero_meses_carencia of this PlanoParcelamentoTransferenciaResponse.
        N\u00C3\u00BAmero de meses para car\u00C3\u00AAncia.

        :param numero_meses_carencia: The numero_meses_carencia of this PlanoParcelamentoTransferenciaResponse.
        :type: int
        """
        self._numero_meses_carencia = numero_meses_carencia

    @property
    def parcelas(self):
        """
        Gets the parcelas of this PlanoParcelamentoTransferenciaResponse.
        Lista com os planos de parcelamento.

        :return: The parcelas of this PlanoParcelamentoTransferenciaResponse.
        :rtype: list[ParcelamentoTransferenciaResponse]
        """
        return self._parcelas

    @parcelas.setter
    def parcelas(self, parcelas):
        """
        Sets the parcelas of this PlanoParcelamentoTransferenciaResponse.
        Lista com os planos de parcelamento.

        :param parcelas: The parcelas of this PlanoParcelamentoTransferenciaResponse.
        :type: list[ParcelamentoTransferenciaResponse]
        """
        self._parcelas = parcelas

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

