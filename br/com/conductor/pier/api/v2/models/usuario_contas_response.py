# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class UsuarioContasResponse(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        UsuarioContasResponse - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'int',
            'id_conta': 'int',
            'id_pessoa': 'int',
            'id_usuario': 'int',
            'nivel_acesso': 'int'
        }

        self.attribute_map = {
            'id': 'id',
            'id_conta': 'idConta',
            'id_pessoa': 'idPessoa',
            'id_usuario': 'idUsuario',
            'nivel_acesso': 'nivelAcesso'
        }

        self._id = None
        self._id_conta = None
        self._id_pessoa = None
        self._id_usuario = None
        self._nivel_acesso = None

    @property
    def id(self):
        """
        Gets the id of this UsuarioContasResponse.
        {{{usuario_conta_resposta_id_descricao}}}

        :return: The id of this UsuarioContasResponse.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this UsuarioContasResponse.
        {{{usuario_conta_resposta_id_descricao}}}

        :param id: The id of this UsuarioContasResponse.
        :type: int
        """
        self._id = id

    @property
    def id_conta(self):
        """
        Gets the id_conta of this UsuarioContasResponse.
        {{{usuario_conta_resposta_id_conta_descricao}}}

        :return: The id_conta of this UsuarioContasResponse.
        :rtype: int
        """
        return self._id_conta

    @id_conta.setter
    def id_conta(self, id_conta):
        """
        Sets the id_conta of this UsuarioContasResponse.
        {{{usuario_conta_resposta_id_conta_descricao}}}

        :param id_conta: The id_conta of this UsuarioContasResponse.
        :type: int
        """
        self._id_conta = id_conta

    @property
    def id_pessoa(self):
        """
        Gets the id_pessoa of this UsuarioContasResponse.
        {{{usuario_conta_resposta_id_pessoa_descricao}}}

        :return: The id_pessoa of this UsuarioContasResponse.
        :rtype: int
        """
        return self._id_pessoa

    @id_pessoa.setter
    def id_pessoa(self, id_pessoa):
        """
        Sets the id_pessoa of this UsuarioContasResponse.
        {{{usuario_conta_resposta_id_pessoa_descricao}}}

        :param id_pessoa: The id_pessoa of this UsuarioContasResponse.
        :type: int
        """
        self._id_pessoa = id_pessoa

    @property
    def id_usuario(self):
        """
        Gets the id_usuario of this UsuarioContasResponse.
        {{{usuario_conta_resposta_id_usuario_descricao}}}

        :return: The id_usuario of this UsuarioContasResponse.
        :rtype: int
        """
        return self._id_usuario

    @id_usuario.setter
    def id_usuario(self, id_usuario):
        """
        Sets the id_usuario of this UsuarioContasResponse.
        {{{usuario_conta_resposta_id_usuario_descricao}}}

        :param id_usuario: The id_usuario of this UsuarioContasResponse.
        :type: int
        """
        self._id_usuario = id_usuario

    @property
    def nivel_acesso(self):
        """
        Gets the nivel_acesso of this UsuarioContasResponse.
        {{{usuario_conta_resposta_nivel_acesso_descricao}}}

        :return: The nivel_acesso of this UsuarioContasResponse.
        :rtype: int
        """
        return self._nivel_acesso

    @nivel_acesso.setter
    def nivel_acesso(self, nivel_acesso):
        """
        Sets the nivel_acesso of this UsuarioContasResponse.
        {{{usuario_conta_resposta_nivel_acesso_descricao}}}

        :param nivel_acesso: The nivel_acesso of this UsuarioContasResponse.
        :type: int
        """
        self._nivel_acesso = nivel_acesso

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

