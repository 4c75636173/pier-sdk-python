# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class StatusConta(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        StatusConta - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'flag_altera_limite': 'int',
            'id': 'int',
            'mensagem_consulta_negada': 'str',
            'nome': 'str'
        }

        self.attribute_map = {
            'flag_altera_limite': 'flagAlteraLimite',
            'id': 'id',
            'mensagem_consulta_negada': 'mensagemConsultaNegada',
            'nome': 'nome'
        }

        self._flag_altera_limite = None
        self._id = None
        self._mensagem_consulta_negada = None
        self._nome = None

    @property
    def flag_altera_limite(self):
        """
        Gets the flag_altera_limite of this StatusConta.
        Par\u00C3\u00A2metro que define se o Status da Conta permite realizar a Altera\u00C3\u00A7\u00C3\u00A3o de Limites do Portador, sendo: 0: Inativo e 1: Ativo.

        :return: The flag_altera_limite of this StatusConta.
        :rtype: int
        """
        return self._flag_altera_limite

    @flag_altera_limite.setter
    def flag_altera_limite(self, flag_altera_limite):
        """
        Sets the flag_altera_limite of this StatusConta.
        Par\u00C3\u00A2metro que define se o Status da Conta permite realizar a Altera\u00C3\u00A7\u00C3\u00A3o de Limites do Portador, sendo: 0: Inativo e 1: Ativo.

        :param flag_altera_limite: The flag_altera_limite of this StatusConta.
        :type: int
        """
        self._flag_altera_limite = flag_altera_limite

    @property
    def id(self):
        """
        Gets the id of this StatusConta.
        C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Status da Conta (id).

        :return: The id of this StatusConta.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this StatusConta.
        C\u00C3\u00B3digo de Identifica\u00C3\u00A7\u00C3\u00A3o do Status da Conta (id).

        :param id: The id of this StatusConta.
        :type: int
        """
        self._id = id

    @property
    def mensagem_consulta_negada(self):
        """
        Gets the mensagem_consulta_negada of this StatusConta.
        Apresenta o texto com o motivo que ser\u00C3\u00A1 apresentado na resposta as opera\u00C3\u00A7\u00C3\u00B5es de Listar e Consultar LimitesDisponibilidades.

        :return: The mensagem_consulta_negada of this StatusConta.
        :rtype: str
        """
        return self._mensagem_consulta_negada

    @mensagem_consulta_negada.setter
    def mensagem_consulta_negada(self, mensagem_consulta_negada):
        """
        Sets the mensagem_consulta_negada of this StatusConta.
        Apresenta o texto com o motivo que ser\u00C3\u00A1 apresentado na resposta as opera\u00C3\u00A7\u00C3\u00B5es de Listar e Consultar LimitesDisponibilidades.

        :param mensagem_consulta_negada: The mensagem_consulta_negada of this StatusConta.
        :type: str
        """
        self._mensagem_consulta_negada = mensagem_consulta_negada

    @property
    def nome(self):
        """
        Gets the nome of this StatusConta.
        Nome atribu\u00C3\u00ADdo ao Status da Conta.

        :return: The nome of this StatusConta.
        :rtype: str
        """
        return self._nome

    @nome.setter
    def nome(self, nome):
        """
        Sets the nome of this StatusConta.
        Nome atribu\u00C3\u00ADdo ao Status da Conta.

        :param nome: The nome of this StatusConta.
        :type: str
        """
        self._nome = nome

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

