# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class Token(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        Token - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'int',
            'token': 'str',
            'base': 'int',
            'owner': 'str',
            'status': 'str',
            'criado_por': 'str',
            'data_criacao': 'datetime',
            'alterado_por': 'str',
            'data_modificacao': 'datetime'
        }

        self.attribute_map = {
            'id': 'id',
            'token': 'token',
            'base': 'base',
            'owner': 'owner',
            'status': 'status',
            'criado_por': 'criadoPor',
            'data_criacao': 'dataCriacao',
            'alterado_por': 'alteradoPor',
            'data_modificacao': 'dataModificacao'
        }

        self._id = None
        self._token = None
        self._base = None
        self._owner = None
        self._status = None
        self._criado_por = None
        self._data_criacao = None
        self._alterado_por = None
        self._data_modificacao = None

    @property
    def id(self):
        """
        Gets the id of this Token.
        C\u00C3\u00B3digo identificador do token

        :return: The id of this Token.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Token.
        C\u00C3\u00B3digo identificador do token

        :param id: The id of this Token.
        :type: int
        """
        self._id = id

    @property
    def token(self):
        """
        Gets the token of this Token.
        Token

        :return: The token of this Token.
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """
        Sets the token of this Token.
        Token

        :param token: The token of this Token.
        :type: str
        """
        self._token = token

    @property
    def base(self):
        """
        Gets the base of this Token.
        C\u00C3\u00B3digo identificador da base

        :return: The base of this Token.
        :rtype: int
        """
        return self._base

    @base.setter
    def base(self, base):
        """
        Sets the base of this Token.
        C\u00C3\u00B3digo identificador da base

        :param base: The base of this Token.
        :type: int
        """
        self._base = base

    @property
    def owner(self):
        """
        Gets the owner of this Token.
        Owner do token

        :return: The owner of this Token.
        :rtype: str
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """
        Sets the owner of this Token.
        Owner do token

        :param owner: The owner of this Token.
        :type: str
        """
        self._owner = owner

    @property
    def status(self):
        """
        Gets the status of this Token.
        Status do token

        :return: The status of this Token.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this Token.
        Status do token

        :param status: The status of this Token.
        :type: str
        """
        allowed_values = ["ACTIVE", "REVOKED", "DELETED"]
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status`, must be one of {0}"
                .format(allowed_values)
            )
        self._status = status

    @property
    def criado_por(self):
        """
        Gets the criado_por of this Token.
        Descri\u00C3\u00A7\u00C3\u00A3o de quem criou o token

        :return: The criado_por of this Token.
        :rtype: str
        """
        return self._criado_por

    @criado_por.setter
    def criado_por(self, criado_por):
        """
        Sets the criado_por of this Token.
        Descri\u00C3\u00A7\u00C3\u00A3o de quem criou o token

        :param criado_por: The criado_por of this Token.
        :type: str
        """
        self._criado_por = criado_por

    @property
    def data_criacao(self):
        """
        Gets the data_criacao of this Token.
        Data de cria\u00C3\u00A7\u00C3\u00A3o do token

        :return: The data_criacao of this Token.
        :rtype: datetime
        """
        return self._data_criacao

    @data_criacao.setter
    def data_criacao(self, data_criacao):
        """
        Sets the data_criacao of this Token.
        Data de cria\u00C3\u00A7\u00C3\u00A3o do token

        :param data_criacao: The data_criacao of this Token.
        :type: datetime
        """
        self._data_criacao = data_criacao

    @property
    def alterado_por(self):
        """
        Gets the alterado_por of this Token.
        Descri\u00C3\u00A7\u00C3\u00A3o de quem alterou o token

        :return: The alterado_por of this Token.
        :rtype: str
        """
        return self._alterado_por

    @alterado_por.setter
    def alterado_por(self, alterado_por):
        """
        Sets the alterado_por of this Token.
        Descri\u00C3\u00A7\u00C3\u00A3o de quem alterou o token

        :param alterado_por: The alterado_por of this Token.
        :type: str
        """
        self._alterado_por = alterado_por

    @property
    def data_modificacao(self):
        """
        Gets the data_modificacao of this Token.
        Data de modifica\u00C3\u00A7\u00C3\u00A3o do token

        :return: The data_modificacao of this Token.
        :rtype: datetime
        """
        return self._data_modificacao

    @data_modificacao.setter
    def data_modificacao(self, data_modificacao):
        """
        Sets the data_modificacao of this Token.
        Data de modifica\u00C3\u00A7\u00C3\u00A3o do token

        :param data_modificacao: The data_modificacao of this Token.
        :type: datetime
        """
        self._data_modificacao = data_modificacao

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

