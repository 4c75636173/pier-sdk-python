# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class HistoricoImpressaoCartaoResponse(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        HistoricoImpressaoCartaoResponse - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'int',
            'id_cartao': 'int',
            'id_status_impressao_cartao': 'int',
            'mensagem_historico': 'str',
            'data_historico': 'str'
        }

        self.attribute_map = {
            'id': 'id',
            'id_cartao': 'idCartao',
            'id_status_impressao_cartao': 'idStatusImpressaoCartao',
            'mensagem_historico': 'mensagemHistorico',
            'data_historico': 'dataHistorico'
        }

        self._id = None
        self._id_cartao = None
        self._id_status_impressao_cartao = None
        self._mensagem_historico = None
        self._data_historico = None

    @property
    def id(self):
        """
        Gets the id of this HistoricoImpressaoCartaoResponse.
        {{{historico_impressao_cartao_response_id_value}}}

        :return: The id of this HistoricoImpressaoCartaoResponse.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this HistoricoImpressaoCartaoResponse.
        {{{historico_impressao_cartao_response_id_value}}}

        :param id: The id of this HistoricoImpressaoCartaoResponse.
        :type: int
        """
        self._id = id

    @property
    def id_cartao(self):
        """
        Gets the id_cartao of this HistoricoImpressaoCartaoResponse.
        {{{historico_impressao_cartao_response_id_cartao_value}}}

        :return: The id_cartao of this HistoricoImpressaoCartaoResponse.
        :rtype: int
        """
        return self._id_cartao

    @id_cartao.setter
    def id_cartao(self, id_cartao):
        """
        Sets the id_cartao of this HistoricoImpressaoCartaoResponse.
        {{{historico_impressao_cartao_response_id_cartao_value}}}

        :param id_cartao: The id_cartao of this HistoricoImpressaoCartaoResponse.
        :type: int
        """
        self._id_cartao = id_cartao

    @property
    def id_status_impressao_cartao(self):
        """
        Gets the id_status_impressao_cartao of this HistoricoImpressaoCartaoResponse.
        {{{historico_impressao_cartao_response_id_status_impressao_cartao_value}}}

        :return: The id_status_impressao_cartao of this HistoricoImpressaoCartaoResponse.
        :rtype: int
        """
        return self._id_status_impressao_cartao

    @id_status_impressao_cartao.setter
    def id_status_impressao_cartao(self, id_status_impressao_cartao):
        """
        Sets the id_status_impressao_cartao of this HistoricoImpressaoCartaoResponse.
        {{{historico_impressao_cartao_response_id_status_impressao_cartao_value}}}

        :param id_status_impressao_cartao: The id_status_impressao_cartao of this HistoricoImpressaoCartaoResponse.
        :type: int
        """
        self._id_status_impressao_cartao = id_status_impressao_cartao

    @property
    def mensagem_historico(self):
        """
        Gets the mensagem_historico of this HistoricoImpressaoCartaoResponse.
        {{{historico_impressao_cartao_response_mensagem_historico_value}}}

        :return: The mensagem_historico of this HistoricoImpressaoCartaoResponse.
        :rtype: str
        """
        return self._mensagem_historico

    @mensagem_historico.setter
    def mensagem_historico(self, mensagem_historico):
        """
        Sets the mensagem_historico of this HistoricoImpressaoCartaoResponse.
        {{{historico_impressao_cartao_response_mensagem_historico_value}}}

        :param mensagem_historico: The mensagem_historico of this HistoricoImpressaoCartaoResponse.
        :type: str
        """
        self._mensagem_historico = mensagem_historico

    @property
    def data_historico(self):
        """
        Gets the data_historico of this HistoricoImpressaoCartaoResponse.
        {{{historico_impressao_cartao_response_data_historico_value}}}

        :return: The data_historico of this HistoricoImpressaoCartaoResponse.
        :rtype: str
        """
        return self._data_historico

    @data_historico.setter
    def data_historico(self, data_historico):
        """
        Sets the data_historico of this HistoricoImpressaoCartaoResponse.
        {{{historico_impressao_cartao_response_data_historico_value}}}

        :param data_historico: The data_historico of this HistoricoImpressaoCartaoResponse.
        :type: str
        """
        self._data_historico = data_historico

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

