# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class TaxaAntecipacaoRequest(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        TaxaAntecipacaoRequest - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'tipo_transacao': 'str',
            'valor_taxa': 'float'
        }

        self.attribute_map = {
            'tipo_transacao': 'tipoTransacao',
            'valor_taxa': 'valorTaxa'
        }

        self._tipo_transacao = None
        self._valor_taxa = None

    @property
    def tipo_transacao(self):
        """
        Gets the tipo_transacao of this TaxaAntecipacaoRequest.
        C\u00C3\u00B3digo que identifica se um par\u00C3\u00A2metro refere-se a uma transa\u00C3\u00A7\u00C3\u00A3o On-Us ou Off-Us.

        :return: The tipo_transacao of this TaxaAntecipacaoRequest.
        :rtype: str
        """
        return self._tipo_transacao

    @tipo_transacao.setter
    def tipo_transacao(self, tipo_transacao):
        """
        Sets the tipo_transacao of this TaxaAntecipacaoRequest.
        C\u00C3\u00B3digo que identifica se um par\u00C3\u00A2metro refere-se a uma transa\u00C3\u00A7\u00C3\u00A3o On-Us ou Off-Us.

        :param tipo_transacao: The tipo_transacao of this TaxaAntecipacaoRequest.
        :type: str
        """
        allowed_values = ["ON_US", "OFF_US"]
        if tipo_transacao not in allowed_values:
            raise ValueError(
                "Invalid value for `tipo_transacao`, must be one of {0}"
                .format(allowed_values)
            )
        self._tipo_transacao = tipo_transacao

    @property
    def valor_taxa(self):
        """
        Gets the valor_taxa of this TaxaAntecipacaoRequest.
        Valor da Taxa de Antecipa\u00C3\u00A7\u00C3\u00A3o.

        :return: The valor_taxa of this TaxaAntecipacaoRequest.
        :rtype: float
        """
        return self._valor_taxa

    @valor_taxa.setter
    def valor_taxa(self, valor_taxa):
        """
        Sets the valor_taxa of this TaxaAntecipacaoRequest.
        Valor da Taxa de Antecipa\u00C3\u00A7\u00C3\u00A3o.

        :param valor_taxa: The valor_taxa of this TaxaAntecipacaoRequest.
        :type: float
        """
        self._valor_taxa = valor_taxa

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

