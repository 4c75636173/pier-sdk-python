# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class TokenPersistValue(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        TokenPersistValue - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'token': 'str',
            'base': 'int',
            'owner': 'str',
            'criado_por': 'str',
            'id_aplicacao': 'int'
        }

        self.attribute_map = {
            'token': 'token',
            'base': 'base',
            'owner': 'owner',
            'criado_por': 'criadoPor',
            'id_aplicacao': 'idAplicacao'
        }

        self._token = None
        self._base = None
        self._owner = None
        self._criado_por = None
        self._id_aplicacao = None

    @property
    def token(self):
        """
        Gets the token of this TokenPersistValue.
        {{{token_dto_token_value}}}

        :return: The token of this TokenPersistValue.
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """
        Sets the token of this TokenPersistValue.
        {{{token_dto_token_value}}}

        :param token: The token of this TokenPersistValue.
        :type: str
        """
        self._token = token

    @property
    def base(self):
        """
        Gets the base of this TokenPersistValue.
        {{{token_dto_base_value}}}

        :return: The base of this TokenPersistValue.
        :rtype: int
        """
        return self._base

    @base.setter
    def base(self, base):
        """
        Sets the base of this TokenPersistValue.
        {{{token_dto_base_value}}}

        :param base: The base of this TokenPersistValue.
        :type: int
        """
        self._base = base

    @property
    def owner(self):
        """
        Gets the owner of this TokenPersistValue.
        {{{token_dto_owner_value}}}

        :return: The owner of this TokenPersistValue.
        :rtype: str
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """
        Sets the owner of this TokenPersistValue.
        {{{token_dto_owner_value}}}

        :param owner: The owner of this TokenPersistValue.
        :type: str
        """
        self._owner = owner

    @property
    def criado_por(self):
        """
        Gets the criado_por of this TokenPersistValue.
        {{{token_dto_criado_por_value}}}

        :return: The criado_por of this TokenPersistValue.
        :rtype: str
        """
        return self._criado_por

    @criado_por.setter
    def criado_por(self, criado_por):
        """
        Sets the criado_por of this TokenPersistValue.
        {{{token_dto_criado_por_value}}}

        :param criado_por: The criado_por of this TokenPersistValue.
        :type: str
        """
        self._criado_por = criado_por

    @property
    def id_aplicacao(self):
        """
        Gets the id_aplicacao of this TokenPersistValue.
        {{{token_dto_id_application_value}}}

        :return: The id_aplicacao of this TokenPersistValue.
        :rtype: int
        """
        return self._id_aplicacao

    @id_aplicacao.setter
    def id_aplicacao(self, id_aplicacao):
        """
        Sets the id_aplicacao of this TokenPersistValue.
        {{{token_dto_id_application_value}}}

        :param id_aplicacao: The id_aplicacao of this TokenPersistValue.
        :type: int
        """
        self._id_aplicacao = id_aplicacao

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

