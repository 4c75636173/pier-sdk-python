# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class PromotorResponse(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        PromotorResponse - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'int',
            'nome': 'str',
            'data_cadastro': 'str',
            'id_estabelecimento': 'int',
            'id_usuario': 'int'
        }

        self.attribute_map = {
            'id': 'id',
            'nome': 'nome',
            'data_cadastro': 'dataCadastro',
            'id_estabelecimento': 'idEstabelecimento',
            'id_usuario': 'idUsuario'
        }

        self._id = None
        self._nome = None
        self._data_cadastro = None
        self._id_estabelecimento = None
        self._id_usuario = None

    @property
    def id(self):
        """
        Gets the id of this PromotorResponse.
        C\u00F3digo de Identifica\u00E7\u00E3o do promotor (id)

        :return: The id of this PromotorResponse.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this PromotorResponse.
        C\u00F3digo de Identifica\u00E7\u00E3o do promotor (id)

        :param id: The id of this PromotorResponse.
        :type: int
        """
        self._id = id

    @property
    def nome(self):
        """
        Gets the nome of this PromotorResponse.
        Nome do Promotor

        :return: The nome of this PromotorResponse.
        :rtype: str
        """
        return self._nome

    @nome.setter
    def nome(self, nome):
        """
        Sets the nome of this PromotorResponse.
        Nome do Promotor

        :param nome: The nome of this PromotorResponse.
        :type: str
        """
        self._nome = nome

    @property
    def data_cadastro(self):
        """
        Gets the data_cadastro of this PromotorResponse.
        Data da Inclus\u00E3o

        :return: The data_cadastro of this PromotorResponse.
        :rtype: str
        """
        return self._data_cadastro

    @data_cadastro.setter
    def data_cadastro(self, data_cadastro):
        """
        Sets the data_cadastro of this PromotorResponse.
        Data da Inclus\u00E3o

        :param data_cadastro: The data_cadastro of this PromotorResponse.
        :type: str
        """
        self._data_cadastro = data_cadastro

    @property
    def id_estabelecimento(self):
        """
        Gets the id_estabelecimento of this PromotorResponse.
        C\u00F3digo de Identifica\u00E7\u00E3o do Estabelecimento

        :return: The id_estabelecimento of this PromotorResponse.
        :rtype: int
        """
        return self._id_estabelecimento

    @id_estabelecimento.setter
    def id_estabelecimento(self, id_estabelecimento):
        """
        Sets the id_estabelecimento of this PromotorResponse.
        C\u00F3digo de Identifica\u00E7\u00E3o do Estabelecimento

        :param id_estabelecimento: The id_estabelecimento of this PromotorResponse.
        :type: int
        """
        self._id_estabelecimento = id_estabelecimento

    @property
    def id_usuario(self):
        """
        Gets the id_usuario of this PromotorResponse.
        C\u00F3digo de Identifica\u00E7\u00E3o do usu\u00E1rio

        :return: The id_usuario of this PromotorResponse.
        :rtype: int
        """
        return self._id_usuario

    @id_usuario.setter
    def id_usuario(self, id_usuario):
        """
        Sets the id_usuario of this PromotorResponse.
        C\u00F3digo de Identifica\u00E7\u00E3o do usu\u00E1rio

        :param id_usuario: The id_usuario of this PromotorResponse.
        :type: int
        """
        self._id_usuario = id_usuario

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

