# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class ContestarCompraRequest(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        ContestarCompraRequest - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'codigo_chargeback_id': 'int',
            'compras': 'list[int]',
            'enviar_documentos': 'bool',
            'mensagem': 'str',
            'mensagem_cs_light': 'str',
            'mensagem_chargeback': 'str',
            'status_id': 'int',
            'tipo_contestacao_id': 'int'
        }

        self.attribute_map = {
            'codigo_chargeback_id': 'codigoChargebackId',
            'compras': 'compras',
            'enviar_documentos': 'enviarDocumentos',
            'mensagem': 'mensagem',
            'mensagem_cs_light': 'mensagemCSLight',
            'mensagem_chargeback': 'mensagemChargeback',
            'status_id': 'statusId',
            'tipo_contestacao_id': 'tipoContestacaoId'
        }

        self._codigo_chargeback_id = None
        self._compras = None
        self._enviar_documentos = None
        self._mensagem = None
        self._mensagem_cs_light = None
        self._mensagem_chargeback = None
        self._status_id = None
        self._tipo_contestacao_id = None

    @property
    def codigo_chargeback_id(self):
        """
        Gets the codigo_chargeback_id of this ContestarCompraRequest.


        :return: The codigo_chargeback_id of this ContestarCompraRequest.
        :rtype: int
        """
        return self._codigo_chargeback_id

    @codigo_chargeback_id.setter
    def codigo_chargeback_id(self, codigo_chargeback_id):
        """
        Sets the codigo_chargeback_id of this ContestarCompraRequest.


        :param codigo_chargeback_id: The codigo_chargeback_id of this ContestarCompraRequest.
        :type: int
        """
        self._codigo_chargeback_id = codigo_chargeback_id

    @property
    def compras(self):
        """
        Gets the compras of this ContestarCompraRequest.


        :return: The compras of this ContestarCompraRequest.
        :rtype: list[int]
        """
        return self._compras

    @compras.setter
    def compras(self, compras):
        """
        Sets the compras of this ContestarCompraRequest.


        :param compras: The compras of this ContestarCompraRequest.
        :type: list[int]
        """
        self._compras = compras

    @property
    def enviar_documentos(self):
        """
        Gets the enviar_documentos of this ContestarCompraRequest.


        :return: The enviar_documentos of this ContestarCompraRequest.
        :rtype: bool
        """
        return self._enviar_documentos

    @enviar_documentos.setter
    def enviar_documentos(self, enviar_documentos):
        """
        Sets the enviar_documentos of this ContestarCompraRequest.


        :param enviar_documentos: The enviar_documentos of this ContestarCompraRequest.
        :type: bool
        """
        self._enviar_documentos = enviar_documentos

    @property
    def mensagem(self):
        """
        Gets the mensagem of this ContestarCompraRequest.


        :return: The mensagem of this ContestarCompraRequest.
        :rtype: str
        """
        return self._mensagem

    @mensagem.setter
    def mensagem(self, mensagem):
        """
        Sets the mensagem of this ContestarCompraRequest.


        :param mensagem: The mensagem of this ContestarCompraRequest.
        :type: str
        """
        self._mensagem = mensagem

    @property
    def mensagem_cs_light(self):
        """
        Gets the mensagem_cs_light of this ContestarCompraRequest.


        :return: The mensagem_cs_light of this ContestarCompraRequest.
        :rtype: str
        """
        return self._mensagem_cs_light

    @mensagem_cs_light.setter
    def mensagem_cs_light(self, mensagem_cs_light):
        """
        Sets the mensagem_cs_light of this ContestarCompraRequest.


        :param mensagem_cs_light: The mensagem_cs_light of this ContestarCompraRequest.
        :type: str
        """
        self._mensagem_cs_light = mensagem_cs_light

    @property
    def mensagem_chargeback(self):
        """
        Gets the mensagem_chargeback of this ContestarCompraRequest.


        :return: The mensagem_chargeback of this ContestarCompraRequest.
        :rtype: str
        """
        return self._mensagem_chargeback

    @mensagem_chargeback.setter
    def mensagem_chargeback(self, mensagem_chargeback):
        """
        Sets the mensagem_chargeback of this ContestarCompraRequest.


        :param mensagem_chargeback: The mensagem_chargeback of this ContestarCompraRequest.
        :type: str
        """
        self._mensagem_chargeback = mensagem_chargeback

    @property
    def status_id(self):
        """
        Gets the status_id of this ContestarCompraRequest.


        :return: The status_id of this ContestarCompraRequest.
        :rtype: int
        """
        return self._status_id

    @status_id.setter
    def status_id(self, status_id):
        """
        Sets the status_id of this ContestarCompraRequest.


        :param status_id: The status_id of this ContestarCompraRequest.
        :type: int
        """
        self._status_id = status_id

    @property
    def tipo_contestacao_id(self):
        """
        Gets the tipo_contestacao_id of this ContestarCompraRequest.


        :return: The tipo_contestacao_id of this ContestarCompraRequest.
        :rtype: int
        """
        return self._tipo_contestacao_id

    @tipo_contestacao_id.setter
    def tipo_contestacao_id(self, tipo_contestacao_id):
        """
        Sets the tipo_contestacao_id of this ContestarCompraRequest.


        :param tipo_contestacao_id: The tipo_contestacao_id of this ContestarCompraRequest.
        :type: int
        """
        self._tipo_contestacao_id = tipo_contestacao_id

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

